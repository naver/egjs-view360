{"version":3,"file":"SpinViewer/view360.spinviewer.js","sources":["webpack:///webpack/universalModuleDefinition?5ca6*","webpack:///webpack/bootstrap 49af8c683810c2747c57?e883*","webpack:///external {\"commonjs\":\"@egjs/component\",\"commonjs2\":\"@egjs/component\",\"amd\":\"@egjs/component\",\"root\":[\"eg\",\"Component\"]}?e192*","webpack:///./src/SpinViewer/SpriteImage.js?95ac","webpack:///./src/SpinViewer/SpinViewer.js?36a2","webpack:///./src/SpinViewer/index.js?9166","webpack:///external {\"commonjs\":\"@egjs/axes\",\"commonjs2\":\"@egjs/axes\",\"amd\":\"@egjs/axes\",\"root\":[\"eg\",\"Axes\"]}?7a28*"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@egjs/component\"), require(\"@egjs/axes\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"view360\", [\"@egjs/component\", \"@egjs/axes\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"view360\"] = factory(require(\"@egjs/component\"), require(\"@egjs/axes\"));\n\telse\n\t\troot[\"eg\"] = root[\"eg\"] || {}, root[\"eg\"][\"view360\"] = factory(root[\"eg\"][\"Component\"], root[\"eg\"][\"Axes\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_7__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 21);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 49af8c683810c2747c57","module.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"commonjs\":\"@egjs/component\",\"commonjs2\":\"@egjs/component\",\"amd\":\"@egjs/component\",\"root\":[\"eg\",\"Component\"]}\n// module id = 0\n// module chunks = 0 1 2 3 4 5","\"use strict\";\n\nexports.__esModule = true;\n\nvar _component = require(\"@egjs/component\");\n\nvar _component2 = _interopRequireDefault(_component);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @class eg.view360.SpriteImage\n * @classdesc A module that displays a single or continuous image of any one of the \"sprite images\". SpinViewer internally uses SpriteImage to show each frame of the sprite image.\n * @ko 스프라이트 이미지 중 임의의 한 프레임을 단발성 혹은 연속적으로 보여주는 컴포넌트입니다. SpinViewer 는 내부적으로 SpriteImage 를 사용하여 스프라이트 이미지의 각 프레임을 보여줍니다.\n * @extends eg.Component\n *\n * @param {HTMLElement} element The element to show the image <ko>이미지를 보여줄 대상 요소</ko>\n * @param {Object} options The option object<ko>파라미터 객체</ko>\n * @param {String} options.imageUrl The url of the sprite image <ko>스프라이트 이미지의 url</ko>\n * @param {Number} [options.rowCount=1] Number of horizontal frames in the sprite image <ko>스프라이트 이미지의 가로 프레임 갯수</ko>\n * @param {Number} [options.colCount=1] Number of vertical frames in the sprite image <ko>스프라이트 이미지의 세로 프레임 갯수</ko>\n * @param {Number|String} [options.width=\"auto\"] The width of the target element to show the image <ko>이미지를 보여줄 대상 요소의 너비</ko>\n * @param {Number|String} [options.height=\"auto\"] The height of the target element to show the image <ko>이미지를 보여줄 대상 요소의 높이</ko>\n * @param {Boolean} [options.autoHeight=true] Whether to automatically set the height of the image area to match the original image's proportion <ko>원본 이미지 비율에 맞게 이미지 영역의 높이를 자동으로 설정할지 여부</ko>\n * @param {Number[]} [options.colRow=[0, 0]] The column, row coordinates of the first frame of the sprite image (based on 0 index) <ko> 스프라이트 이미지 중 처음 보여줄 프레임의 (column, row) 좌표 (0 index 기반)</ko>\n * @param {Number} [options.frameIndex=0] frameIndex specifies the index of the frame to be displayed in the \"Sprite image\". The frameIndex order is zero-based and indexed in Z form (left-to-right, top-to-bottom, and newline again from left to right).<br>- colRow is equivalent to frameIndex. However, if colRow is specified at the same time, colRow takes precedence.<ko>스프라이트 이미지 중에서 보여질 프레임의 인덱스를 지정합니다. frameIndex 순서는 0부터 시작하며 Z 형태(왼쪽에서 오른쪽, 위에서 아래, 개행 시 다시 왼쪽 부터)로 인덱싱합니다.<br>- colRow 는 frameIndex 와 동일한 기능을 합니다. 단, colRow 가 동시에 지정된 경우 colRow 가 우선합니다.</ko>\n * @param {Number} [options.scale=1] Spin scale (The larger the spin, the more).<ko>Spin 배율 (클 수록 더 많이 움직임)</ko>\n *\n * @support {\"ie\": \"9+\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\", \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"2.3+ (except 3.x)\"}\n * @example\n *\n * // Initialize SpriteImage\n *\n * var el = document.getElementById(\"image-div\");\n * var sprites = new eg.view360.SpriteImage(el, {\n * \timageUrl: \"/img/bag360.jpg\", // required\n * \trowCount: 24\n * });\n */\nvar SpriteImage = function (_Component) {\n\t_inherits(SpriteImage, _Component);\n\n\tfunction SpriteImage(element, options) {\n\t\t_classCallCheck(this, SpriteImage);\n\n\t\tvar _this = _possibleConstructorReturn(this, _Component.call(this));\n\n\t\tvar opt = options || {};\n\n\t\t_this._el = element;\n\t\t_this._rowCount = opt.rowCount || 1;\n\t\t_this._colCount = opt.colCount || 1;\n\t\t_this._totalCount = _this._rowCount * _this._colCount; // total frames\n\t\t_this._width = opt.width || \"auto\";\n\t\t_this._height = opt.height || \"auto\";\n\t\t_this._autoHeight = opt.autoHeight != null ? opt.autoHeight : \"true\"; // If autoHeight is specified, _height will be overwritten.\n\t\t_this._colRow = [0, 0];\n\n\t\tif (opt.colRow) {\n\t\t\t_this._colRow = opt.colRow;\n\t\t} else if (opt.frameIndex) {\n\t\t\t_this.setFrameIndex(opt.frameIndex);\n\t\t}\n\n\t\t_this._el.style.width = SpriteImage._getSizeString(_this._width);\n\t\t_this._el.style.height = SpriteImage._getSizeString(_this._height);\n\n\t\tif (!opt.imageUrl) {\n\t\t\tsetTimeout(function () {\n\t\t\t\t_this.trigger(\"imageError\", {\n\t\t\t\t\timageUrl: opt.imageUrl\n\t\t\t\t});\n\t\t\t}, 0);\n\t\t\treturn _possibleConstructorReturn(_this);\n\t\t}\n\n\t\t_this._image = new Image();\n\t\t/**\n   * Event\n   */\n\t\t_this._image.onload = function () {\n\t\t\t_this._bg = SpriteImage._createBgDiv(_this._image, _this._rowCount, _this._colCount, _this._autoHeight);\n\t\t\t_this._el.appendChild(_this._bg);\n\t\t\t_this.setColRow(_this._colRow[0], _this._colRow[1]);\n\n\t\t\t/**\n    * Events that occur when component loading is complete\n    * @ko 컴포넌트 로딩이 완료되면 발생하는 이벤트\n    * @name eg.view360.SpriteImage#load\n    * @event\n    * @param {Object} param The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n    * @param {HTMLElement} param.target The target element for which to display the image <ko>이미지를 보여줄 대상 엘리먼트</ko>\n    * @param {HTMLElement} param.bgElement Generated background image element <ko>생성된 background 이미지 엘리먼트</ko>\n    *\n    * @example\n    *\n    * sprites.on({\n    *\t\"load\" : function(evt) {\n    *\t\tconsole.log(\"load event fired - e.target\", e.target, \"e.bgElement\", e.bgElement);\n    *\t}\n    * });\n    */\n\t\t\t_this.trigger(\"load\", {\n\t\t\t\ttarget: _this._el,\n\t\t\t\tbgElement: _this._bg\n\t\t\t});\n\n\t\t\tif (_this._autoPlayReservedInfo) {\n\t\t\t\t_this.play(_this._autoPlayReservedInfo);\n\t\t\t\t_this._autoPlayReservedInfo = null;\n\t\t\t}\n\t\t};\n\n\t\t_this._image.onerror = function (e) {\n\t\t\t/**\n    * An event that occurs when the image index is changed by the user's left / right panning\n    * @ko 사용자의 좌우 Panning 에 의해 이미지 인덱스가 변경되었을때 발생하는 이벤트\n    * @name eg.view360.SpriteImage#imageError\n    * @event\n    * @param {Object} param The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n    * @param {String} param.imageUrl User-specified image URL <ko>사용자가 지정한 이미지 URL</ko>\n    *\n    * @example\n    *\n    * sprites.on({\n    *\t\"imageError\" : function(evt) {\n    *\t\t// Error handling\n    *\t\tconsole.log(e.imageUrl);\n    *\t}\n    * });\n    */\n\t\t\t_this.trigger(\"imageError\", {\n\t\t\t\timageUrl: opt.imageUrl\n\t\t\t});\n\t\t};\n\n\t\t_this._image.src = opt.imageUrl;\n\t\treturn _this;\n\t}\n\n\tSpriteImage._createBgDiv = function _createBgDiv(img, rowCount, colCount, autoHeight) {\n\t\tvar el = document.createElement(\"div\");\n\n\t\tel.style.backgroundImage = \"url(\" + img.src + \")\";\n\t\tel.style.backgroundSize = colCount * 100 + \"% \" + rowCount * 100 + \"%\";\n\n\t\tvar unitWidth = img.width / colCount;\n\t\tvar unitHeight = img.height / rowCount;\n\n\t\tif (autoHeight) {\n\t\t\tvar r = unitHeight / unitWidth;\n\n\t\t\tel.style.paddingBottom = r * 100 + \"%\";\n\t\t} else {\n\t\t\tel.style.height = \"100%\";\n\t\t}\n\n\t\treturn el;\n\t};\n\n\t/**\n  * Specifies the frameIndex of the frame to be shown in the sprite image.\n  * @ko 스프라이트 이미지 중 보여질 프레임의 frameIndex 값을 지정\n  * @method eg.view360.SpriteImage#setFrameIndex\n  * @param {Number} frameIndex frame index of a frame<ko>프레임의 인덱스</ko>\n  *\n  * @example\n  *\n  * sprites.setFrameIndex(0, 1);// col = 0, row = 1\n  */\n\n\n\tSpriteImage.prototype.setFrameIndex = function setFrameIndex(index) {\n\t\tvar colRow = this.toColRow(index);\n\n\t\tthis.setColRow(colRow[0], colRow[1]);\n\t};\n\n\t/**\n  * Returns the frameIndex of the frame to be shown in the sprite image.\n  * @ko 스프라이트 이미지 중 보여지는 프레임의 index 값을 반환\n  * @method eg.view360.SpriteImage#getFrameIndex\n  * @return {Number} frame index <ko>frame 인덱스</ko>\n  *\n  * @example\n  *\n  * var frameIndex = sprites.getFrameIndex(); // eg. frameIndex = 1\n  *\n  */\n\n\n\tSpriteImage.prototype.getFrameIndex = function getFrameIndex() {\n\t\treturn this._colRow[1] * this._colCount + this._colRow[0];\n\t};\n\n\t/**\n  * Specifies the col and row values of the frame to be shown in the sprite image.\n  * @ko 스프라이트 이미지 중 보여질 프레임의 col, row 값을 지정\n  * @method eg.view360.SpriteImage#setColRow\n  * @param {Number} col Column number of a frame<ko>프레임의 행값</ko>\n  * @param {Number} row Row number of a frame<ko>프레임의 열값</ko>\n  *\n  * @example\n  *\n  * sprites.setlColRow(1, 2); // col = 1, row = 2\n  */\n\n\n\tSpriteImage.prototype.setColRow = function setColRow(col, row) {\n\t\tif (row > this._rowCount - 1 || col > this._colCount - 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._bg) {\n\t\t\tthis._bg.style.backgroundPosition = -col * 100 + \"% \" + -row * 100 + \"%\";\n\t\t}\n\n\t\tthis._colRow = [col, row];\n\t};\n\n\t/**\n  * Returns the col and row values of the frame to be shown in the sprite image.\n  * @ko 스프라이트 이미지 중 보여지는 프레임의 col, row 값을환반환\n  * @method eg.view360.SpriteImage#gelColRow\n  * @return {Number[]} Array containing col, row<ko>col, row 정보를 담는 배열</ko>\n  *\n  * @example\n  *\n  * var colRow = sprites.getlColRow();\n  * // colRow = [1, 2] - index of col is 1, index of row is 2\n  *\n  */\n\n\n\tSpriteImage.prototype.getColRow = function getColRow() {\n\t\treturn this._colRow;\n\t};\n\n\tSpriteImage._getSizeString = function _getSizeString(size) {\n\t\tif (typeof size === \"number\") {\n\t\t\treturn size + \"px\";\n\t\t}\n\n\t\treturn size;\n\t};\n\n\t/**\n  * Stop playing\n  * @ko play 되고 있던 프레임 재생을 중지합니다.\n  * @method eg.view360.SpriteImage#stop\n  *\n  * @example\n  *\n  * viewer.stop();\n  *\n  */\n\n\n\tSpriteImage.prototype.stop = function stop() {\n\t\tif (this._autoPlayTimer) {\n\t\t\tclearInterval(this._autoPlayTimer);\n\t\t\tthis._autoPlayTimer = null;\n\t\t}\n\t};\n\n\t/**\n  * Switches frames sequentially in the 'interval' starting from the currently displayed frame and plays all frames by 'playCount'.\n  * @ko 현재 보여지고 있는 프레임을 시작으로 'interval' 간격으로 순차적으로 프레임을 전환하며 모든 프레임을 'playCount' 만큼 재생한다.\n  * @method eg.view360.SpriteImage#play\n  * @param {Object} param The parameter object<ko>파라미터 객체</ko>\n  * @param {Number} [param.interval=1000 / totalFrameCount] Interframe Interval - in milliseconds<ko>프레임간 간격 - 밀리세컨드 단위</ko>\n  * @param {Number} [param.playCount=0] PlayCount = 1 in which all frames are reproduced once, and playCount = n in which all frames are repeated n times. playCount = 0 in which all frames are repeated infinitely<ko>모든 프레임을 1회씩 재생한 것이 playCount = 1, 모든 프레임을 n 회 재상한 것이 playCount = n 이 된다. 0 dms 무한반복</ko>\n  *\n  * @example\n  *\n  * viewer.play({angle: 16, playCount: 1});\n  *\n  */\n\n\n\tSpriteImage.prototype.play = function play() {\n\t\tvar _this2 = this;\n\n\t\tvar _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { interval: 1000 / this._totalCount, playCount: 0 },\n\t\t    interval = _ref.interval,\n\t\t    playCount = _ref.playCount;\n\n\t\tif (!this._bg) {\n\t\t\tthis._autoPlayReservedInfo = { interval: interval, playCount: playCount };\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._autoPlayTimer) {\n\t\t\tclearInterval(this._autoPlayTimer);\n\t\t\tthis._autoPlayTimer = null;\n\t\t}\n\n\t\tvar frameIndex = this.getFrameIndex();\n\t\tvar count = 0;\n\t\tvar frameCount = 0; // for checking 1 cycle\n\n\t\tthis._autoPlayTimer = setInterval(function () {\n\t\t\tframeIndex %= _this2._totalCount;\n\t\t\tvar colRow = _this2.toColRow(frameIndex);\n\n\t\t\t_this2.setColRow(colRow[0], colRow[1]);\n\t\t\tframeIndex++;\n\n\t\t\t// Done 1 Cycle?\n\t\t\tif (++frameCount === _this2._totalCount) {\n\t\t\t\tframeCount = 0;\n\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tif (playCount > 0 && count === playCount) {\n\t\t\t\tclearInterval(_this2._autoPlayTimer);\n\t\t\t}\n\t\t}, interval);\n\t};\n\n\tSpriteImage.prototype.toColRow = function toColRow(frameIndex) {\n\t\tvar colCount = this._colCount;\n\t\tvar rowCount = this._rowCount;\n\n\t\tif (frameIndex < 0) {\n\t\t\treturn [0, 0];\n\t\t} else if (frameIndex >= this._totalCount) {\n\t\t\treturn [colCount - 1, rowCount - 1];\n\t\t}\n\n\t\tvar col = frameIndex % colCount;\n\t\tvar row = Math.floor(frameIndex / colCount);\n\n\t\t// console.log(frameIndex, col, row);\n\t\treturn [col, row];\n\t};\n\n\treturn SpriteImage;\n}(_component2[\"default\"]);\n\nexports[\"default\"] = SpriteImage;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/SpinViewer/SpriteImage.js\n// module id = 11\n// module chunks = 0 1 4 5","\"use strict\";\n\nexports.__esModule = true;\n\nvar _component = require(\"@egjs/component\");\n\nvar _component2 = _interopRequireDefault(_component);\n\nvar _axes = require(\"@egjs/axes\");\n\nvar _axes2 = _interopRequireDefault(_axes);\n\nvar _SpriteImage = require(\"./SpriteImage\");\n\nvar _SpriteImage2 = _interopRequireDefault(_SpriteImage);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar DEFAULT_PAN_SCALE = 0.21;\n\n/**\n * @class eg.view360.SpinViewer\n * @classdesc A module used to displays each image sequentially according to the direction of the user's touch movement (left / right) of the sprite image that is collected by rotating the object.\n * @ko 물체 주위를 회전하여 촬영한 이미지들을 모은 스프라이트 이미지를 사용자의 터치 이동 방향(좌 / 우) 에 따라 각 이미지들을 순차적으로 보여주는 컴포넌트입니다.\n * @extends eg.Component\n *\n * @param {HTMLElement} element The element to show the image <ko>이미지를 보여줄 대상 요소</ko>\n * @param {Object} options The option object<ko>파라미터 객체</ko>\n * @param {String} options.imageUrl The url of the sprite image <ko>스프라이트 이미지의 url</ko>\n * @param {Number} [options.rowCount=1] Number of horizontal frames in the sprite image <ko>스프라이트 이미지의 가로 프레임 갯수</ko>\n * @param {Number} [options.colCount=1] Number of vertical frames in the sprite image <ko>스프라이트 이미지의 세로 프레임 갯수</ko>\n * @param {Number|String} [options.width=\"auto\"] The width of the target element to show the image <ko>이미지를 보여줄 대상 요소의 너비</ko>\n * @param {Number|String} [options.height=\"auto\"] The height of the target element to show the image <ko>이미지를 보여줄 대상 요소의 높이</ko>\n * @param {Boolean} [options.autoHeight=true] Whether to automatically set the height of the image area to match the original image's proportion <ko>원본 이미지 비율에 맞게 이미지 영역의 높이를 자동으로 설정할지 여부</ko>\n * @param {Number[]} [options.colRow=[0, 0]] The column, row coordinates of the first frame of the sprite image (based on 0 index) <ko> 스프라이트 이미지 중 처음 보여줄 프레임의 (column, row) 좌표 (0 index 기반)</ko>\n * @param {Number} [options.scale=1] Spin scale (The larger the spin, the more).<ko>Spin 배율 (클 수록 더 많이 움직임)</ko>\n * @support {\"ie\": \"9+\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\", \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"2.3+ (except 3.x)\"}\n * @example\n *\n * // Initialize SpinViewer\n * var el = document.getElementById(\"product-360\");\n * var viewer = new eg.view360.SpinViewer(el, {\n * \timageUrl: \"/img/bag360.jpg\", // required\n * \trowCount: 24 //required\n * });\n */\n\nvar SpinViewer = function (_Component) {\n\t_inherits(SpinViewer, _Component);\n\n\tfunction SpinViewer(element, options) {\n\t\t_classCallCheck(this, SpinViewer);\n\n\t\tvar _this = _possibleConstructorReturn(this, _Component.call(this));\n\n\t\t_this._el = element;\n\n\t\tvar opt = options || {};\n\t\tvar colCount = opt.colCount || 1;\n\t\tvar rowCount = opt.rowCount || 1;\n\n\t\t_this._scale = (opt.scale || 1) * DEFAULT_PAN_SCALE;\n\n\t\t_this._frameCount = colCount * rowCount;\n\n\t\t// Init SpriteImage\n\t\t_this._sprites = new _SpriteImage2[\"default\"](element, opt).on({\n\t\t\t\"load\": function load(evt) {\n\t\t\t\t/**\n     * Events that occur when component loading is complete\n     * @ko 컴포넌트 로딩이 완료되면 발생하는 이벤트\n     * @name eg.view360.SpinViewer#load\n     * @event\n     * @param {Object} param The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n     * @param {HTMLElement} param.target The target element for which to display the image <ko>이미지를 보여줄 대상 엘리먼트</ko>\n     * @param {HTMLElement} param.bgElement Generated background image element <ko>생성된 background 이미지 엘리먼트</ko>\n     *\n     * @example\n     *\n     * viwer.on({\n     *\t\"load\" : function(evt) {\n     *\t\tthis.spinBy({angle: 360, duration: 300});\n     *\t}\n     * });\n     */\n\t\t\t\t_this.trigger(\"load\", evt);\n\t\t\t},\n\t\t\t\"imageError\": function imageError(evt) {\n\t\t\t\t/**\n     * An event that occurs when the image index is changed by the user's left / right panning\n     * @ko 사용자의 좌우 Panning 에 의해 이미지 인덱스가 변경되었을때 발생하는 이벤트\n     * @name eg.view360.SpinViewer#imageError\n     * @event\n     * @param {Object} param The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n     * @param {String} param.imageUrl User-specified image URL <ko>사용자가 지정한 이미지 URL</ko>\n     *\n     * @example\n     *\n     * viewer.on({\n     *\t\"imageError\" : function(evt) {\n     *\t\t// Error handling\n     *\t\tconsole.log(e.imageUrl);\n     *\t}\n     * });\n     */\n\t\t\t\t_this.trigger(\"imageError\", {\n\t\t\t\t\timageUrl: evt.imageUrl\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\t// Init Axes\n\t\t_this._panInput = new _axes.PanInput(_this._el, {\n\t\t\tscale: [_this._scale, _this._scale]\n\t\t});\n\t\t_this._axes = new _axes2[\"default\"]({\n\t\t\tangle: {\n\t\t\t\trange: [0, 359],\n\t\t\t\tcircular: true\n\t\t\t}\n\t\t}).on({\n\t\t\t\"change\": function change(evt) {\n\t\t\t\tvar curr = Math.floor(evt.pos.angle / (360 / _this._frameCount));\n\t\t\t\tvar frameIndex = _this._frameCount - curr - 1;\n\n\t\t\t\t_this._sprites.setFrameIndex(frameIndex);\n\n\t\t\t\t/**\n     * An event that occurs when the image index is changed by the user's left / right panning\n     * @ko 사용자의 좌우 Panning 에 의해 이미지 인덱스가 변경되었을때 발생하는 이벤트\n     * @name eg.view360.SpinViewer#change\n     * @event\n     * @param {Object} param The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n     * @param {Number[]} param.colRow Column, row of the frame in the sprite image <ko>스프라이트 이미지 내 프레임의 column, row</ko>\n     * @param {Number} param.frameIndex Index value that is sequentially appended in Z direction based on col and row.<ko>col, row 를 기반으로 Z 방향으로 순차적으로 붙여지는 index 값</ko>\n     * @param {Number} param.angle The angle that is currently internally held at an angle between 0 and 359. (not a real product angle) <ko>0 ~ 359 범위의 각도로 현재 내부적으로 유지하고 있는 각도 (실제 이미지의 각도가 아님)</ko>\n     *\n     * @example\n     *\n     * viwer.on({\n     *\t\"change\" : function(evt) {\n     *\t\tconsole.log(event.frameIndex, event.colRow, event.angle);   // event.colRow = [0, 4] event.frameIndex = 4, event = 30\n     *\t}\n     * });\n     */\n\t\t\t\t_this.trigger(\"change\", {\n\t\t\t\t\tframeIndex: frameIndex,\n\t\t\t\t\tcolRow: _this._sprites.getColRow(),\n\t\t\t\t\tangle: evt.pos.angle\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\t_this._axes.connect(\"angle\", _this._panInput);\n\t\treturn _this;\n\t}\n\n\t/**\n  * Set spin scale\n  * @ko scale 을 조정할 수 있는 함수\n  * @method eg.view360.SpinViewer#setScale\n  * @param {Number} scale Rotation multiples at spin, the larger the rotation<ko>Spin 시 회전 배수값, 커질 수록 더 많이 회전</ko>\n  *\n  * @return {Object} Instance of SpinViewer <ko>SpinViewer 인스턴스</ko>\n  *\n  * @example\n  *\n  * viewer.setScale(2);// It moves twice as much.\n  */\n\n\n\tSpinViewer.prototype.setScale = function setScale(scale) {\n\t\tif (isNaN(scale) || scale < 0) {\n\t\t\treturn this;\n\t\t}\n\n\t\tthis._scale = scale * DEFAULT_PAN_SCALE;\n\t\tthis._panInput.options.scale = [this._scale, this._scale];\n\n\t\treturn this;\n\t};\n\n\t/**\n  * It gives the effect of rotating at a specified angle for a certain period of time(duration).\n  * @ko 지정된 각도(angle)로 일정 시간동안(duration) 회전하는 효과를 준다.\n  * @method eg.view360.SpinViewer#spinBy\n  * @param {Object} param The parameter object<ko>파라미터 객체</ko>\n  * @param {Number} [param.angle=0] angle<ko>회전 각도</ko>\n  * @param {Number} [param.duration=400] duration<ko>회전할 시간 - 밀리세컨드 단위</ko>\n  *\n  * @return {Object} Instance of SpinViewer <ko>SpinViewer 인스턴스</ko>\n  *\n  * @example\n  *\n  * viewer.spinBy({angle: 720, duration: 500});\n  */\n\n\n\tSpinViewer.prototype.spinBy = function spinBy(_ref) {\n\t\tvar _ref$angle = _ref.angle,\n\t\t    angle = _ref$angle === undefined ? 0 : _ref$angle,\n\t\t    _ref$duration = _ref.duration,\n\t\t    duration = _ref$duration === undefined ? 400 : _ref$duration;\n\n\t\tthis._axes.setBy({ angle: angle }, duration);\n\n\t\treturn this;\n\t};\n\n\treturn SpinViewer;\n}(_component2[\"default\"]);\n\nexports[\"default\"] = SpinViewer;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/SpinViewer/SpinViewer.js\n// module id = 20\n// module chunks = 0 1 4 5","\"use strict\";\n\nexports.__esModule = true;\nexports.SpriteImage = exports.SpinViewer = undefined;\n\nvar _SpinViewer = require(\"./SpinViewer\");\n\nvar _SpinViewer2 = _interopRequireDefault(_SpinViewer);\n\nvar _SpriteImage = require(\"./SpriteImage\");\n\nvar _SpriteImage2 = _interopRequireDefault(_SpriteImage);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nexports.SpinViewer = _SpinViewer2[\"default\"];\nexports.SpriteImage = _SpriteImage2[\"default\"];\n\n\n_SpinViewer2[\"default\"].VERSION = \"3.0.0-rc\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/SpinViewer/index.js\n// module id = 21\n// module chunks = 0 1 4 5","module.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"commonjs\":\"@egjs/axes\",\"commonjs2\":\"@egjs/axes\",\"amd\":\"@egjs/axes\",\"root\":[\"eg\",\"Axes\"]}\n// module id = 7\n// module chunks = 0 1 2 3 4 5"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChnBA;;;;;A","sourceRoot":""}