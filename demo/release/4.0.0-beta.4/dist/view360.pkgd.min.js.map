{"version":3,"file":"view360.pkgd.min.js","sources":["../src/core/View360Error.ts","../src/const/error.ts","../src/const/browser.ts","../src/const/external.ts","../src/const/internal.ts","../src/utils.ts","../src/core/Motion.ts","../src/core/CameraAnimation.ts","../src/core/Camera.ts","../src/control/input/MouseInput.ts","../src/control/input/TouchInput.ts","../src/control/input/KeyboardInput.ts","../src/control/RotateControl.ts","../src/control/input/WheelInput.ts","../src/control/input/PinchInput.ts","../src/control/ZoomControl.ts","../src/control/input/GyroInput.ts","../src/control/GyroControl.ts","../src/control/PanoControl.ts","../src/texture/Texture.ts","../src/texture/Texture2D.ts","../src/texture/TextureVideo.ts","../src/texture/TextureCube.ts","../src/core/TextureLoader.ts","../src/core/FrameAnimator.ts","../src/core/AutoResizer.ts","../src/core/Autoplay.ts","../src/core/XRManager.ts","../src/hotspot/Hotspot.ts","../src/hotspot/HotspotRenderer.ts","../src/core/VertexArrayObject.ts","../src/core/WebGLContext.ts","../src/core/WebGLRenderer.ts","../src/View360.ts","../src/core/Object3D.ts","../src/plugin/LoadingSpinner/LoadingSpinner.ts","../src/plugin/ControlBar/ControlBarItem.ts","../src/plugin/ControlBar/const.ts","../src/plugin/ControlBar/RangeControl.ts","../src/plugin/ControlBar/ProgressBar.ts","../src/plugin/ControlBar/PlayButton.ts","../src/plugin/ControlBar/VolumeControl.ts","../src/plugin/ControlBar/FullscreenButton.ts","../src/plugin/ControlBar/VideoTime.ts","../src/plugin/ControlBar/PieView.ts","../src/plugin/ControlBar/VRButton.ts","../src/plugin/ControlBar/GyroButton.ts","../src/plugin/ControlBar/AutoHide.ts","../src/plugin/ControlBar/VideoControl.ts","../src/plugin/ControlBar/ControlBar.ts","../src/projection/Projection.ts","../src/uniform/Uniform.ts","../src/uniform/UniformTextureCube.ts","../src/core/CubeTexturePainter.ts","../src/uniform/UniformCanvasCube.ts","../src/core/TriangleMesh.ts","../src/core/ShaderProgram.ts","../src/core/VertexData.ts","../src/geometry/Geometry.ts","../src/geometry/CubeGeometry.ts","../src/uniform/UniformTexture2D.ts","../src/geometry/CylinderGeometry.ts","../src/geometry/SphereGeometry.ts","../src/uniform/UniformFloat.ts","../src/geometry/PlaneGeometry.ts","../src/uniform/UniformVector4Array.ts","../src/projection/StereoEquiProjection.ts","../src/projection/CubemapProjection.ts","../src/projection/CubestripProjection.ts","../src/projection/CylindricalProjection.ts","../src/projection/EquiangularProjection.ts","../src/projection/EquirectProjection.ts","../src/projection/LittlePlanetProjection.ts","../src/cfc/utils.ts","../src/cfc/const.ts","../src/cfc/withMethods.ts","../src/index.umd.ts"],"sourcesContent":["/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\n/**\n * Error thrown by {@link View360}\n * @ko {@link View360}이 발생시킨 에러\n * @since 4.0.0\n */\nclass View360Error extends Error {\n  /**\n   * Error code\n   * @ko 에러 코드\n   * @see ERROR_CODES\n   */\n  public code: number;\n\n  /**\n   * Create new instance of View360Error\n   * @ko View360Error의 인스턴스를 생성합니다.\n   * @param message - Error message {@ko 에러 메시지}\n   * @param code - Error code {@ko 에러 코드}\n   */\n  public constructor(message: string, code: number) {\n    super(message);\n\n    Object.setPrototypeOf(this, View360Error.prototype);\n\n    this.name = \"View360Error\";\n    this.code = code;\n  }\n}\n\nexport default View360Error;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\n/**\n * Error codes of {@link View360Error}\n * @ko {@link View360Error}가 가질 수 있는 에러 코드 값들\n * @since 4.0.0\n */\nexport const ERROR_CODES = {\n  /**\n   * The given value's type is not expected\n   * @ko 주어진 값의 타입이 잘못되었을 경우\n   * @since 4.0.0\n   */\n  WRONG_TYPE: 0,\n  /**\n   * The given value is not a supported option\n   * @ko 잘못된 옵션을 받았을 경우\n   * @since 4.0.0\n   */\n  WRONG_OPTION: 1,\n  /**\n   * The element with given CSS selector does not exist\n   * @ko 주어진 CSS 셀렉터로 엘리먼트를 찾지 못했을 경우\n   * @since 4.0.0\n   */\n  ELEMENT_NOT_FOUND: 2,\n  /**\n   * Couldn't find canvas element inside the given container element.\n   * @ko 컨테이너 엘리먼트 내부에서 캔버스 엘리먼트를 찾지 못했을 경우\n   * @since 4.0.0\n   */\n  CANVAS_NOT_FOUND: 3,\n  /**\n   * The browser does not support WebGL\n   * @ko 브라우저가 WebGL을 지원하지 않는 경우\n   * @since 4.0.0\n   */\n  WEBGL_NOT_SUPPORTED: 4,\n  /**\n   * Failed creating canvas 2D context\n   * @ko 캔버스 2D 컨텍스트를 생성하지 못한 경우\n   * @since 4.0.0\n   */\n  FAILED_CREATE_CONTEXT_2D: 5,\n  /**\n   * `init()` is called before setting {@link View360Options#projection}\n   * @ko {@link View360Options#projection}을 설정하기 전에 `init()`이 호출된 경우\n   * @since 4.0.0\n   */\n  PROVIDE_PROJECTION_FIRST: 6,\n  /**\n   * Failed linking WebGL program. Only can be thrown when {@link View360Options#debug} is `true`.\n   * @ko WebGL 프로그램 링크에 실패한 경우. {@link View360Options#debug}를 `true`로 설정한 경우에만 발생할 수 있습니다.\n   * @since 4.0.0\n   */\n  FAILED_LINKING_PROGRAM: 7,\n  /**\n   * Arguments are not sufficient for the given property.\n   * @ko 프로퍼티에 값이 충분히 주어지지 않았을 때\n   * @since 4.0.0\n   */\n  INSUFFICIENT_ARGS: 8\n} as const;\n\nexport const MESSAGES = {\n  WRONG_TYPE: (val: any, types: string[]) => `${typeof val} is not a ${types.map(type => `\"${type}\"`).join(\" or \")}.`,\n  WRONG_OPTION: (val: any, optionName: string) => `Bad option: given \"${val}\" for option \"${optionName}\".`,\n  ELEMENT_NOT_FOUND: (query: string) => `Element with selector \"${query}\" not found.`,\n  CANVAS_NOT_FOUND: \"The canvas element was not found inside the given root element.\",\n  WEBGL_NOT_SUPPORTED: \"WebGL is not supported on this browser.\",\n  FAILED_CREATE_CONTEXT_2D: \"Failed to create canvas 2D context\",\n  PROVIDE_PROJECTION_FIRST: \"\\\"projection\\\" should be provided before initialization.\",\n  FAILED_LINKING_PROGRAM: (msg: string | null, shaderLog: string | null) => `Failed linking WebGL program - \"${msg}\\nShader compile Log: ${shaderLog}`,\n  INSUFFICIENT_ARGS: (val: any, name: string) => `Insufficient arguments: given \"${val}\" for \"${name}\".`\n};\n\nexport default {\n  CODES: ERROR_CODES,\n  MESSAGES\n};\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nexport const EVENTS = {\n  MOUSE_DOWN: \"mousedown\",\n  MOUSE_MOVE: \"mousemove\",\n  MOUSE_UP: \"mouseup\",\n  TOUCH_START: \"touchstart\",\n  TOUCH_MOVE: \"touchmove\",\n  TOUCH_END: \"touchend\",\n  WHEEL: \"wheel\",\n  RESIZE: \"resize\",\n  CONTEXT_MENU: \"contextmenu\",\n  MOUSE_ENTER: \"mouseenter\",\n  MOUSE_LEAVE: \"mouseleave\",\n  POINTER_DOWN: \"pointerdown\",\n  POINTER_MOVE: \"pointermove\",\n  POINTER_UP: \"pointerup\",\n  POINTER_CANCEL: \"pointercancel\",\n  POINTER_ENTER: \"pointerenter\",\n  POINTER_LEAVE: \"pointerleave\",\n  KEY_DOWN: \"keydown\",\n  KEY_UP: \"keyup\",\n  LOAD: \"load\",\n  ERROR: \"error\",\n  CLICK: \"click\",\n  DOUBLE_CLICK: \"dblclick\",\n  CONTEXT_CREATE_ERROR: \"webglcontextcreationerror\",\n  CONTEXT_LOST: \"webglcontextlost\",\n  CONTEXT_RESTORED: \"webglcontextrestored\",\n  DEVICE_ORIENTATION: \"deviceorientation\",\n  DEVICE_MOTION: \"devicemotion\",\n  ORIENTATION_CHANGE: \"orientationchange\",\n  VIDEO_PLAY: \"play\",\n  VIDEO_PAUSE: \"pause\",\n  VIDEO_LOADED_DATA: \"loadeddata\",\n  VIDEO_VOLUME_CHANGE: \"volumechange\",\n  VIDEO_TIME_UPDATE: \"timeupdate\",\n  VIDEO_DURATION_CHANGE: \"durationchange\",\n  VIDEO_CAN_PLAYTHROUGH: \"canplaythrough\",\n  TRANSITION_END: \"transitionend\",\n  XR_END: \"end\"\n} as const;\n\nexport const EL_DIV = \"div\";\nexport const EL_BUTTON = \"button\";\n\n// https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent.button\nexport enum MOUSE_BUTTON {\n  LEFT,\n  MIDDLE,\n  RIGHT\n}\n\nexport const CURSOR = {\n  GRAB: \"grab\",\n  GRABBING: \"grabbing\",\n  NONE: \"\"\n} as const;\n\nexport const KEY_DIRECTION = [\"LEFT\", \"UP\", \"RIGHT\", \"DOWN\"] as const;\nexport enum DIRECTION_KEY_CODE {\n  LEFT = 37,\n  UP = 38,\n  RIGHT = 39,\n  DOWN = 40\n}\nexport const SPACE_KEY_CODE = 32;\n\nexport const DIRECTION_KEY_NAME = {\n  LEFT: \"ArrowLeft\",\n  UP: \"ArrowUp\",\n  RIGHT: \"ArrowRight\",\n  DOWN: \"ArrowDown\"\n} as const;\nexport const SPACE_KEY_NAME = \" \";\n\nexport const FULLSCREEN_REQUEST = [\n  \"requestFullscreen\",\n  \"webkitRequestFullscreen\",\n  \"webkitRequestFullScreen\",\n  \"webkitCancelFullScreen\",\n  \"mozRequestFullScreen\",\n  \"msRequestFullscreen\"\n];\n\nexport const FULLSCREEN_ELEMENT = [\n  \"fullscreenElement\",\n  \"webkitFullscreenElement\",\n  \"webkitCurrentFullScreenElement\",\n  \"mozFullScreenElement\",\n  \"msFullscreenElement\"\n];\n\nexport const FULLSCREEN_EXIT = [\n  \"exitFullscreen\",\n  \"webkitExitFullscreen\",\n  \"webkitCancelFullScreen\",\n  \"mozCancelFullScreen\",\n  \"msExitFullscreen\"\n];\n\nexport const FULLSCREEN_CHANGE = [\n  \"fullscreenchange\",\n  \"webkitfullscreenchange\",\n  \"mozfullscreenchange\",\n  \"MSFullscreenChange\"\n];\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nexport { ERROR_CODES } from \"./error\";\n\n/**\n * Default class names\n * @ko 기본 클래스 이름들\n * @since 4.0.0\n */\nexport const DEFAULT_CLASS = {\n  CONTAINER: \"view360-container\",\n  CANVAS: \"view360-canvas\",\n  CTX_LOST: \"view360-ctx-lost\",\n  IN_VR: \"view360-vr-presenting\",\n  HOTSPOT_CONTAINER: \"view360-hotspots\",\n  HOTSPOT: \"view360-hotspot\",\n  HOTSPOT_VISIBLE: \"view360-hotspot-visible\",\n  HOTSPOT_FLIP_X: \"view360-hotspot-flip-x\",\n  HOTSPOT_FLIP_Y: \"view360-hotspot-flip-y\",\n} as const;\n\n/**\n * Event names\n * @ko 이벤트 이름들\n * @since 4.0.0\n * @example\n * ```ts\n * import View360, { EVENTS } from \"@egjs/view360\";\n *\n * const viewer = new View360(\"#el_id\");\n *\n * viewer.on(EVENTS.READY, evt => {\n *   console.log(\"View360 is ready!\");\n * });\n * ```\n */\nexport const EVENTS = {\n  READY: \"ready\",\n  LOAD_START: \"loadStart\",\n  LOAD: \"load\",\n  PROJECTION_CHANGE: \"projectionChange\",\n  RESIZE: \"resize\",\n  BEFORE_RENDER: \"beforeRender\",\n  RENDER: \"render\",\n  INPUT_START: \"inputStart\",\n  INPUT_END: \"inputEnd\",\n  VIEW_CHANGE: \"viewChange\",\n  STATIC_CLICK: \"staticClick\",\n  VR_START: \"vrStart\",\n  VR_END: \"vrEnd\"\n} as const;\n\n/**\n * Collection of predefined easing functions\n * @ko 미리 정의된 easing 함수들\n */\nexport const EASING = {\n  LINEAR: (x: number) => x,\n  SINE_WAVE: (x: number) => Math.sin(x * Math.PI * 2),\n  EASE_OUT_CUBIC: (x: number) => 1 - Math.pow(1 - x, 3),\n  EASE_OUT_BOUNCE: (x: number): number => {\n    const n1 = 7.5625;\n    const d1 = 2.75;\n\n    if (x < 1 / d1) {\n      return n1 * x * x;\n    } else if (x < 2 / d1) {\n      return n1 * (x -= 1.5 / d1) * x + 0.75;\n    } else if (x < 2.5 / d1) {\n      return n1 * (x -= 2.25 / d1) * x + 0.9375;\n    } else {\n      return n1 * (x -= 2.625 / d1) * x + 0.984375;\n    }\n  }\n} as const;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { EASING } from \"./external\";\nimport { Range } from \"../type/utils\";\n\nexport const CAMERA_EVENTS = {\n  CHANGE: \"change\",\n  ANIMATION_END: \"animationEnd\"\n} as const;\n\nexport const CONTROL_EVENTS = {\n  INPUT_START: \"inputStart\",\n  CHANGE: \"change\",\n  INPUT_END: \"inputEnd\",\n  ENABLE: \"enable\",\n  DISABLE: \"disable\",\n  STATIC_CLICK: \"staticClick\"\n} as const;\n\nexport const DEG_TO_RAD = Math.PI / 180;\nexport const RAD_TO_DEG = 180 / Math.PI;\nexport const DEFAULT_EASING = EASING.EASE_OUT_CUBIC;\nexport const DEFAULT_ANIMATION_DURATION = 300;\nexport const INFINITE_RANGE: Readonly<Range> = {\n  min: -Infinity, max: Infinity\n} as const;\nexport const DEFAULT_PITCH_RANGE: Readonly<Range> = {\n  min: -90, max: 90\n} as const;\nexport const DEFAULT_ZOOM_RANGE: Readonly<Range> = {\n  min: 0.6, max: 10\n} as const;\n\nexport enum ROTATE {\n  ZERO,\n  CW_90,\n  CCW_90,\n  CW_180\n}\n\n// Custom event name for video time change\nexport const VIDEO_TIME_CHANGE_EVENT = \"view360videotimechange\";\nexport const SVG_NAMESPACE = \"http://www.w3.org/2000/svg\";\nexport const SESSION_VR = \"immersive-vr\";\nexport const XR_REFERENCE_SPACE = \"local\";\n\nexport const EPSILON = Number.EPSILON ?? 2.220446049250313e-16;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { quat, vec3 } from \"gl-matrix\";\nimport View360Error from \"./core/View360Error\";\nimport ERROR from \"./const/error\";\nimport * as BROWSER from \"./const/browser\";\nimport { DEG_TO_RAD, RAD_TO_DEG } from \"./const/internal\";\nimport { NoBoolean } from \"./type/utils\";\n\nexport const isString = (val: any): val is string => typeof val === \"string\";\nexport const isElement = (val: any): val is Element => !!val && val.nodeType === Node.ELEMENT_NODE;\n\nexport const createElement = (className: string, tag = BROWSER.EL_DIV) => {\n  const el = document.createElement(tag);\n\n  el.classList.add(className);\n\n  return el;\n};\n\nexport const getNullableElement = (el: HTMLElement | string | null, parent?: HTMLElement): HTMLElement | null => {\n  let targetEl: HTMLElement | null = null;\n\n  if (isString(el)) {\n    const parentEl = parent ? parent : document;\n    const queryResult = parentEl.querySelector(el);\n\n    if (!queryResult) {\n      return null;\n    }\n\n    targetEl = queryResult as HTMLElement;\n  } else if (isElement(el)) {\n    targetEl = el;\n  }\n\n  return targetEl;\n};\n\nexport const getElement = (el: HTMLElement | string, parent?: HTMLElement): HTMLElement => {\n  const targetEl = getNullableElement(el, parent);\n\n  if (!targetEl) {\n    if (isString(el)) {\n      throw new View360Error(ERROR.MESSAGES.ELEMENT_NOT_FOUND(el), ERROR.CODES.ELEMENT_NOT_FOUND);\n    } else {\n      throw new View360Error(ERROR.MESSAGES.WRONG_TYPE(el, [\"HTMLElement\", \"string\"]), ERROR.CODES.WRONG_TYPE);\n    }\n  }\n\n  return targetEl;\n};\n\nexport const findCanvas = (root: HTMLElement, selector: string): HTMLCanvasElement => {\n  const canvas = root.querySelector(selector) as HTMLCanvasElement;\n\n  if (!canvas) {\n    throw new View360Error(ERROR.MESSAGES.CANVAS_NOT_FOUND, ERROR.CODES.CANVAS_NOT_FOUND);\n  }\n\n  return canvas;\n};\n\nexport const range = (end: number): number[] => {\n  if (!end || end <= 0) {\n    return [];\n  }\n\n  return Array.apply(0, Array(end)).map((undef, idx) => idx);\n};\n\nexport const clamp = (x: number, min: number, max: number) => Math.max(Math.min(x, max), min);\n\n// Linear interpolation between a and b\nexport const lerp = (a: number, b: number, t: number) => {\n  return a * (1 - t) + b * t;\n};\n\nexport const circulate = (val: number, min: number, max: number) => {\n  const size = Math.abs(max - min);\n\n  if (val < min) {\n    const offset = (min - val) % size;\n    val = max - offset;\n  } else if (val > max) {\n    const offset = (val - max) % size;\n    val = min + offset;\n  }\n\n  return val;\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const merge = (target: object, ...srcs: object[]): object => {\n  srcs.forEach(source => {\n    Object.keys(source).forEach(key => {\n      const value = source[key];\n      if (Array.isArray(target[key]) && Array.isArray(value)) {\n        target[key] = [...target[key], ...value];\n      } else {\n        target[key] = value;\n      }\n    });\n  });\n\n  return target;\n};\n\nexport const findIndex = <T>(array: T[], checker: (val: T) => boolean): number => {\n  for (let idx = 0; idx < array.length; idx++) {\n    if (checker(array[idx])) {\n      return idx;\n    }\n  }\n\n  return -1;\n};\n\nexport const getObjectOption = <T extends boolean | Partial<object>>(val?: T): NoBoolean<T> => typeof val === \"object\" ? val : {} as any;\nexport const toVerticalFov = (fovRadian: number, aspect: number) => {\n  return Math.atan(Math.tan(fovRadian * 0.5) / aspect) * 2;\n};\n\nexport const reorderCube = <T>(arr: T[], order: string, defaultOrder = \"RLUDFB\"): T[] => {\n  return defaultOrder.split(\"\")\n    .map(face => order.indexOf(face))\n    .map(index => arr[index]);\n};\n\nexport const isFullscreen = () => {\n  if (!document) return false;\n\n  for (const key of BROWSER.FULLSCREEN_ELEMENT) {\n    if (document[key]) return true;\n  }\n\n  return false;\n};\n\nexport const sensorCanBeEnabledIOS = () => {\n  return !!DeviceMotionEvent && \"requestPermission\" in DeviceMotionEvent && window.isSecureContext;\n};\n\nexport const hfovToZoom = (baseFov: number, fov: number) => {\n  const renderingWidth = Math.tan(DEG_TO_RAD * baseFov * 0.5);\n  const zoomedWidth = Math.tan(DEG_TO_RAD * fov * 0.5);\n\n  return renderingWidth / zoomedWidth;\n};\n\nexport const eulerToQuat = (out: quat, yaw: number, pitch: number, roll: number): quat => {\n  quat.identity(out);\n\n  const pitchThreshold = 0.01;\n  const pitchClamped = clamp(pitch, -90 + pitchThreshold, 90 - pitchThreshold);\n\n  quat.rotateY(out, out, yaw * DEG_TO_RAD);\n  quat.rotateX(out, out, pitchClamped * DEG_TO_RAD);\n  quat.rotateZ(out, out, roll * DEG_TO_RAD);\n\n  return out;\n};\n\n/**\n * Extract euler angles from the quaternion, except roll(z-axis rotation)\n * @hidden\n */\nexport const quatToEuler = (quaternion: quat) => {\n  const x = quaternion[0];\n  const y = quaternion[1];\n  const z = quaternion[2];\n  const w = quaternion[3];\n  const x2 = x * x;\n  const y2 = y * y;\n  const z2 = z * z;\n  const w2 = w * w;\n\n  const unit = x2 + y2 + z2 + w2;\n  const test = x * w - y * z;\n\n  let pitch: number, yaw: number;\n\n  if (test > 0.499995 * unit) {\n    // singularity at the north pole\n    pitch = Math.PI / 2;\n    yaw = 2 * Math.atan2(y, x);\n  } else if (test < -0.499995 * unit) {\n    // singularity at the south pole\n    pitch = -Math.PI / 2;\n    yaw = -2 * Math.atan2(y, x);\n  } else {\n    const view = vec3.fromValues(0, 0, 1);\n    const up = vec3.fromValues(0, 1, 0);\n\n    vec3.transformQuat(view, view, quaternion);\n    vec3.transformQuat(up, up, quaternion);\n\n    const viewXZ = Math.sqrt(view[0] * view[0] + view[2] * view[2]);\n\n    pitch = Math.atan2(-view[1], viewXZ);\n    yaw = Math.atan2(view[0], view[2]);\n  }\n\n  return {\n    pitch: clamp(pitch * RAD_TO_DEG, -90, 90),\n    yaw: circulate(yaw * RAD_TO_DEG, 0, 360)\n  };\n};\n","/*\n * Copyright (c) 2020 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport { clamp, lerp, circulate } from \"../utils\";\nimport { Range } from \"../type/utils\";\nimport { DEFAULT_ANIMATION_DURATION, DEFAULT_EASING } from \"../const/internal\";\n\n/**\n * Interpolator between two values with duration\n * @ko 특정 시간동안 두 값을 보간해주는 보간기\n * @since 4.0.0\n */\nclass Motion {\n  // Options\n  private _duration: number;\n  private _loop: boolean;\n  private _range: Range;\n  private _easing: (x: number) => number;\n\n  // Internal states\n  private _progress: number;\n  private _val: number;\n  private _start: number;\n  private _end: number;\n  private _activated: boolean;\n\n  /**\n   * Current interpolated value\n   * @ko 현재 보간된 값\n   * @since 4.0.0\n   */\n  public get val() { return this._val; }\n  /**\n   * Start(from) value of interpolation\n   * @ko 보간 시작 값\n   * @since 4.0.0\n   */\n  public get start() { return this._start; }\n  /**\n   * End(to) value of interpolation\n   * @ko 보간 끝 값\n   * @since 4.0.0\n   */\n  public get end() { return this._end; }\n  /**\n   * Interpolation progress value (0 ~ 1)\n   * @ko 현재 보간 진행정도 (0 ~ 1)\n   * @since 4.0.0\n   */\n  public get progress() { return this._progress; }\n  /**\n   * Whether the interpolation is in active state.\n   * @ko 보간 진행중인지 여부. `true`일 경우 보간이 진행중입니다.\n   * @since 4.0.0\n   */\n  public get activated() { return this._activated; }\n\n  /**\n   * Duration of the interpolation\n   * @ko 보간할 시간\n   * @since 4.0.0\n   */\n  public get duration() { return this._duration; }\n  public set duration(val: number) { this._duration = val; }\n\n  /**\n   * Whether to loop interpolation on finish\n   * @ko 보간이 끝난 이후에 다시 시작할지 여부\n   * @since 4.0.0\n   */\n  public get loop() { return this._loop; }\n  public set loop(val: boolean) { this._loop = val; }\n\n  /**\n   * Range of the interpolation\n   * @ko 보간 범위\n   * @since 4.0.0\n   */\n  public get range() { return this._range; }\n\n  /**\n   * Easing function of the interpolation\n   * @ko 보간에 사용되는 easing function\n   * @since 4.0.0\n   */\n  public get easing() { return this._easing; }\n  public set easing(val: (x: number) => number) { this._easing = val; }\n\n  /**\n   * Create new instance.\n   * @ko 새로운 인스턴스를 생성합니다.\n   * @param options Options {@ko 옵션들}\n   * @param options.duration Duration of the interpolation {@ko 보간할 시간}\n   * @param options.loop Whether to loop interpolation on finish {@ko 보간이 끝난 이후에 다시 시작할지 여부}\n   * @param options.range Range of the interpolation {@ko 보간 범위}\n   * @param options.loop Easing function of the interpolation {@ko 보간에 사용되는 easing function}\n   */\n  public constructor({\n    duration = DEFAULT_ANIMATION_DURATION,\n    loop = false,\n    range = { min: 0, max: 1 },\n    easing = DEFAULT_EASING\n  } = {}) {\n    this._duration = duration;\n    this._loop = loop;\n    this._range = range;\n    this._easing = easing;\n    this._activated = false;\n    this.reset(0);\n  }\n\n  /**\n   * Update motion and progress it by given deltaTime\n   * @ko 주어진 deltaTime만큼 보간을 진행합니다.\n   * @param deltaTime - number of milisec to update motion {@ko 보간을 진행할 시간, 밀리초 단위}\n   * @returns Difference(delta) of the value from the last update. {@ko 지난 업데이트 이후의 값 변화량}\n   * @since 4.0.0\n   */\n  public update(deltaTime: number): number {\n    if (!this._activated) {\n      this._val = this._end;\n      return 0;\n    }\n\n    const start = this._start;\n    const end = this._end;\n    const duration = this._duration;\n    const prev = this._val;\n    const loop = this._loop;\n\n    const nextProgress = this._progress + deltaTime / duration;\n\n    this._progress = loop\n      ? circulate(nextProgress, 0, 1)\n      : clamp(nextProgress, 0, 1);\n\n    const easedProgress = this._easing(this._progress);\n    this._val = lerp(start, end, easedProgress);\n\n    if (!loop && this._progress >= 1) {\n      this._activated = false;\n    }\n\n    return this._val - prev;\n  }\n\n  /**\n   * Set `start`, `end` to the given value and set `progress` to 0.\n   * @ko 주어진 값으로 시작 지점, 끝 지점을 초기화하고 progress를 0으로 세팅합니다.\n   * @param defaultVal - Value to reset {@ko 초기화할 값}\n   * @since 4.0.0\n   */\n  public reset(defaultVal: number): void {\n    const range = this._range;\n    const val = clamp(defaultVal, range.min, range.max);\n    this._start = val;\n    this._end = val;\n    this._val = val;\n    this._progress = 0;\n    this._activated = false;\n  }\n\n  /**\n   * Add delta to start & end and current value.\n   * @ko 현재 & 끝 및 현재 값에 주어진 값을 더합니다.\n   * @param delta - Delta value to add {@ko 추가할 값}\n   */\n  public add(delta: number) {\n    const range = this._range;\n\n    this._start = clamp(this._start + delta, range.min, range.max);\n    this._end = clamp(this._end + delta, range.min, range.max);\n    this._val = clamp(this._val + delta, range.min, range.max);\n  }\n\n  /**\n   * Set current value to start, and end to current value + delta, then reset progress to 0.\n   * @ko 현재 값을 시작 지점으로, 그에서 delta만큼 추가된 값을 끝점으로 하고 progress를 0으로 갱신합니다.\n   * @param delta - Delta value to add {@ko 추가할 값}\n   */\n  public setNewEndByDelta(delta: number): void {\n    const range = this._range;\n\n    this._start = this._val;\n    this._end = clamp(this._end + delta, range.min, range.max);\n    this._progress = 0;\n    this._activated = true;\n  }\n\n  /**\n   * Set new range of the interpolation.\n   * @ko 보간의 범위를 변경합니다.\n   * @param min - New minimum range {@ko 변경할 범위의 최소값}\n   * @param max - New maximum range {@ko 변경할 범위의 최대값}\n   */\n  public setRange(min: number, max: number) {\n    this._start = clamp(this._start, min, max);\n    this._end = clamp(this._end, min, max);\n    this._range = { min, max };\n  }\n}\n\nexport default Motion;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { quat } from \"gl-matrix\";\nimport Camera from \"./Camera\";\nimport Motion from \"./Motion\";\nimport { DEFAULT_ANIMATION_DURATION, DEFAULT_EASING } from \"../const/internal\";\nimport { lerp } from \"../utils\";\n\ntype CameraPose = {\n  rotation: quat;\n  zoom: number;\n}\n\n/**\n * Animation of the {@link Camera}\n * @internal\n * @ko {@link Camera}의 애니메이션\n * @since 4.0.0\n */\nclass CameraAnimation {\n  // Options\n  private _camera: Camera;\n  private _from: CameraPose;\n  private _to: CameraPose;\n\n  // Internal values\n  private _motion: Motion;\n  private _finishPromise: Promise<void>;\n  private _finish: () => void;\n\n  /**\n   * Duration of the animation\n   * @ko 애니메이션 재생시간\n   * @since 4.0.0\n   */\n  public get duration() { return this._motion.duration; }\n  public set duration(val: number) { this._motion.duration = val; }\n  /**\n   * Easing function of the animation\n   * @ko 애니메이션의 easing function\n   * @since 4.0.0\n   */\n  public get easing() { return this._motion.easing; }\n  public set easing(val: (x: number) => number) { this._motion.easing = val; }\n\n  /**\n   * Create new instance\n   * @ko 새로운 인스턴스를 생성합니다.\n   * @param camera - Camera to animate {@ko 애니메이션을 적용할 카메라}\n   * @param from - Start pose {@ko 애니메이션이 시작 시점의 카메라의 회전 및 줌}\n   * @param to - End pose {@ko 애니메이션이 끝났을 때 카메라의 회전 및 줌}\n   * @param options - Options {@ko 옵션들}\n   * @param options.duration - Animation duration {@ko 애니메이션 재생 시간}\n   * @param options.easing - Animation easing function {@ko 애니메이션 easing function}\n   */\n  public constructor(camera: Camera, from: CameraPose, to: CameraPose, {\n    duration = DEFAULT_ANIMATION_DURATION,\n    easing = DEFAULT_EASING\n  } = {}) {\n    this._camera = camera;\n    this._motion = new Motion({ duration, easing, range: { min: 0, max: 1 } });\n    this._from = from;\n    this._to = to;\n    this._finishPromise = new Promise(resolve => {\n      this._finish = resolve as () => void;\n    });\n\n    // Enable motion\n    this._motion.setNewEndByDelta(1);\n  }\n\n  /**\n   * Return a promise that resolved on animation end.\n   * @ko 애니메이션 재생이 끝났을 때 resolve되는 Promise를 반환합니다.\n   * @since 4.0.0\n   */\n  public getFinishPromise() {\n    return this._finishPromise;\n  }\n\n  /**\n   * Update animation by given deltaTime.\n   * @ko 주어진 시간만큼 애니메이션을 업데이트합니다.\n   * @param deltaTime Number of milisec to update {@ko 업데이트할 시간, 밀리초 단위}\n   * @since 4.0.0\n   */\n  public update(deltaTime: number): void {\n    const camera = this._camera;\n    const from = this._from;\n    const to = this._to;\n    const motion = this._motion;\n    motion.update(deltaTime);\n\n    // Progress that easing is applied\n    const progress = motion.val;\n    const rotation = quat.create();\n    const zoom = lerp(from.zoom, to.zoom, progress);\n\n    quat.slerp(rotation, from.rotation, to.rotation, progress);\n    camera.rotate(rotation, zoom);\n\n    if (progress >= 1) {\n      this._finish();\n    }\n  }\n}\n\nexport default CameraAnimation;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Component from \"@egjs/component\";\nimport { mat4, quat, vec3 } from \"gl-matrix\";\nimport CameraAnimation from \"./CameraAnimation\";\nimport {\n  CAMERA_EVENTS,\n  DEG_TO_RAD,\n  INFINITE_RANGE,\n  DEFAULT_PITCH_RANGE,\n  RAD_TO_DEG,\n  DEFAULT_ZOOM_RANGE,\n  DEFAULT_EASING,\n  EPSILON\n} from \"../const/internal\";\nimport {\n  circulate,\n  clamp,\n  eulerToQuat,\n  quatToEuler,\n  toVerticalFov\n} from \"../utils\";\nimport { Range } from \"../type/utils\";\n\n/**\n * Events that {@link Camera} can trigger\n * @ko {@link Camera}가 트리거할 수 있는 이벤트들\n * @since 4.0.0\n */\nexport interface CameraEvents {\n  /**\n   * An event that fires when camera's animation stops\n   * @ko 카메라 애니메이션이 멈췄을 때 트리거되는 이벤트\n   * @eventName animationEnd\n   * @eventOf Camera\n   * @version 4.0.0\n   */\n  [CAMERA_EVENTS.ANIMATION_END]: {\n    animation: CameraAnimation\n  };\n}\n\n/**\n * Options for {@link Camera}\n * @ko {@link Camera}용 옵션들\n * @since 4.0.0\n */\nexport interface CameraOptions {\n  /**\n   * @copy View360#initialYaw\n   */\n  initialYaw: number;\n  /**\n   * @copy View360#initialPitch\n   */\n  initialPitch: number;\n  /**\n   * @copy View360#initialZoom\n   */\n  initialZoom: number;\n  /**\n   * @copy View360#yawRange\n   */\n  yawRange: Range | null;\n  /**\n   * @copy View360#pitchRange\n   */\n  pitchRange: Range | null;\n  /**\n   * @copy View360#zoomRange\n   */\n  zoomRange: Range | null;\n  /**\n   * @copy View360#fov\n   */\n  fov: number;\n}\n\n/**\n * Camera for View360\n * @ko View360용 카메라 구현체\n * @version 4.0.0\n */\nclass Camera extends Component<CameraEvents> {\n  /**\n   * Current yaw(y-axis rotation) value\n   * @ko 현재 yaw(y축 회전) 값\n   * @since 4.0.0\n   */\n  public yaw: number;\n  /**\n   * Current pitch(x-axis rotation) value\n   * @ko 현재 pitch(x축 회전) 값\n   * @since 4.0.0\n   */\n  public pitch: number;\n  /**\n   * Current zoom value\n   * @ko 현재 줌 값\n   * @since 4.0.0\n   */\n  public zoom: number;\n\n  /**\n   * @copy View360#initialYaw\n   */\n  public initialYaw: number;\n  /**\n   * @copy View360#initialPitch\n   */\n  public initialPitch: number;\n  /**\n   * @copy View360#initialPitch\n   */\n  public initialZoom: number;\n  /**\n   * @hidden\n   * TODO: Please add comment for this when `rollOffset` is added\n   */\n  public rollOffset: number;\n\n  /**\n   * Current camera quaternion\n   * @ko 현재 회전을 나타내는 quaternion 값\n   * @since 4.0.0\n   * @internal\n   */\n  public quaternion: quat;\n  /**\n   * Current camera position\n   * @ko 현재 카메라 위치 좌표\n   * @since 4.0.0\n   * @internal\n   */\n  public position: vec3;\n  /**\n   * Active camera animation, `null` if there isn't.\n   * @ko 현재 활성화된 카메라 애니메이션, 없을 경우 `null`값을 가집니다.\n   * @since 4.0.0\n   */\n  public animation: CameraAnimation | null;\n  /**\n   * Camera's view matrix\n   * @ko 카메라의 뷰 변환 행렬\n   * @internal\n   * @since 4.0.0\n   */\n  public viewMatrix: mat4;\n  /**\n   * Camera's projection matrix\n   * @ko 카메라의 프로젝션 변환 행렬\n   * @internal\n   * @since 4.0.0\n   */\n  public projectionMatrix: mat4;\n\n  /**\n   * Camera's horizontal FOV(Field of View) value\n   * @ko 카메라의 수평 FOV(Field of View) 값\n   * @internal\n   * @since 4.0.0\n   */\n  public fov: number;\n\n  private _initialYawRange: Range | null;\n  private _initialPitchRange: Range | null;\n  private _initialZoomRange: Range | null;\n\n  private _yawRange: Range | null;\n  private _pitchRange: Range | null;\n  private _zoomRange: Range | null;\n\n  private _up: vec3;\n  private _aspect: number;\n  private _changed: boolean;\n  private _maxRenderHeight: number;\n\n  /**\n   * Camera's width / height ratio\n   * @ko 카메라의 가로 / 세로 비율\n   * @readonly\n   */\n  public get aspect() { return this._aspect; }\n  /**\n   * Whether the camera's rotation changed from the last frame.\n   * @ko 마지막 프레임 이후로 카메라의 회전값이 변경되었는지 나타내는 플래그.\n   * @readonly\n   */\n  public get changed() { return this._changed; }\n  /**\n   * @copy View360#yawRange\n   */\n  public get yawRange() { return this._initialYawRange; }\n  public set yawRange(val: Range | null) {\n    this._initialYawRange = val;\n  }\n  /**\n   * @copy View360#pitchRange\n   */\n  public get pitchRange() { return this._initialPitchRange; }\n  public set pitchRange(val: Range | null) {\n    this._initialPitchRange = val;\n  }\n  /**\n   * @copy View360#zoomRange\n   */\n  public get zoomRange() { return this._initialZoomRange; }\n  public set zoomRange(val: Range | null) {\n    this._initialZoomRange = val;\n  }\n\n  /**\n   * Create new instance of Camera\n   * @param options - Camera options {@ko 카메라 옵션들}\n   */\n  public constructor({\n    initialYaw,\n    initialPitch,\n    initialZoom,\n    yawRange,\n    pitchRange,\n    zoomRange,\n    fov\n  }: CameraOptions) {\n    super();\n\n    this.yaw = initialYaw;\n    this.pitch = initialPitch;\n    this.zoom = initialZoom;\n    this.rollOffset = 0;\n\n    this.initialYaw = initialYaw;\n    this.initialPitch = initialPitch;\n    this.initialZoom = initialZoom;\n\n    this.position = vec3.create();\n    this.animation = null;\n\n    this._up = vec3.fromValues(0, 1, 0);\n    this._aspect = 1;\n\n    this._initialYawRange = yawRange;\n    this._initialPitchRange = pitchRange;\n    this._initialZoomRange = zoomRange;\n\n    this._yawRange = yawRange;\n    this._pitchRange = pitchRange;\n    this._zoomRange = zoomRange;\n\n    this.quaternion = quat.create();\n    this._updateQuaternion();\n\n    this.viewMatrix = mat4.create();\n    this.projectionMatrix = mat4.create();\n    this.fov = fov;\n\n    this._maxRenderHeight = -1;\n  }\n\n  /**\n   * Destroy instance and detach all event listeners\n   * @ko 인스턴스를 삭제하고 모든 이벤트 리스너를 삭제합니다.\n   * @since 4.0.0\n   */\n  public destroy() {\n    this.off();\n  }\n\n  /**\n   * Refresh internal size value.\n   * @ko 내부 크기값을 갱신합니다.\n   * @param width - New width {@ko 변경된 너비값}\n   * @param height - New height {@ko 변경된 높이값}\n   * @since 4.0.0\n   */\n  public resize(width: number, height: number) {\n    const prevAspect = this._aspect;\n\n    this._aspect = width / height;\n\n    if (this._aspect !== prevAspect) {\n      this.updateMatrix();\n    }\n  }\n\n  /**\n   * Change camera's rotation with euler values.\n   * @ko 카메라 회전을 오일러 각 방향으로 변경합니다.\n   * @param rotation - Rotation values {@ko 회전 값}\n   * @param rotation.yaw - yaw(y-axis rotation) to look at {@ko 바라볼 yaw(y축 회전) 값}\n   * @param rotation.pitch - pitch(x-axis rotation) to look at {@ko 바라볼 pitch(x축 회전) 값}\n   * @param rotation.zoom - zoom value to apply {@ko 적용할 카메라 줌 값}\n   * @since 4.0.0\n   */\n  public lookAt({\n    yaw = this.yaw,\n    pitch = this.pitch,\n    zoom = this.zoom\n  }: Partial<{\n    yaw: number;\n    pitch: number;\n    zoom: number;\n  }>) {\n    const prevQuaternion = quat.clone(this.quaternion);\n    const prevZoom = this.zoom;\n\n    this.yaw = circulate(yaw, 0, 360);\n    this.pitch = clamp(pitch, -90, 90);\n    this.zoom = zoom;\n\n    this._updateQuaternion();\n\n    const zoomDiff = Math.abs(zoom - prevZoom);\n\n    if (\n      !quat.equals(this.quaternion, prevQuaternion)\n      || zoomDiff >= EPSILON * 10 // ignore small changes\n    ) {\n      this.updateMatrix();\n    }\n  }\n\n  /**\n   * Change camera's rotation with quaternion.\n   * @ko 카메라 회전을 Quaternion을 이용해서 변경합니다.\n   * @param rotation - Quaternion to apply {@ko 적용할 Quaternion}\n   * @param zoom - zoom value to apply {@ko 적용할 카메라 줌 값}\n   * @since 4.0.0\n   */\n  public rotate(rotation: quat, zoom: number = this.zoom) {\n    const normalized = quat.normalize(quat.create(), rotation);\n    const isSameRotation = quat.equals(this.quaternion, normalized);\n    quat.copy(this.quaternion, normalized);\n\n    const prevZoom = this.zoom;\n    const { yaw, pitch } = quatToEuler(normalized);\n\n    this.yaw = yaw;\n    this.pitch = pitch;\n    this.zoom = zoom;\n\n    const zoomDiff = Math.abs(zoom - prevZoom);\n\n    if (!isSameRotation || zoomDiff >= EPSILON * 10) {\n      this.updateMatrix();\n    }\n  }\n\n  /**\n   * Change camera's rotation to given euler values by the given duration.\n   * @ko 카메라를 주어진 방향으로 주어진 시간동안 서서히 이동시킵니다.\n   * @param options - Animation parameters {@ko 애니메이션 패러미터}\n   * @param options.yaw - yaw(y-axis rotation) to look at {@ko 바라볼 yaw(y축 회전) 값}\n   * @param options.pitch - pitch(x-axis rotation) to look at {@ko 바라볼 pitch(x축 회전) 값}\n   * @param options.zoom - zoom value to apply {@ko 적용할 카메라 줌 값}\n   * @param options.duration - Duration of the animation {@ko 애니메이션 시간}\n   * @param options.easing - Easing function for the animation {@ko 애니메이션에 적용할 easing function}\n   */\n  public async animateTo({\n    yaw = this.yaw,\n    pitch = this.pitch,\n    zoom = this.zoom,\n    duration = 0,\n    easing = DEFAULT_EASING\n  }: Partial<{\n    yaw: number;\n    pitch: number;\n    zoom: number;\n    duration: number;\n    easing: (x: number) => number;\n  }> = {}): Promise<void> {\n    if (\n      this.yaw === yaw\n      && this.pitch === pitch\n      && this.zoom === zoom\n    ) return;\n\n    const from = {\n      rotation: quat.clone(this.quaternion),\n      zoom: this.zoom\n    };\n    const to = {\n      rotation: eulerToQuat(quat.create(), yaw, pitch, this.rollOffset),\n      zoom\n    };\n\n    const animation = new CameraAnimation(this, from, to, {\n      duration,\n      easing\n    });\n    const finishPromise = animation.getFinishPromise();\n\n    this.animation = animation;\n    finishPromise.then(() => {\n      this.animation = null;\n      this.trigger(CAMERA_EVENTS.ANIMATION_END, { animation });\n    });\n\n    return finishPromise;\n  }\n\n  /**\n   * @hidden\n   */\n  public restrictYawRange(min: number, max: number) {\n    this._yawRange = { min, max };\n  }\n\n  /**\n   * @hidden\n   */\n  public restrictPitchRange(min: number, max: number) {\n    this._pitchRange = { min, max };\n  }\n\n  /**\n   * @hidden\n   */\n  public restrictZoomRange(min: number, max: number) {\n    this._zoomRange = { min, max };\n  }\n\n  /**\n   * @hidden\n   */\n  public restrictRenderHeight(height: number) {\n    this._maxRenderHeight = height;\n  }\n\n  /**\n   * @hidden\n   */\n  public resetRange() {\n    this._yawRange = this._initialYawRange;\n    this._pitchRange = this._initialPitchRange;\n    this._zoomRange = this._initialZoomRange;\n    this._maxRenderHeight = -1;\n  }\n\n  /**\n   * Get actual yaw range by the given zoom value.\n   * @ko 주어진 zoom 값에 대한 실제 yaw 범위값을 반환합니다.\n   * @since 4.0.0\n   */\n  public getYawRange(zoom: number) {\n    const yawLimit = this._yawRange;\n    const maxRenderHeight = this._maxRenderHeight;\n    if (!yawLimit) return INFINITE_RANGE;\n\n    const halfHFov = this.getHorizontalFov(zoom) * 0.5;\n    let minYaw = yawLimit.min;\n    let maxYaw = yawLimit.max;\n\n    if (maxRenderHeight > 0) {\n      const halfVFovRad = toVerticalFov(halfHFov * DEG_TO_RAD, this._aspect);\n      const h = maxRenderHeight * 0.5;\n      const t = Math.tan(halfVFovRad);\n      const d = Math.sqrt((1 + h * h) / (1 + t * t));\n      const theta = Math.atan(Math.tan(halfHFov * DEG_TO_RAD) * d) * RAD_TO_DEG;\n\n      minYaw = yawLimit.min + theta;\n      maxYaw = yawLimit.max - theta;\n    }\n\n    if (minYaw > maxYaw) {\n      minYaw = 0;\n      maxYaw = 0;\n    }\n\n    return {\n      min: minYaw,\n      max: maxYaw\n    };\n  }\n\n  /**\n   * Get actual pitch range by the given zoom value.\n   * @ko 주어진 zoom 값에 대한 실제 pitch 범위값을 반환합니다.\n   * @since 4.0.0\n   */\n  public getPitchRange(zoom: number) {\n    const pitchLimit = this._pitchRange;\n    const maxRenderHeight = this._maxRenderHeight;\n\n    if (!pitchLimit) return DEFAULT_PITCH_RANGE;\n\n    let minPitch = pitchLimit.min;\n    let maxPitch = pitchLimit.max;\n\n    if (maxRenderHeight > 0) {\n      const halfVFov = this.getVerticalFov(zoom) * 0.5;\n\n      minPitch = pitchLimit.min + halfVFov;\n      maxPitch = pitchLimit.max - halfVFov;\n    }\n\n    if (minPitch > maxPitch) {\n      minPitch = 0;\n      maxPitch = 0;\n    }\n\n    return {\n      min: Math.max(minPitch, -90),\n      max: Math.min(maxPitch, 90)\n    };\n  }\n\n  /**\n   * Get actual zoom range in fov degrees.\n   * @ko 실제 줌 범위를 fov각의 범위로 반환합니다.\n   * @since 4.0.0\n   */\n  public getZoomRange() {\n    const limit = this._zoomRange ?? DEFAULT_ZOOM_RANGE;\n\n    // max (zoom in) -> minimum fov\n    const minFov = this.getHorizontalFov(limit.max);\n    const maxFov = this.getHorizontalFov(limit.min);\n    const currentFov = this.getHorizontalFov(this.zoom);\n\n    return {\n      min: Math.max(minFov, 1),\n      max: Math.min(maxFov, 180),\n      current: currentFov\n    };\n  }\n\n  /**\n   * Return horizontal fov value when the given zoom is applied. (in degrees, °)\n   * @ko 주어진 zoom 값이 적용되었을 때의 수평 fov값을 반환합니다. (도 단위, °)\n   * @returns Zoomed horizontal FOV {@ko 줌이 적용된 수평 fov값}\n   * @since 4.0.0\n   */\n  public getHorizontalFov(zoom = this.zoom) {\n    return this._getZoomedHorizontalFov(zoom) * RAD_TO_DEG;\n  }\n\n  /**\n   * Return vertical fov value when the given zoom is applied. (in degrees, °)\n   * @ko 주어진 zoom 값이 적용되었을 때의 수직 fov값을 반환합니다. (도 단위, °)\n   * @returns Zoomed vertical FOV {@ko 줌이 적용된 수직 fov값}\n   * @since 4.0.0\n   */\n  public getVerticalFov(zoom = this.zoom) {\n    const aspect = this._aspect;\n    const hFov = this._getZoomedHorizontalFov(zoom); // In radians\n    const vFov = toVerticalFov(hFov, aspect);\n\n    return vFov * RAD_TO_DEG;\n  }\n\n  /**\n   * Calculate zoom value for the given fov.\n   * @ko 주어진 fov값을 zoom값으로 변환합니다.\n   * @param fov horizontal fov (in degrees, °) {@ko 수평 fov 값 (도 단위, °)}\n   * @since 4.0.0\n   */\n  public fovToZoom(fov: number) {\n    const baseFov = this.fov;\n    const renderingWidth = Math.tan(DEG_TO_RAD * baseFov * 0.5);\n    const zoomedWidth = Math.tan(DEG_TO_RAD * fov * 0.5);\n\n    return renderingWidth / zoomedWidth;\n  }\n\n  /**\n   * Update inner matrixes.\n   * @ko 내부 행렬들을 업데이트합니다.\n   * @internal\n   * @since 4.0.0\n   */\n  public updateMatrix() {\n    const up = this._up;\n    const aspect = this._aspect;\n    const viewMatrix = this.viewMatrix;\n    const projMatrix = this.projectionMatrix;\n    const position = this.position;\n    const rotation = this.quaternion;\n\n    const upDir = vec3.create();\n    const viewDir = vec3.fromValues(0, 0, -1);\n    vec3.transformQuat(viewDir, viewDir, rotation);\n    vec3.transformQuat(upDir, up, rotation);\n\n    const hFov = this._getZoomedHorizontalFov(); // In radians\n    const vFov = toVerticalFov(hFov, aspect);\n\n    mat4.lookAt(viewMatrix, position, viewDir, upDir);\n    mat4.perspective(projMatrix, vFov, aspect, 0.1, 100);\n\n    this._changed = true;\n  }\n\n  /**\n   * @hidden\n   */\n  public onFrameRender() {\n    this._changed = false;\n  }\n\n  private _updateQuaternion() {\n    eulerToQuat(this.quaternion, this.yaw, this.pitch, this.rollOffset);\n  }\n\n  /**\n   * @param zoom Current zoom value\n   * @returns horizontal fov including zoom, in radian\n   */\n  private _getZoomedHorizontalFov(zoom = this.zoom) {\n    return 2 * Math.atan(Math.tan(DEG_TO_RAD * this.fov * 0.5) / zoom);\n  }\n}\n\nexport default Camera;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Component from \"@egjs/component\";\nimport * as BROWSER from \"../../const/browser\";\nimport { CONTROL_EVENTS } from \"../../const/internal\";\nimport { InputEvents } from \"../../type/internal\";\n\nclass MouseInput extends Component<InputEvents<{ x: number, y: number }, MouseEvent>> {\n  private _el: HTMLElement | null;\n  private _prevPos: [number, number];\n\n  public constructor() {\n    super();\n\n    this._el = null;\n    this._prevPos = [0, 0];\n  }\n\n  public enable(element: HTMLElement) {\n    if (this._el) return;\n\n    element.addEventListener(BROWSER.EVENTS.MOUSE_DOWN, this._onMouseDown);\n\n    this._el = element;\n  }\n\n  public disable() {\n    const element = this._el;\n    if (!element) return;\n\n    element.removeEventListener(BROWSER.EVENTS.MOUSE_DOWN, this._onMouseDown);\n    window.removeEventListener(BROWSER.EVENTS.MOUSE_MOVE, this._onMouseMove, false);\n    window.removeEventListener(BROWSER.EVENTS.MOUSE_UP, this._onMouseUp, false);\n\n    this._el = null;\n  }\n\n  private _onMouseDown = (evt: MouseEvent) => {\n    const el = this._el;\n    if (!el || evt.button !== BROWSER.MOUSE_BUTTON.LEFT) return;\n\n    evt.preventDefault();\n\n    if (el.focus) {\n      el.focus();\n    } else {\n      window.focus();\n    }\n\n    this._prevPos[0] = evt.clientX;\n    this._prevPos[1] = evt.clientY;\n\n    window.addEventListener(BROWSER.EVENTS.MOUSE_MOVE, this._onMouseMove, false);\n    window.addEventListener(BROWSER.EVENTS.MOUSE_UP, this._onMouseUp, false);\n\n    this.trigger(CONTROL_EVENTS.INPUT_START, {\n      srcEvent: evt,\n      isTouch: false,\n      isKeyboard: false\n    });\n  }\n\n  private _onMouseMove = (evt: MouseEvent) => {\n    evt.preventDefault();\n\n    const x = evt.clientX;\n    const y = evt.clientY;\n    const prevPos = this._prevPos;\n    const deltaX = x - prevPos[0];\n    const deltaY = y - prevPos[1];\n\n    this.trigger(CONTROL_EVENTS.CHANGE, {\n      delta: {\n        x: deltaX,\n        y: deltaY\n      },\n      isTouch: false,\n      isKeyboard: false\n    });\n\n    prevPos[0] = x;\n    prevPos[1] = y;\n  }\n\n  private _onMouseUp = () => {\n    this._prevPos[0] = 0;\n    this._prevPos[1] = 0;\n\n    window.removeEventListener(BROWSER.EVENTS.MOUSE_MOVE, this._onMouseMove, false);\n    window.removeEventListener(BROWSER.EVENTS.MOUSE_UP, this._onMouseUp, false);\n\n    this.trigger(CONTROL_EVENTS.INPUT_END, {\n      isTouch: false,\n      isKeyboard: false,\n      scrolling: false\n    });\n  }\n}\n\nexport default MouseInput;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Component from \"@egjs/component\";\nimport * as BROWSER from \"../../const/browser\";\nimport { CONTROL_EVENTS } from \"../../const/internal\";\nimport { InputEvents } from \"../../type/internal\";\nimport { isFullscreen } from \"../../utils\";\n\nclass TouchInput extends Component<InputEvents<{ x: number, y: number }, TouchEvent>> {\n  private _el: HTMLElement | null;\n  private _prevPos: [number, number];\n  private _isFirstTouch: boolean;\n  private _scrolling: boolean;\n  private _scrollable: boolean;\n\n  public get scrollable() { return this._scrollable; }\n  public set scrollable(val: boolean) { this._scrollable = val; }\n\n  public constructor() {\n    super();\n\n    this._el = null;\n    this._prevPos = [0, 0];\n    this._isFirstTouch = false;\n    this._scrolling = false;\n    this._scrollable = false;\n  }\n\n  public enable(element: HTMLElement) {\n    if (this._el) return;\n\n    element.addEventListener(BROWSER.EVENTS.TOUCH_START, this._onTouchStart, { passive: false });\n    element.addEventListener(BROWSER.EVENTS.TOUCH_MOVE, this._onTouchMove, { passive: false });\n    element.addEventListener(BROWSER.EVENTS.TOUCH_END, this._onTouchEnd);\n\n    this._el = element;\n  }\n\n  public disable() {\n    const element = this._el;\n    if (!element) return;\n\n    element.removeEventListener(BROWSER.EVENTS.TOUCH_START, this._onTouchStart);\n    element.removeEventListener(BROWSER.EVENTS.TOUCH_MOVE, this._onTouchMove);\n    element.removeEventListener(BROWSER.EVENTS.TOUCH_END, this._onTouchEnd);\n\n    this._el = null;\n  }\n\n  private _onTouchStart = (evt: TouchEvent) => {\n    if (evt.touches.length > 1 || this._scrolling) return;\n\n    const touch = evt.touches[0];\n\n    this._isFirstTouch = true;\n    this._prevPos[0] = touch.clientX;\n    this._prevPos[1] = touch.clientY;\n\n    this.trigger(CONTROL_EVENTS.INPUT_START, {\n      srcEvent: evt,\n      isTouch: true,\n      isKeyboard: false\n    });\n  };\n\n  private _onTouchMove = (evt: TouchEvent) => {\n    // Only the one finger motion should be considered\n    if (evt.touches.length > 1 || this._scrolling) return;\n\n    const touch = evt.touches[0];\n    const scrollable = this._scrollable;\n    const prevPos = this._prevPos;\n\n    const x = touch.clientX;\n    const y = touch.clientY;\n    const deltaX = x - prevPos[0];\n    const deltaY = y - prevPos[1];\n\n    if (this._isFirstTouch) {\n      if (scrollable && !isFullscreen()) {\n        if (Math.abs(deltaY) > Math.abs(deltaX)) {\n          // Assume Scrolling\n          this._scrolling = true;\n          return;\n        }\n      }\n\n      this._isFirstTouch = false;\n    }\n\n    if (evt.cancelable !== false) {\n      evt.preventDefault();\n    }\n\n    this.trigger(CONTROL_EVENTS.CHANGE, {\n      delta: {\n        x: deltaX,\n        y: deltaY\n      },\n      isTouch: true,\n      isKeyboard: false\n    });\n\n    prevPos[0] = x;\n    prevPos[1] = y;\n  };\n\n  private _onTouchEnd = (evt: TouchEvent) => {\n    if (evt.touches.length !== 0) return;\n\n    const touch = evt.touches[0];\n    const prevPos = this._prevPos;\n\n    if (touch) {\n      prevPos[0] = touch.clientX;\n      prevPos[1] = touch.clientY;\n    } else {\n      prevPos[0] = 0;\n      prevPos[1] = 0;\n\n      this.trigger(CONTROL_EVENTS.INPUT_END, {\n        isTouch: true,\n        isKeyboard: false,\n        scrolling: this._scrolling\n      });\n    }\n\n    if (evt.cancelable !== false) {\n      evt.preventDefault();\n    }\n\n    this._scrolling = false;\n  };\n}\n\nexport default TouchInput;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Component from \"@egjs/component\";\nimport * as BROWSER from \"../../const/browser\";\nimport { CONTROL_EVENTS } from \"../../const/internal\";\nimport { InputEvents } from \"../../type/internal\";\n\nclass KeyboardInput extends Component<InputEvents<{ x: number, y: number }, KeyboardEvent>> {\n  private _el: HTMLElement | null;\n  private _pressed: {\n    LEFT: boolean;\n    UP: boolean;\n    RIGHT: boolean;\n    DOWN: boolean;\n  };\n\n  public get active() {\n    const pressed = this._pressed;\n    return pressed.LEFT || pressed.UP || pressed.RIGHT || pressed.DOWN;\n  }\n\n  public constructor() {\n    super();\n\n    this._el = null;\n    this._clearPressedKeys();\n  }\n\n  public enable(element: HTMLElement) {\n    if (this._el) return;\n\n    element.addEventListener(BROWSER.EVENTS.KEY_DOWN, this._onKeyDown);\n    element.addEventListener(BROWSER.EVENTS.KEY_UP, this._onKeyUp);\n\n    this._el = element;\n    this._clearPressedKeys();\n  }\n\n  public disable() {\n    const element = this._el;\n    if (!element) return;\n\n    element.removeEventListener(BROWSER.EVENTS.KEY_DOWN, this._onKeyDown);\n    element.removeEventListener(BROWSER.EVENTS.KEY_UP, this._onKeyUp);\n\n    this._el = null;\n    this._clearPressedKeys();\n  }\n\n  public update() {\n    const delta = this._getDeltaByPressedKeys();\n\n    if (delta.x !== 0 || delta.y !== 0) {\n      this.trigger(CONTROL_EVENTS.CHANGE, {\n        delta,\n        isTouch: false,\n        isKeyboard: true\n      });\n    }\n  }\n\n  private _clearPressedKeys() {\n    this._pressed = BROWSER.KEY_DIRECTION.reduce((obj, keyName) => {\n      return {\n        ...obj,\n        [keyName]: false\n      };\n    }, {} as KeyboardInput[\"_pressed\"]);\n  }\n\n  private _updateKeyPress(event: KeyboardEvent, isEnable: boolean): void {\n    const pressed = this._pressed;\n    const keyToUpdate = event.keyCode != null\n      ? BROWSER.DIRECTION_KEY_CODE[event.keyCode]\n      : BROWSER.DIRECTION_KEY_NAME[event.key];\n\n    if (!keyToUpdate) return;\n\n    pressed[keyToUpdate] = isEnable;\n  }\n\n  private _getPressedKeyCount() {\n    return BROWSER.KEY_DIRECTION.filter(key => this._pressed[key]).length;\n  }\n\n  private _getDeltaByPressedKeys() {\n    const pressed = this._pressed;\n    let x = 0;\n    let y = 0;\n\n    if (pressed.LEFT) {\n      x += 1;\n    }\n\n    if (pressed.RIGHT) {\n      x -= 1;\n    }\n\n    if (pressed.UP) {\n      y += 1;\n    }\n\n    if (pressed.DOWN) {\n      y -= 1;\n    }\n\n    return {\n      x, y\n    };\n  }\n\n  private _onKeyDown = (evt: KeyboardEvent) => {\n    // Ignore all other keypress except main arrow keys\n    if (evt.location !== KeyboardEvent.DOM_KEY_LOCATION_STANDARD) return;\n\n    this._updateKeyPress(evt, true);\n\n    const pressedCount = this._getPressedKeyCount();\n    if (pressedCount <= 0) return;\n\n    evt.preventDefault();\n    if (pressedCount === 1 && !evt.repeat) {\n      // On first keydown\n      this.trigger(CONTROL_EVENTS.INPUT_START, {\n        srcEvent: evt,\n        isTouch: false,\n        isKeyboard: true\n      });\n    }\n  };\n\n  private _onKeyUp = (evt: KeyboardEvent) => {\n    // Ignore all other keypress except main arrow keys\n    if (evt.location !== KeyboardEvent.DOM_KEY_LOCATION_STANDARD) return;\n\n    this._updateKeyPress(evt, false);\n\n    const pressedCount = this._getPressedKeyCount();\n    if (pressedCount > 0) return;\n\n    this.trigger(CONTROL_EVENTS.INPUT_END, {\n      isTouch: false,\n      isKeyboard: true,\n      scrolling: false\n    });\n  };\n}\n\nexport default KeyboardInput;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Component from \"@egjs/component\";\nimport CameraControl from \"./CameraControl\";\nimport MouseInput from \"./input/MouseInput\";\nimport TouchInput from \"./input/TouchInput\";\nimport KeyboardInput from \"./input/KeyboardInput\";\nimport Camera from \"../core/Camera\";\nimport Motion from \"../core/Motion\";\nimport { CONTROL_EVENTS, INFINITE_RANGE, DEFAULT_PITCH_RANGE, DEFAULT_ANIMATION_DURATION, DEFAULT_EASING, DEG_TO_RAD, RAD_TO_DEG } from \"../const/internal\";\nimport { toVerticalFov } from \"../utils\";\nimport { ControlEvents, InputEvents } from \"../type/internal\";\n\n/**\n * Options for {@link RotateControl}\n * @ko {@link RotateControl}용 옵션들\n * @since 4.0.0\n */\nexport interface RotateControlOptions {\n  /**\n   * @copy RotateControl#pointerScale\n   */\n  pointerScale: [number, number];\n  /**\n   * @copy RotateControl#keyboardScale\n   */\n  keyboardScale: [number, number];\n  /**\n   * @copy RotateControl#duration\n   */\n  duration: number;\n  /**\n   * @copy RotateControl#easing\n   */\n  easing: (x: number) => number;\n  /**\n   * @copy RotateControl#disablePitch\n   */\n  disablePitch: boolean;\n  /**\n   * @copy RotateControl#disableYaw\n   */\n  disableYaw: boolean;\n  /**\n   * @copy RotateControl#disableKeyboard\n   */\n  disableKeyboard: boolean;\n}\n\ntype RotateDeltaType = { x: number; y: number; };\nexport type RotateControlEvents = ControlEvents<RotateDeltaType>;\n\n/**\n * Camera's rotation control\n * @ko 카메라의 회전을 담당하는 컨트롤\n * @since 4.0.0\n */\nclass RotateControl extends Component<RotateControlEvents> implements CameraControl {\n  // Options\n  private _pointerScale: RotateControlOptions[\"pointerScale\"];\n  private _keyboardScale: RotateControlOptions[\"keyboardScale\"];\n  private _duration: RotateControlOptions[\"duration\"];\n  private _easing: RotateControlOptions[\"easing\"];\n  private _disablePitch: RotateControlOptions[\"disablePitch\"];\n  private _disableYaw: RotateControlOptions[\"disableYaw\"];\n  private _disableKeyboard: RotateControlOptions[\"disableKeyboard\"];\n\n  // Internal values\n  private _controlEl: HTMLElement;\n  private _enableBlocked: boolean;\n  private _mouseInput: MouseInput;\n  private _touchInput: TouchInput;\n  private _keyboardInput: KeyboardInput;\n  private _xMotion: Motion;\n  private _yMotion: Motion;\n  private _screenScale: [number, number];\n  private _zoomScale: number;\n  private _enabled: boolean;\n  private _changedWhileDragging: boolean;\n\n  /**\n   * @copy CameraControl#enabled\n   */\n  public get enabled() { return this._enabled; }\n  /**\n   * @hidden\n   */\n  public get enableBlocked() { return this._enableBlocked; }\n  /**\n   * @copy CameraControl#animating\n   */\n  public get animating() {\n    return this._keyboardInput.active\n      || this._xMotion.activated\n      || this._yMotion.activated;\n  }\n  /**\n   * Current yaw value\n   * @ko 현재 yaw 값\n   * @readonly\n   * @since 4.0.0\n   */\n  public get yaw() { return this._xMotion; }\n  /**\n   * Current pitch value\n   * @ko 현재 pitch 값\n   * @readonly\n   * @since 4.0.0\n   */\n  public get pitch() { return this._yMotion; }\n  /**\n   * @copy View360#scrollable\n   */\n  public get scrollable() { return this._touchInput.scrollable; }\n  public set scrollable(val: boolean) {\n    this._touchInput.scrollable = val;\n  }\n\n  /**\n   * Scale factor for mouse/touch rotation\n   * @ko 마우스/터치를 통한 회전 배율\n   * @default [1, 1]\n   * @since 4.0.0\n   */\n  public get pointerScale() { return this._pointerScale; }\n  public set pointerScale(val: RotateControlOptions[\"pointerScale\"]) {\n    this._pointerScale = val;\n  }\n\n  /**\n   * Scale factor for keyboard rotation\n   * @ko 키보드를 통한 회전 배율\n   * @default [1, 1]\n   * @since 4.0.0\n   */\n  public get keyboardScale() { return this._keyboardScale; }\n  public set keyboardScale(val: RotateControlOptions[\"keyboardScale\"]) {\n    this._keyboardScale = val;\n  }\n\n  /**\n   * Duration of the input animation (ms)\n   * @ko 회전 애니메이션의 시간 (ms)\n   * @default 300\n   */\n  public get duration() { return this._duration; }\n  public set duration(val: RotateControlOptions[\"duration\"]) {\n    this._duration = val;\n    this._xMotion.duration = val;\n    this._yMotion.duration = val;\n  }\n\n  /**\n   * Easing function of the animation\n   * @ko 회전 애니메이션에 적용할 easing 함수\n   * @default EASING.EASE_OUT_CUBIC\n   * @see EASING\n   */\n  public get easing() { return this._easing; }\n  public set easing(val: RotateControlOptions[\"easing\"]) {\n    this._easing = val;\n    this._xMotion.easing = val;\n    this._yMotion.easing = val;\n  }\n\n  /**\n   * Disable X-axis(pitch) rotation.\n   * @ko x축 회전(pitch)을 비활성화합니다.\n   * @default false\n   */\n  public get disablePitch() { return this._disablePitch; }\n  public set disablePitch(val: RotateControlOptions[\"disablePitch\"]) { this._disablePitch = val; }\n\n  /**\n   * Disable Y-axis(yaw) rotation.\n   * @ko y축 회전(yaw)을 비활성화합니다.\n   * @default false\n   */\n  public get disableYaw() { return this._disableYaw; }\n  public set disableYaw(val: RotateControlOptions[\"disableYaw\"]) { this._disableYaw = val; }\n\n  /**\n   * Disable rotation by keyboard.\n   * @ko 키보드를 이용한 회전을 비활성화합니다.\n   * @default false\n   */\n  public get disableKeyboard() { return this._disableKeyboard; }\n  public set disableKeyboard(val: RotateControlOptions[\"disableKeyboard\"]) { this._disableKeyboard = val; }\n\n  /**\n   * Create new RotateControl instance\n   * @ko RotateControl의 인스턴스를 생성합니다.\n   * @param controlEl - Element to attach handlers {@ko 입력을 받을 엘리먼트}\n   * @param enableBlocked - Whether to disable control on init {@ko 초기화 과정에서 컨트롤 활성화 여부}\n   * @param options - Options for control {@ko 컨트롤 옵션들}\n   */\n  public constructor(controlEl: HTMLElement, enableBlocked: boolean, {\n    duration = DEFAULT_ANIMATION_DURATION,\n    easing = DEFAULT_EASING,\n    pointerScale = [1, 1],\n    keyboardScale = [1, 1],\n    disablePitch = false,\n    disableYaw = false,\n    disableKeyboard = false\n  }: Partial<RotateControlOptions> = {}) {\n    super();\n\n    this._controlEl = controlEl;\n    this._pointerScale = pointerScale;\n    this._keyboardScale = keyboardScale;\n    this._duration = duration;\n    this._easing = easing;\n    this._disablePitch = disablePitch;\n    this._disableYaw = disableYaw;\n    this._disableKeyboard = disableKeyboard;\n\n    this._enableBlocked = enableBlocked;\n    this._mouseInput = new MouseInput();\n    this._touchInput = new TouchInput();\n    this._keyboardInput = new KeyboardInput();\n    this._xMotion = new Motion({ duration, range: INFINITE_RANGE, easing });\n    this._yMotion = new Motion({ duration, range: DEFAULT_PITCH_RANGE, easing });\n    this._screenScale = [1, 1];\n    this._zoomScale = 1;\n    this._enabled = false;\n    this._changedWhileDragging = false;\n    this._bindInputs();\n  }\n\n  public destroy(): void {\n    this.disable();\n    this._mouseInput.off();\n    this._touchInput.off();\n    this._keyboardInput.off();\n    this.off();\n    this._changedWhileDragging = false;\n  }\n\n  /**\n   * @hidden\n   */\n  public update(delta: number): void {\n    if (!this._enabled) return;\n\n    const xMotion = this._xMotion;\n    const yMotion = this._yMotion;\n    const keyboardInput = this._keyboardInput;\n\n    if (!this._disableKeyboard) {\n      keyboardInput.update();\n    }\n\n    if (!this._disablePitch) {\n      yMotion.update(delta);\n    }\n\n    if (!this._disableYaw) {\n      xMotion.update(delta);\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  public updateRange(camera: Camera, zoom: number) {\n    const yawRange = camera.getYawRange(zoom);\n    const pitchRange = camera.getPitchRange(zoom);\n\n    this._xMotion.setRange(yawRange.min, yawRange.max);\n    this._yMotion.setRange(pitchRange.min, pitchRange.max);\n  }\n\n  /**\n   * @hidden\n   */\n  public setZoomScale(val: number) {\n    this._zoomScale = val;\n  }\n\n  /**\n   * Resize control to match target size.\n   * @ko 컨트롤의 내부 크기를 갱신합니다.\n   * @param hfov - Camera horizontal fov in degrees {@ko 카메라의 수평방향 fov값 (도 단위)}\n   * @param aspect - Camera aspect {@ko 카메라 가로/세로 비율}\n   * @param width - New width {@ko 갱신된 너비}\n   * @param height - New height {@ko 갱신된 높이}\n   */\n  public resize(hfov: number, aspect: number, width: number, height: number) {\n    const vfov = toVerticalFov(hfov * DEG_TO_RAD, aspect) * RAD_TO_DEG;\n\n    this._screenScale[0] = hfov / width;\n    this._screenScale[1] = vfov / height;\n  }\n\n  public enable(): void {\n    if (this._enabled) return;\n\n    const element = this._controlEl;\n\n    this._mouseInput.enable(element);\n    this._touchInput.enable(element);\n    this._keyboardInput.enable(element);\n\n    this._enabled = true;\n    this._enableBlocked = false;\n\n    this.trigger(CONTROL_EVENTS.ENABLE, { control: this, updateCursor: true });\n  }\n\n  public disable(): void {\n    if (!this._enabled) return;\n\n    this._mouseInput.disable();\n    this._touchInput.disable();\n    this._keyboardInput.disable();\n\n    this._enabled = false;\n\n    this.trigger(CONTROL_EVENTS.DISABLE, { updateCursor: true });\n  }\n\n  public sync(camera: Camera): void {\n    this.updateRange(camera, camera.zoom);\n\n    this._xMotion.reset(camera.yaw);\n    this._yMotion.reset(camera.pitch);\n  }\n\n  private _bindInputs() {\n    const mouseInput = this._mouseInput;\n    const touchInput = this._touchInput;\n    const keyboardInput = this._keyboardInput;\n\n    mouseInput.on(CONTROL_EVENTS.INPUT_START, this._onInputStart);\n    mouseInput.on(CONTROL_EVENTS.CHANGE, this._onChange);\n    mouseInput.on(CONTROL_EVENTS.INPUT_END, this._onInputEnd);\n\n    touchInput.on(CONTROL_EVENTS.INPUT_START, this._onInputStart);\n    touchInput.on(CONTROL_EVENTS.CHANGE, this._onChange);\n    touchInput.on(CONTROL_EVENTS.INPUT_END, this._onInputEnd);\n\n    keyboardInput.on(CONTROL_EVENTS.INPUT_START, this._onInputStart);\n    keyboardInput.on(CONTROL_EVENTS.CHANGE, this._onChange);\n    keyboardInput.on(CONTROL_EVENTS.INPUT_END, this._onInputEnd);\n  }\n\n  private _onInputStart = (evt: InputEvents<RotateDeltaType>[typeof CONTROL_EVENTS.INPUT_START]) => {\n    this._changedWhileDragging = false;\n    this.trigger(CONTROL_EVENTS.INPUT_START, {\n      ...evt,\n      inputType: \"rotate\"\n    });\n  };\n\n  private _onChange = (evt: InputEvents<RotateDeltaType>[typeof CONTROL_EVENTS.CHANGE]) => {\n    const delta = evt.delta;\n    const invZoomScale = 1 / this._zoomScale; // Reduce speed on zoom\n    const screenScale = this._screenScale;\n    const keyboardScale = this._keyboardScale;\n    const pointerScale = this._pointerScale;\n\n    let scale: [number, number];\n\n    if (evt.isKeyboard) {\n      scale = [\n        keyboardScale[0] * invZoomScale,\n        keyboardScale[1] * invZoomScale\n      ];\n    } else {\n      scale = [\n        pointerScale[0] * screenScale[0] * invZoomScale,\n        pointerScale[1] * screenScale[1] * invZoomScale\n      ];\n    }\n\n    const scaledX = delta.x * scale[0];\n    const scaledY = delta.y * scale[1];\n\n    this._xMotion.setNewEndByDelta(scaledX);\n    this._yMotion.setNewEndByDelta(scaledY);\n\n    this._changedWhileDragging = true;\n  }\n\n  private _onInputEnd = (evt: InputEvents<RotateDeltaType>[typeof CONTROL_EVENTS.INPUT_END]) => {\n    this.trigger(CONTROL_EVENTS.INPUT_END, {\n      ...evt,\n      inputType: \"rotate\"\n    });\n\n    if (!this._changedWhileDragging && !evt.isKeyboard && !evt.scrolling) {\n      this.trigger(CONTROL_EVENTS.STATIC_CLICK, {\n        isTouch: evt.isTouch\n      });\n    }\n\n    this._changedWhileDragging = false;\n  };\n}\n\nexport default RotateControl;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Component from \"@egjs/component\";\nimport * as BROWSER from \"../../const/browser\";\nimport { CONTROL_EVENTS, DEFAULT_ANIMATION_DURATION } from \"../../const/internal\";\nimport { InputEvents } from \"../../type/internal\";\n\nclass WheelInput extends Component<InputEvents<number, WheelEvent>> {\n  private _el: HTMLElement | null;\n  private _scrollable: boolean;\n  private _baseScale: number;\n  private _inputTimer: number;\n\n  public get scrollable() { return this._scrollable; }\n  public set scrollable(val: boolean) { this._scrollable = val; }\n\n  public constructor() {\n    super();\n\n    this._el = null;\n    this._baseScale = 0.04;\n    this._scrollable = false;\n    this._inputTimer = -1;\n  }\n\n  public enable(element: HTMLElement) {\n    if (this._el) return;\n\n    element.addEventListener(BROWSER.EVENTS.WHEEL, this._onWheel, { passive: false, capture: false });\n\n    this._el = element;\n    this._clearTimer();\n  }\n\n  public disable() {\n    const element = this._el;\n    if (!element) return;\n\n    element.removeEventListener(BROWSER.EVENTS.WHEEL, this._onWheel, false);\n\n    this._el = null;\n    this._clearTimer();\n  }\n\n  private _onWheel = (evt: WheelEvent) => {\n    const scrollable = this._scrollable;\n\n    if (evt.deltaY === 0 || scrollable) return;\n\n    evt.preventDefault();\n    evt.stopPropagation();\n\n    if (this._inputTimer < 0) {\n      this.trigger(CONTROL_EVENTS.INPUT_START, {\n        srcEvent: evt,\n        isTouch: false,\n        isKeyboard: false\n      });\n    } else {\n      this._clearTimer();\n    }\n\n    const delta = this._baseScale * evt.deltaY;\n\n    this.trigger(CONTROL_EVENTS.CHANGE, {\n      delta,\n      isTouch: false,\n      isKeyboard: false\n    });\n\n    this._inputTimer = window.setTimeout(() => {\n      this.trigger(CONTROL_EVENTS.INPUT_END, {\n        isTouch: false,\n        isKeyboard: false,\n        scrolling: false\n      });\n      this._inputTimer = -1;\n    }, DEFAULT_ANIMATION_DURATION);\n  };\n\n  private _clearTimer() {\n    window.clearTimeout(this._inputTimer);\n    this._inputTimer = -1;\n  }\n}\n\nexport default WheelInput;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Component from \"@egjs/component\";\nimport * as BROWSER from \"../../const/browser\";\nimport { CONTROL_EVENTS } from \"../../const/internal\";\nimport { InputEvents } from \"../../type/internal\";\n\nclass PinchInput extends Component<InputEvents<number, TouchEvent>> {\n  private _el: HTMLElement | null;\n  private _baseScale: number;\n  private _prevDistance: number;\n  private _isFirstTouch: boolean;\n\n  public constructor() {\n    super();\n\n    this._el = null;\n    this._baseScale = -0.2;\n    this._prevDistance = -1;\n    this._isFirstTouch = true;\n  }\n\n  public enable(element: HTMLElement) {\n    if (this._el) return;\n\n    element.addEventListener(BROWSER.EVENTS.TOUCH_MOVE, this._onTouchMove, { passive: false, capture: false });\n    element.addEventListener(BROWSER.EVENTS.TOUCH_END, this._onTouchEnd);\n\n    this._el = element;\n    this._prevDistance = -1;\n    this._isFirstTouch = true;\n  }\n\n  public disable() {\n    const element = this._el;\n    if (!element) return;\n\n    element.removeEventListener(BROWSER.EVENTS.TOUCH_MOVE, this._onTouchMove, false);\n    element.removeEventListener(BROWSER.EVENTS.TOUCH_END, this._onTouchEnd);\n\n    this._el = null;\n  }\n\n  private _onTouchMove = (evt: TouchEvent) => {\n    const touches = evt.touches;\n    if (touches.length !== 2) return;\n\n    if (!evt.cancelable) return;\n\n    evt.preventDefault();\n    evt.stopPropagation();\n\n    const prevDistance = this._prevDistance;\n\n    const diff = [\n      touches[0].pageX - touches[1].pageX,\n      touches[0].pageY - touches[1].pageY\n    ];\n\n    const distance = Math.sqrt(diff[0] * diff[0] + diff[1] * diff[1]) * this._baseScale;\n    const delta = this._isFirstTouch\n      ? 0\n      : distance - prevDistance;\n\n    if (this._isFirstTouch) {\n      this.trigger(CONTROL_EVENTS.INPUT_START, {\n        srcEvent: evt,\n        isTouch: true,\n        isKeyboard: false\n      });\n    }\n\n    this._prevDistance = distance;\n    this._isFirstTouch = false;\n\n    this.trigger(CONTROL_EVENTS.CHANGE, {\n      delta,\n      isTouch: true,\n      isKeyboard: false\n    });\n  };\n\n  private _onTouchEnd = (evt: TouchEvent) => {\n    if (evt.touches.length !== 0) return;\n\n    if (!this._isFirstTouch) {\n      this.trigger(CONTROL_EVENTS.INPUT_END, {\n        isTouch: true,\n        isKeyboard: false,\n        scrolling: false\n      });\n    }\n\n    this._prevDistance = -1;\n    this._isFirstTouch = true;\n  };\n}\n\nexport default PinchInput;\n","/*\n* Copyright (c) 2023-present NAVER Corp.\n* egjs projects are licensed under the MIT license\n*/\nimport Component from \"@egjs/component\";\nimport CameraControl from \"./CameraControl\";\nimport WheelInput from \"./input/WheelInput\";\nimport PinchInput from \"./input/PinchInput\";\nimport Camera from \"../core/Camera\";\nimport Motion from \"../core/Motion\";\nimport {\n  CONTROL_EVENTS,\n  DEFAULT_ANIMATION_DURATION,\n  DEFAULT_EASING,\n  INFINITE_RANGE\n} from \"../const/internal\";\nimport { ControlEvents, InputEvents } from \"../type/internal\";\n\n/**\n * Options for {@link ZoomControl}\n * @ko {@link ZoomControl}용 옵션들\n * @since 4.0.0\n */\nexport interface ZoomControlOptions {\n  /**\n   * @copy ZoomControl#scale\n   */\n  scale: number;\n  /**\n   * @copy ZoomControl#duration\n   */\n  duration: number;\n  /**\n   * @copy ZoomControl#easing\n   */\n  easing: (x: number) => number;\n}\n\ntype ZoomControlEvents = ControlEvents<number>;\n\n/**\n * Camera's zoom control\n * @ko 카메라의 줌 값을 담당하는 컨트롤\n * @since 4.0.0\n */\nclass ZoomControl extends Component<ZoomControlEvents> implements CameraControl {\n  // Options\n  private _scale: ZoomControlOptions[\"scale\"];\n\n  // Internal values\n  private _controlEl: HTMLElement;\n  private _enableBlocked: boolean;\n  private _wheelInput: WheelInput;\n  private _pinchInput: PinchInput;\n  private _motion: Motion;\n  private _enabled: boolean;\n\n  /**\n   * @copy CameraControl#enabled\n   */\n  public get enabled() { return this._enabled; }\n  /**\n   * @hidden\n   */\n  public get enableBlocked() { return this._enableBlocked; }\n  /**\n   * @copy CameraControl#animating\n   */\n  public get animating() { return this._motion.activated; }\n  /**\n   * Current zoom value\n   * @ko 현재 줌 값\n   * @since 4.0.0\n   * @readonly\n   */\n  public get zoom() { return this._motion.val; }\n  /**\n   * @copy View360#wheelScrollable\n   */\n  public get scrollable() { return this._wheelInput.scrollable; }\n  public set scrollable(val: boolean) {\n    this._wheelInput.scrollable = val;\n  }\n  /**\n   * @hidden\n   */\n  public get range() { return this._motion.range; }\n\n  /**\n   * Scale factor of the zoom\n   * @ko 입력에 의한 줌 배율\n   * @default 1\n   * @since 4.0.0\n   */\n  public get scale() { return this._scale; }\n  public set scale(val: ZoomControlOptions[\"scale\"]) { this._scale = val; }\n\n  /**\n   * Duration of the input animation (ms)\n   * @ko 회전 애니메이션의 시간 (ms)\n   * @default 300\n   * @since 4.0.0\n   */\n  public get duration() { return this._motion.duration; }\n\n  /**\n   * Easing function of the animation\n   * @ko 회전 애니메이션에 적용할 easing 함수\n   * @default EASING.EASE_OUT_CUBIC\n   * @see EASING\n   * @since 4.0.0\n   */\n  public get easing() { return this._motion.easing; }\n\n  /**\n   * Create new ZoomControl instance\n   * @ko ZoomControl의 인스턴스를 생성합니다.\n   * @param controlEl - Element to attach handlers {@ko 입력을 받을 엘리먼트}\n   * @param enableBlocked - Whether to disable control on init {@ko 초기화 과정에서 컨트롤 활성화 여부}\n   * @param options - Options for control {@ko 컨트롤 옵션들}\n   */\n  public constructor(controlEl: HTMLElement, enableBlocked: boolean, {\n    scale = 1,\n    duration = DEFAULT_ANIMATION_DURATION,\n    easing = DEFAULT_EASING\n  }: Partial<ZoomControlOptions> = {}) {\n    super();\n\n    this._scale = scale;\n\n    this._controlEl = controlEl;\n    this._enableBlocked = enableBlocked;\n    this._wheelInput = new WheelInput();\n    this._pinchInput = new PinchInput();\n    this._motion = new Motion({\n      duration,\n      easing,\n      range: INFINITE_RANGE\n    });\n    this._enabled = false;\n\n    this._bindInputs();\n  }\n\n  public destroy(): void {\n    this.disable();\n    this._wheelInput.off();\n    this._pinchInput.off();\n    this.off();\n  }\n\n  /**\n   * @hidden\n   */\n  public update(delta: number): void {\n    if (!this._enabled) return;\n\n    const motion = this._motion;\n    motion.update(delta);\n  }\n\n  public enable(): void {\n    if (this._enabled) return;\n\n    const element = this._controlEl;\n    this._wheelInput.enable(element);\n    this._pinchInput.enable(element);\n\n    this._enabled = true;\n    this._enableBlocked = false;\n\n    this.trigger(CONTROL_EVENTS.ENABLE, { control: this, updateCursor: false });\n  }\n\n  public disable(): void {\n    if (!this._enabled) return;\n\n    this._wheelInput.disable();\n    this._pinchInput.disable();\n\n    this._enabled = false;\n\n    this.trigger(CONTROL_EVENTS.DISABLE, { updateCursor: false });\n  }\n\n  public sync(camera: Camera): void {\n    const motion = this._motion;\n    const range = camera.getZoomRange();\n\n    motion.setRange(range.min, range.max);\n    motion.reset(range.current);\n  }\n\n  private _bindInputs() {\n    const wheelInput = this._wheelInput;\n    const pinchInput = this._pinchInput;\n\n    wheelInput.on(CONTROL_EVENTS.INPUT_START, this._onInputStart);\n    wheelInput.on(CONTROL_EVENTS.CHANGE, this._onChange);\n    wheelInput.on(CONTROL_EVENTS.INPUT_END, this._onInputEnd);\n\n    pinchInput.on(CONTROL_EVENTS.INPUT_START, this._onInputStart);\n    pinchInput.on(CONTROL_EVENTS.CHANGE, this._onChange);\n    pinchInput.on(CONTROL_EVENTS.INPUT_END, this._onInputEnd);\n  }\n\n  private _onInputStart = (evt: InputEvents<number>[typeof CONTROL_EVENTS.INPUT_START]) => {\n    this.trigger(CONTROL_EVENTS.INPUT_START, {\n      ...evt,\n      inputType: \"zoom\"\n    });\n  };\n\n  private _onChange = ({ delta }: InputEvents<number>[typeof CONTROL_EVENTS.CHANGE]) => {\n    const scale = this._scale;\n    const scaledDelta = delta * scale;\n\n    this._motion.setNewEndByDelta(scaledDelta);\n  };\n\n  private _onInputEnd = (evt: InputEvents<number>[typeof CONTROL_EVENTS.INPUT_END]) => {\n    this.trigger(CONTROL_EVENTS.INPUT_END, {\n      ...evt,\n      inputType: \"zoom\"\n    });\n  };\n}\n\nexport default ZoomControl;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Component from \"@egjs/component\";\nimport { quat, vec3 } from \"gl-matrix\";\nimport * as BROWSER from \"../../const/browser\";\nimport { DEG_TO_RAD, RAD_TO_DEG } from \"../../const/internal\";\nimport { InputEvents } from \"../../type/internal\";\nimport { quatToEuler } from \"../../utils\";\n\nexport const ROTATE_CONSTANT = {\n  PITCH_DELTA: 1,\n  YAW_DELTA_BY_ROLL: 2,\n  YAW_DELTA_BY_YAW: 3\n} as const;\n\nROTATE_CONSTANT[ROTATE_CONSTANT.PITCH_DELTA] = {\n  targetAxis: [0, 1, 0],\n  meshPoint: [0, 0, 1]\n};\nROTATE_CONSTANT[ROTATE_CONSTANT.YAW_DELTA_BY_ROLL] = {\n  targetAxis: [0, 1, 0],\n  meshPoint: [1, 0, 0]\n};\nROTATE_CONSTANT[ROTATE_CONSTANT.YAW_DELTA_BY_YAW] = {\n  targetAxis: [1, 0, 0],\n  meshPoint: [0, 0, 1]\n};\n\nclass GyroInput extends Component<InputEvents<{ x: number, y: number, z: number }, MouseEvent>> {\n  public quaternion: quat;\n\n  private _ignoreRoll: boolean;\n\n  private _yawOrigin: number;\n  private _yawOffset: number;\n  private _orientation: {\n    alpha: number;\n    beta: number;\n    gamma: number;\n  }\n  private _orientationUpdated: boolean;\n  private _needsCalibrate: boolean;\n  private _screenOrientation: number;\n  private _enabled: boolean;\n\n  public get enabled() { return this._enabled; }\n  public get orientationUpdated() { return this._orientationUpdated; }\n  public get ignoreRoll() { return this._ignoreRoll; }\n  public set ignoreRoll(val: boolean) { this._ignoreRoll = val; }\n\n  public constructor() {\n    super();\n\n    this.quaternion = quat.create();\n\n    this._orientation = {\n      alpha: 0,\n      beta: 90,\n      gamma: 0\n    };\n    this._yawOrigin = 0;\n    this._yawOffset = 0;\n    this._orientationUpdated = false;\n    this._screenOrientation = 0;\n    this._needsCalibrate = true;\n    this._enabled = false;\n  }\n\n  public enable() {\n    if (this._enabled) return;\n\n    window.addEventListener(BROWSER.EVENTS.DEVICE_ORIENTATION, this._onDeviceOrientation);\n    window.addEventListener(BROWSER.EVENTS.ORIENTATION_CHANGE, this._updateScreenOrientation);\n\n    this._updateScreenOrientation();\n    this._orientationUpdated = false;\n    this._needsCalibrate = true;\n    this._enabled = true;\n  }\n\n  public disable() {\n    if (!this._enabled) return;\n\n    window.removeEventListener(BROWSER.EVENTS.DEVICE_ORIENTATION, this._onDeviceOrientation);\n    window.removeEventListener(BROWSER.EVENTS.ORIENTATION_CHANGE, this._updateScreenOrientation);\n\n    this._enabled = false;\n  }\n\n  public update() {\n    this._updateRotation();\n    this._orientationUpdated = false;\n  }\n\n  public collectDelta() {\n    if (!this._orientationUpdated) {\n      return {\n        pitch: 0,\n        yaw: 0\n      };\n    }\n\n    const prevRotation = quat.clone(this.quaternion);\n\n    this._updateRotation();\n    this._orientationUpdated = false;\n\n    return this._toEulerDelta(prevRotation, this.quaternion);\n  }\n\n  public setInitialRotation(yaw: number) {\n    this._yawOrigin = yaw;\n  }\n\n  private _onDeviceOrientation = (evt: DeviceOrientationEvent) => {\n    const prevOrientation = this._orientation;\n    const { alpha, beta, gamma } = evt;\n\n    if (\n      alpha == null\n      || beta == null\n      || gamma == null\n    ) return;\n\n    prevOrientation.alpha = alpha;\n    prevOrientation.beta = beta;\n    prevOrientation.gamma = gamma;\n\n    this._orientationUpdated = true;\n\n    if (this._needsCalibrate) {\n      this._needsCalibrate = false;\n      this._calibrateSensor();\n    }\n  };\n\n  private _calibrateSensor() {\n    const yawOrigin = this._yawOrigin;\n    const rotation = this.quaternion;\n\n    this._yawOffset = 0;\n    this._updateRotation();\n\n    const { yaw: sensorYaw } = quatToEuler(rotation);\n    this._yawOffset = sensorYaw - yawOrigin;\n    this._updateRotation();\n\n    this._needsCalibrate = false;\n  }\n\n  private _updateRotation() {\n    const rotation = this.quaternion;\n    const { alpha, beta, gamma } = this._orientation;\n\n    quat.identity(rotation);\n    quat.rotateY(rotation, rotation, (alpha - this._yawOffset) * DEG_TO_RAD);\n    quat.rotateX(rotation, rotation, beta * DEG_TO_RAD);\n    quat.rotateZ(rotation, rotation, -gamma * DEG_TO_RAD);\n\n    const screen = quat.create();\n    const screenAngle = -this._screenOrientation * 0.5 * DEG_TO_RAD;\n    const world = quat.fromValues(-Math.sqrt(0.5), 0, 0, Math.sqrt(0.5));\n\n    quat.set(screen, 0, Math.sin(screenAngle), 0, Math.cos(screenAngle));\n    quat.multiply(rotation, rotation, screen);\n    quat.multiply(rotation, rotation, world);\n\n    quat.normalize(rotation, rotation);\n  }\n\n  private _updateScreenOrientation = () => {\n    if (window.screen && window.screen.orientation && window.screen.orientation.angle !== undefined) {\n      this._screenOrientation = screen.orientation.angle;\n    } else if (window.orientation !== undefined) {\n      this._screenOrientation = window.orientation >= 0 ?\n        window.orientation : 360 + window.orientation;\n    } else {\n      this._screenOrientation = 0;\n    }\n  }\n\n  private _toEulerDelta(prevQuat: quat, currentQuat: quat) {\n    return {\n      yaw: this._getDeltaYaw(prevQuat, currentQuat),\n      pitch: this._getDeltaPitch(prevQuat, currentQuat),\n    };\n  }\n\n  private _getDeltaYaw(prvQ: quat, curQ: quat): number {\n    const yawDeltaByYaw = this._getRotationDelta(prvQ, curQ, ROTATE_CONSTANT.YAW_DELTA_BY_YAW);\n    const yawDeltaByRoll = this._getRotationDelta(prvQ, curQ, ROTATE_CONSTANT.YAW_DELTA_BY_ROLL)\n      * Math.sin(this._extractPitchFromQuat(curQ));\n\n    return yawDeltaByRoll + yawDeltaByYaw;\n  }\n\n  private _getDeltaPitch(prvQ: quat, curQ: quat): number {\n    return this._getRotationDelta(prvQ, curQ, ROTATE_CONSTANT.PITCH_DELTA);\n  }\n\n  private _getRotationDelta(prevQ: quat, curQ: quat, rotateKind: typeof ROTATE_CONSTANT[keyof typeof ROTATE_CONSTANT]) {\n    const targetAxis = vec3.fromValues(\n      ROTATE_CONSTANT[rotateKind].targetAxis[0],\n      ROTATE_CONSTANT[rotateKind].targetAxis[1],\n      ROTATE_CONSTANT[rotateKind].targetAxis[2]\n    );\n    const meshPoint = ROTATE_CONSTANT[rotateKind].meshPoint;\n\n    const prevQuaternion = quat.clone(prevQ);\n    const curQuaternion = quat.clone(curQ);\n\n    quat.normalize(prevQuaternion, prevQuaternion);\n    quat.normalize(curQuaternion, curQuaternion);\n\n    let prevPoint = vec3.fromValues(0, 0, 1);\n    let curPoint = vec3.fromValues(0, 0, 1);\n\n    vec3.transformQuat(prevPoint, prevPoint, prevQuaternion);\n    vec3.transformQuat(curPoint, curPoint, curQuaternion);\n    vec3.transformQuat(targetAxis, targetAxis, curQuaternion);\n\n    const rotateDistance = vec3.dot(targetAxis, vec3.cross(vec3.create(), prevPoint, curPoint));\n    const rotateDirection = rotateDistance > 0 ? 1 : -1;\n\n    // when counter clock wise, use vec3.fromValues(0,1,0)\n    // when clock wise, use vec3.fromValues(0,-1,0)\n    // const meshPoint1 = vec3.fromValues(0, 0, 0);\n    const meshPoint2 = vec3.fromValues(meshPoint[0], meshPoint[1], meshPoint[2]);\n\n    let meshPoint3;\n\n    if (rotateKind !== ROTATE_CONSTANT.YAW_DELTA_BY_YAW) {\n      meshPoint3 = vec3.fromValues(0, rotateDirection, 0);\n    } else {\n      meshPoint3 = vec3.fromValues(rotateDirection, 0, 0);\n    }\n\n    vec3.transformQuat(meshPoint2, meshPoint2, curQuaternion);\n    vec3.transformQuat(meshPoint3, meshPoint3, curQuaternion);\n\n    const vecU = meshPoint2;\n    const vecV = meshPoint3;\n    const vecN = vec3.create();\n\n    vec3.cross(vecN, vecU, vecV);\n    vec3.normalize(vecN, vecN);\n\n    const coefficientA = vecN[0];\n    const coefficientB = vecN[1];\n    const coefficientC = vecN[2];\n\n    // a point on the plane\n    curPoint = vec3.fromValues(meshPoint[0], meshPoint[1], meshPoint[2]);\n    vec3.transformQuat(curPoint, curPoint, curQuaternion);\n\n    // a point should project on the plane\n    prevPoint = vec3.fromValues(meshPoint[0], meshPoint[1], meshPoint[2]);\n    vec3.transformQuat(prevPoint, prevPoint, prevQuaternion);\n\n    // distance between prevPoint and the plane\n    let distance = Math.abs(\n      prevPoint[0] * coefficientA +\n      prevPoint[1] * coefficientB +\n      prevPoint[2] * coefficientC\n    );\n\n    const projectedPrevPoint = vec3.create();\n\n    vec3.subtract(projectedPrevPoint, prevPoint, vec3.scale(vec3.create(), vecN, distance));\n\n    let trigonometricRatio =\n      (projectedPrevPoint[0] * curPoint[0] +\n      projectedPrevPoint[1] * curPoint[1] +\n      projectedPrevPoint[2] * curPoint[2]) /\n      (vec3.length(projectedPrevPoint) * vec3.length(curPoint));\n\n    // defensive block\n    if (trigonometricRatio > 1) {\n      trigonometricRatio = 1;\n    }\n\n    const theta = Math.acos(trigonometricRatio);\n\n    const crossVec = vec3.cross(vec3.create(), curPoint, projectedPrevPoint);\n\n    distance = coefficientA * crossVec[0]\n      + coefficientB * crossVec[1]\n      + coefficientC * crossVec[2];\n\n    let thetaDirection: number;\n\n    if (rotateKind !== ROTATE_CONSTANT.YAW_DELTA_BY_YAW) {\n      thetaDirection = distance > 0 ? 1 : -1;\n    } else {\n      thetaDirection = distance < 0 ? 1 : -1;\n    }\n\n    const deltaRadian = theta * thetaDirection * rotateDirection;\n\n    return deltaRadian * RAD_TO_DEG;\n  }\n\n  private _extractPitchFromQuat(quaternion: quat) {\n    const baseV = vec3.fromValues(0, 0, 1);\n    vec3.transformQuat(baseV, baseV, quaternion);\n\n    return -1 * Math.atan2(\n      baseV[1],\n      Math.sqrt(Math.pow(baseV[0], 2) + Math.pow(baseV[2], 2)));\n  }\n}\n\nexport default GyroInput;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Component from \"@egjs/component\";\nimport CameraControl from \"./CameraControl\";\nimport GyroInput from \"./input/GyroInput\";\nimport Motion from \"../core/Motion\";\nimport Camera from \"../core/Camera\";\nimport * as BROWSER from \"../const/browser\";\nimport { CONTROL_EVENTS } from \"../const/internal\";\nimport { ControlEvents } from \"../type/internal\";\nimport { sensorCanBeEnabledIOS } from \"../utils\";\n\n/**\n * Options for {@link GyroControl}\n * @ko {@link GyroControl}용 옵션들\n * @since 4.0.0\n */\nexport interface GyroControlOptions {\n  /**\n   * @copy GyroControl#ignoreRoll\n   */\n  ignoreRoll: boolean;\n}\n\nexport type GyroControlEvents = ControlEvents<void>;\n\n/**\n * Camera's rotation control by gyroscope\n * @ko 자이로스코프를 이용한 회전 컨트롤\n * @since 4.0.0\n */\nclass GyroControl extends Component<GyroControlEvents> implements CameraControl {\n  // Options\n  private _ignoreRoll: GyroControlOptions[\"ignoreRoll\"];\n\n  // Internal values\n  private _enableBlocked: boolean;\n  private _input: GyroInput;\n\n  /**\n   * @copy CameraControl#enabled\n   */\n  public get enabled() { return this._input.enabled; }\n  /**\n   * @hidden\n   */\n  public get enableBlocked() { return this._enableBlocked; }\n  /**\n   * @copy CameraControl#animating\n   */\n  public get animating() {\n    return this._input.enabled && this._input.orientationUpdated;\n  }\n\n  /**\n   * When `true`, ignore gyroscope's roll(z-axis rotation) value.\n   * :::caution\n   * Setting `false` will ignore camera's range limit.\n   * Options like {@link View360Options#yawRange}, {@link View360Options#pitchRange} are ignored, and {@link CylinderProjection} also can't force it's camera range limit.\n   * :::\n   * @ko `true`일 경우 자이로스코프 입력의 roll(z축 회전)값을 무시합니다.\n   * :::caution\n   * 이 값을 `false`로 설정할 경우 카메라 범위 제약을 무시합니다.\n   * {@link View360Options#yawRange}, {@link View360Options#pitchRange}와 같은 값은 무시되며, {@link CylinderProjection} 사용시에도 범위를 벗어날 수 있습니다.\n   * :::\n   * @default true\n   * @since 4.0.0\n   */\n  public get ignoreRoll() { return this._ignoreRoll; }\n  public set ignoreRoll(val: GyroControlOptions[\"ignoreRoll\"]) { this._ignoreRoll = val; }\n\n  /**\n   * Return availability of the gyroscope.\n   * :::caution\n   * This will always return false until user permission under environments like iOS which requires user permission when using gyroscope.\n   * :::\n   * @ko 자이로스코프 사용 가능 여부를 반환합니다.\n   * :::caution\n   * iOS와 같이 GyroScope 사용시 사용자 Permission을 요구하는 환경에서는 사용자 Permission을 받기 전까지 항상 `false`입니다.\n   * :::\n   * @example\n   * ```ts\n   * const gyroAvailable = await GyroControl.isAvailable();\n   * ```\n   */\n  public static async isAvailable(): Promise<boolean> {\n    if (!DeviceMotionEvent) {\n      return false;\n    }\n\n    let onDeviceMotionChange: (evt: DeviceMotionEvent) => void;\n\n    const listenDeviceMotion = () => new Promise(res => {\n      onDeviceMotionChange = (evt: DeviceMotionEvent) => {\n        res(evt.rotationRate && evt.rotationRate.alpha != null);\n      };\n\n      window.addEventListener(BROWSER.EVENTS.DEVICE_MOTION, onDeviceMotionChange);\n    });\n\n    const timeout = () => new Promise(res => {\n      setTimeout(() => res(false), 1000);\n    });\n\n    return Promise.race([listenDeviceMotion(), timeout()])\n      .then((available: boolean) => {\n        window.removeEventListener(BROWSER.EVENTS.DEVICE_MOTION, onDeviceMotionChange);\n\n        return available;\n      });\n  }\n\n  /**\n   * Request user permission for gyroscope sensor.\n   * This can be used in environments like iOS which requires user permission when using gyroscope sensors.\n   * @ko 사용자의 sensor permission 취득을 요청합니다.\n   * iOS와 같이 gyroscope 사용시 사용자 Permission을 요구하는 환경에서 사용 가능합니다.\n   * @returns Whether the permission is granted {@ko 사용자 permission 취득 여부}\n   */\n  public static async requestSensorPermission(): Promise<boolean> {\n    // Request sensor permission, on iOS13+\n    if (sensorCanBeEnabledIOS()) {\n      return (DeviceMotionEvent as typeof DeviceMotionEvent & {\n        requestPermission: () => Promise<string>;\n      }).requestPermission().then(permissionState => {\n        return permissionState === \"granted\";\n      }).catch(() => false);\n    }\n\n    return true;\n  }\n\n  /**\n   * Create new GyroControl instance\n   * @ko GyroControl의 인스턴스를 생성합니다.\n   * @param enableBlocked - Whether to disable control on init {@ko 초기화 과정에서 컨트롤 활성화 여부}\n   * @param options - Options for control {@ko 컨트롤 옵션들}\n   */\n  public constructor(enableBlocked: boolean, {\n    ignoreRoll = true\n  }: Partial<GyroControlOptions> = {}) {\n    super();\n\n    this._enableBlocked = enableBlocked;\n    this._ignoreRoll = ignoreRoll;\n    this._input = new GyroInput();\n  }\n\n  /**\n   * @copy CameraControl#destroy\n   */\n  public destroy(): void {\n    this.disable();\n    this._input.off();\n    this.off();\n  }\n\n  /**\n   * @hidden\n   */\n  public update(camera: Camera, yaw: Motion, pitch: Motion, zoom: number) {\n    if (!this._ignoreRoll) {\n      this._updateQuaternion(camera, zoom);\n    } else {\n      this._updateYawPitch(camera, yaw, pitch, zoom);\n    }\n  }\n\n  /**\n   * @copy CameraControl#enable\n   */\n  public enable(): void {\n    if (this._input.enabled) return;\n\n    this._input.enable();\n    this._enableBlocked = false;\n    this.trigger(CONTROL_EVENTS.ENABLE, { control: this, updateCursor: false });\n  }\n\n  /**\n   * @copy CameraControl#disable\n   */\n  public disable(): void {\n    if (!this._input.enabled) return;\n\n    this._input.disable();\n    this.trigger(CONTROL_EVENTS.DISABLE, { updateCursor: false });\n  }\n\n  /**\n   * @copy CameraControl#sync\n   */\n  public sync(): void {} // eslint-disable-line @typescript-eslint/no-empty-function\n\n  private _updateYawPitch(camera: Camera, yaw: Motion, pitch: Motion, zoom: number) {\n    const input = this._input;\n    if (!input.enabled) return;\n\n    const {\n      yaw: yawDelta,\n      pitch: pitchDelta\n    } = input.collectDelta();\n\n    yaw.add(yawDelta);\n    pitch.add(pitchDelta);\n\n    camera.lookAt({\n      yaw: yaw.val,\n      pitch: pitch.val,\n      zoom\n    });\n  }\n\n  private _updateQuaternion(camera: Camera, zoom: number) {\n    const input = this._input;\n    if (!input.enabled) return;\n\n    input.update();\n    camera.rotate(input.quaternion, zoom);\n  }\n}\n\nexport default GyroControl;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport CameraControl from \"./CameraControl\";\nimport RotateControl, { RotateControlEvents, RotateControlOptions } from \"./RotateControl\";\nimport ZoomControl, { ZoomControlOptions } from \"./ZoomControl\";\nimport GyroControl, { GyroControlOptions } from \"./GyroControl\";\nimport Camera from \"../core/Camera\";\nimport CameraAnimation from \"../core/CameraAnimation\";\nimport * as BROWSER from \"../const/browser\";\nimport { CAMERA_EVENTS, CONTROL_EVENTS } from \"../const/internal\";\nimport { ValueOf } from \"../type/utils\";\nimport { getObjectOption, hfovToZoom } from \"../utils\";\n\n/**\n * Options for {@link PanoControl}\n * @ko {@link PanoControl}용 옵션들\n * @since 4.0.0\n */\nexport interface PanoControlOptions {\n  /**\n   * @copy View360#useGrabCursor\n   */\n  useGrabCursor: boolean;\n  /**\n   * @copy View360#scrollable\n   */\n  scrollable: boolean;\n  /**\n   * @copy View360#wheelScrollable\n   */\n  wheelScrollable: boolean;\n  /**\n   * @copy View360#disableContextMenu\n   */\n  disableContextMenu: boolean;\n  /**\n   * Options for {@link RotateControl}.\n   * `false` to disable rotation.\n   * @ko {@link RotateControl}용 옵션들.\n   * `false`일 경우 회전이 비활성화됩니다.\n   * @since 4.0.0\n   */\n  rotate: boolean | Partial<RotateControlOptions>;\n  /**\n   * Options for {@link ZoomControl}.\n   * `false` to disable zoom.\n   * @ko {@link ZoomControl}용 옵션들.\n   * `false`일 경우 줌이 비활성화됩니다.\n   * @since 4.0.0\n   */\n  zoom: boolean | Partial<ZoomControlOptions>;\n  /**\n   * Options for {@link GyroControl}.\n   * `false` to disable gyroscope control.\n   * @ko {@link GyroControl}용 옵션들.\n   * `false`일 경우 자이로스코프를 통한 컨트롤이 비활성화됩니다.\n   * @since 4.0.0\n   */\n  gyro: boolean | Partial<GyroControlOptions>;\n}\n\n/**\n * Panorama control for View360\n * @ko View360용 파노라마 컨트롤\n * @since 4.0.0\n */\nclass PanoControl {\n  // Options\n  private _useGrabCursor: PanoControlOptions[\"useGrabCursor\"];\n  private _disableContextMenu: PanoControlOptions[\"disableContextMenu\"];\n\n  // Internal Values\n  private _camera: Camera;\n  private _controlEl: HTMLElement;\n  private _rotateControl: RotateControl;\n  private _zoomControl: ZoomControl;\n  private _gyroControl: GyroControl;\n  private _ignoreZoomScale: boolean;\n  private _enabled: boolean;\n\n  /**\n   * @copy View360#useGrabCursor\n   */\n  public get useGrabCursor() { return this._useGrabCursor; }\n  public set useGrabCursor(val: PanoControlOptions[\"useGrabCursor\"]) {\n    if (val === this._useGrabCursor) return;\n\n    this._useGrabCursor = val;\n\n    if (val && this._enabled) {\n      this._setCursor(BROWSER.CURSOR.GRAB);\n    } else if (!val) {\n      this._setCursor(BROWSER.CURSOR.NONE);\n    }\n  }\n\n  /**\n   * @copy View360#disableContextMenu\n   */\n  public get disableContextMenu() { return this._disableContextMenu; }\n  public set disableContextMenu(val: PanoControlOptions[\"disableContextMenu\"]) {\n    if (val === this._disableContextMenu) return;\n\n    this._disableContextMenu = val;\n\n    if (val && this._enabled) {\n      this._blockContextMenu();\n    } else if (!val) {\n      this._restoreContextMenu();\n    }\n  }\n\n  /**\n   * @copy View360#disableContextMenu\n   */\n  public get scrollable() { return this._rotateControl.scrollable; }\n  public set scrollable(val: PanoControlOptions[\"scrollable\"]) { this._rotateControl.scrollable = val; }\n  /**\n   * @copy View360#disableContextMenu\n   */\n  public get wheelScrollable() { return this._zoomControl.scrollable; }\n  public set wheelScrollable(val: PanoControlOptions[\"wheelScrollable\"]) { this._zoomControl.scrollable = val; }\n  /**\n   * When `true`, disables rotation slow-down by zoom-value.\n   * @ko `true`일 경우 줌 된 정도에 따라 회전속도를 늦추는 동작을 비활성화합니다.\n   * @since 4.0.0\n   */\n  public get ignoreZoomScale() { return this._ignoreZoomScale; }\n  public set ignoreZoomScale(val: boolean) { this._ignoreZoomScale = val; }\n\n  /**\n   * Whether the control is enabled or not\n   * @ko 컨트롤 활성화 여부를 가리키는 값\n   * @readonly\n   * @since 4.0.0\n   */\n  public get enabled() { return this._enabled; }\n  /**\n   * @copy View360#rotate\n   */\n  public get rotate() { return this._rotateControl; }\n  /**\n   * @copy View360#zoom\n   */\n  public get zoom() { return this._zoomControl; }\n  /**\n   * @copy View360#gyro\n   */\n  public get gyro() { return this._gyroControl; }\n\n  /**\n   * Whether one of the controls is animating at the moment\n   * @ko 현재 컨트롤 중 하나라도 동작중인지 여부를 나타내는 값\n   * @readonly\n   * @since 4.0.0\n   */\n  public get animating() {\n    return this._rotateControl.animating\n      || this._zoomControl.animating\n      || this._gyroControl.animating;\n  }\n\n  /**\n   * Create new instance.\n   * @ko 새 인스턴스를 생성합니다.\n   * @param element - Canvas element {@ko 캔버스 엘리먼트}\n   * @param camera - Camera instance {@ko Camera 인스턴스}\n   * @param options - Options for PanoControl {@ko PanoControl 옵션들}\n   */\n  public constructor(element: HTMLElement, camera: Camera, {\n    useGrabCursor,\n    scrollable,\n    wheelScrollable,\n    disableContextMenu,\n    rotate,\n    zoom,\n    gyro\n  }: PanoControlOptions) {\n    // Bind Options\n    this._useGrabCursor = useGrabCursor;\n    this._disableContextMenu = disableContextMenu;\n\n    // Set internal values\n    this._camera = camera;\n    this._controlEl = element;\n    this._ignoreZoomScale = false;\n    this._enabled = false;\n\n    this._rotateControl = new RotateControl(element, !rotate, getObjectOption(rotate));\n    this._zoomControl = new ZoomControl(element, !zoom, getObjectOption(zoom));\n    this._gyroControl = new GyroControl(!gyro, getObjectOption(gyro));\n\n    this._rotateControl.scrollable = scrollable;\n    this._zoomControl.scrollable = wheelScrollable;\n\n    this._bindEvents();\n  }\n\n  /**\n   * Destroy the instance and remove all event listeners attached.\n   * This also will reset CSS cursor to initial.\n   * @ko 인스턴스를 삭제하고 부착된 모든 이벤트 리스너를 제거합니다.\n   * 또한, 캔버스에 적용된 CSS cursor도 제거합니다.\n   * @since 4.0.0\n   */\n  public destroy(): void {\n    this.disable();\n    this._rotateControl.destroy();\n    this._zoomControl.destroy();\n    this._setCursor(BROWSER.CURSOR.NONE);\n  }\n\n  /**\n   * Resize control to match target size.\n   * @ko 컨트롤이 내부에 캐시하고 있는 크기값을 갱신합니다.\n   * @param width New width {@ko 변경된 너비}\n   * @param height New height {@ko 변경된 높이}\n   * @since 4.0.0\n   */\n  public resize(width: number, height: number): void {\n    const camera = this._camera;\n\n    this._rotateControl.resize(camera.fov, camera.aspect, width, height);\n  }\n\n  /**\n   * Enable this control and add event listeners.\n   * @ko 컨트롤을 활성화하고 이벤트 리스너들을 추가합니다.\n   * @since 4.0.0\n   */\n  public async enable(): Promise<void> {\n    if (this._enabled) return;\n\n    if (!this._rotateControl.enableBlocked) {\n      this._rotateControl.enable();\n    }\n\n    if (!this._zoomControl.enableBlocked) {\n      this._zoomControl.enable();\n    }\n\n    if (!this._gyroControl.enableBlocked) {\n      if (await GyroControl.isAvailable()) {\n        this._gyroControl.enable();\n      }\n    }\n\n    this.sync();\n\n    if (this._disableContextMenu) {\n      this._blockContextMenu();\n    }\n\n    this._enabled = true;\n  }\n\n  /**\n   * Disable this control and remove all event listeners\n   * @ko 컨트롤을 비활성화하고 모든 이벤트 리스너들을 제거합니다.\n   * @since 4.0.0\n   */\n  public disable(): void {\n    if (!this._enabled) return;\n\n    this._rotateControl.disable();\n    this._zoomControl.disable();\n    this._gyroControl.disable();\n\n    this._restoreContextMenu();\n\n    this._enabled = false;\n  }\n\n  /**\n   * Update control by given deltaTime\n   * @ko 컨트롤을 주어진 시간만큼 업데이트합니다.\n   * @param delta Number of milisec to update {@ko 업데이트할 시간, 밀리초 단위}\n   * @since 4.0.0\n   * @internal\n   */\n  public update(delta: number): void {\n    const camera = this._camera;\n    const rotateControl = this._rotateControl;\n    const zoomControl = this._zoomControl;\n    const gyroControl = this._gyroControl;\n\n    zoomControl.update(delta);\n    const zoom = hfovToZoom(camera.fov, zoomControl.zoom);\n\n    // Slow down rotation on zoom-in\n    const zoomScale = this._ignoreZoomScale ? 1 : Math.max(zoom, 1);\n    rotateControl.setZoomScale(zoomScale);\n    rotateControl.updateRange(camera, zoom);\n    rotateControl.update(delta);\n\n    const yaw = rotateControl.yaw;\n    const pitch = rotateControl.pitch;\n\n    if (gyroControl.enabled) {\n      gyroControl.update(camera, yaw, pitch, zoom);\n    } else {\n      camera.lookAt({\n        yaw: yaw.val,\n        pitch: pitch.val,\n        zoom\n      });\n    }\n  }\n\n  /**\n   * Synchronize this control's state to current camera state\n   * @ko 컨트롤을 카메라의 현재 상태와 동기화합니다.\n   * @since 4.0.0\n   */\n  public sync(): void {\n    const camera = this._camera;\n\n    this._zoomControl.sync(camera);\n    this._rotateControl.sync(camera);\n  }\n\n  private _blockContextMenu() {\n    const el = this._controlEl;\n\n    el.addEventListener(BROWSER.EVENTS.CONTEXT_MENU, this._preventContextMenu);\n  }\n\n  private _restoreContextMenu() {\n    const el = this._controlEl;\n\n    el.removeEventListener(BROWSER.EVENTS.CONTEXT_MENU, this._preventContextMenu);\n  }\n\n  private _preventContextMenu = (evt: MouseEvent) => {\n    evt.preventDefault();\n  };\n\n  private _setCursor(newCursor: ValueOf<typeof BROWSER.CURSOR>) {\n    if (!this._useGrabCursor && newCursor !== BROWSER.CURSOR.NONE) return;\n\n    const targetEl = this._controlEl;\n    targetEl.style.cursor = newCursor;\n  }\n\n  private _bindEvents() {\n    const rotateControl = this._rotateControl;\n    const zoomControl = this._zoomControl;\n\n    rotateControl.on(CONTROL_EVENTS.INPUT_START, this._onInputStart);\n    rotateControl.on(CONTROL_EVENTS.INPUT_END, this._onInputEnd);\n    rotateControl.on(CONTROL_EVENTS.ENABLE, this._onEnable);\n    rotateControl.on(CONTROL_EVENTS.DISABLE, this._onDisable);\n    zoomControl.on(CONTROL_EVENTS.ENABLE, this._onEnable);\n    zoomControl.on(CONTROL_EVENTS.DISABLE, this._onDisable);\n    this._camera.on(CAMERA_EVENTS.ANIMATION_END, this._onCameraAnimationEnd);\n  }\n\n  private _onInputStart = (evt: RotateControlEvents[typeof CONTROL_EVENTS.INPUT_START]) => {\n    if (this._useGrabCursor && !evt.isKeyboard) {\n      this._setCursor(BROWSER.CURSOR.GRABBING);\n    }\n  };\n\n  private _onInputEnd = (evt: RotateControlEvents[typeof CONTROL_EVENTS.INPUT_END]) => {\n    if (this._useGrabCursor && !evt.isKeyboard) {\n      this._setCursor(BROWSER.CURSOR.GRAB);\n    }\n  };\n\n  private _onEnable = ({\n    control,\n    updateCursor\n  }: {\n    control: CameraControl;\n    updateCursor: boolean;\n  }) => {\n    if (updateCursor && this._useGrabCursor) {\n      this._setCursor(BROWSER.CURSOR.GRAB);\n    }\n\n    control.sync(this._camera);\n  };\n\n  private _onDisable = ({\n    updateCursor\n  }: {\n    updateCursor: boolean\n  }) => {\n    if (updateCursor) {\n      this._setCursor(BROWSER.CURSOR.NONE);\n    }\n  };\n\n  private _onCameraAnimationEnd = ({ animation }: { animation: CameraAnimation }) => {\n    animation.getFinishPromise().then(() => {\n      this.sync();\n    });\n  };\n}\n\nexport default PanoControl;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport TextureVideo from \"./TextureVideo\";\nimport TextureCube from \"./TextureCube\";\n\n/**\n * @hidden\n */\nabstract class Texture {\n  public width: number;\n  public height: number;\n  public flipY: boolean;\n  public wrapS: number;\n  public wrapT: number;\n\n  public constructor({\n    width,\n    height,\n    flipY\n  }: {\n    width: number;\n    height: number;\n    flipY: boolean;\n  }) {\n    this.width = width;\n    this.height = height;\n    this.flipY = flipY;\n    this.wrapS = WebGLRenderingContext.CLAMP_TO_EDGE;\n    this.wrapT = WebGLRenderingContext.CLAMP_TO_EDGE;\n  }\n\n  public destroy() {\n    // DO_NOTHING\n  }\n\n  public isVideo(): this is TextureVideo {\n    return false;\n  }\n\n  public isCube(): this is TextureCube {\n    return false;\n  }\n}\n\nexport default Texture;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Texture from \"./Texture\";\n\n/**\n * @hidden\n */\nclass Texture2D extends Texture {\n  public source: Exclude<TexImageSource, ImageData>;\n\n  public constructor({\n    source,\n    width,\n    height,\n    flipY\n  }: {\n    source: Exclude<TexImageSource, ImageData>;\n    width: number;\n    height: number;\n    flipY: boolean;\n  }) {\n    super({\n      width,\n      height,\n      flipY\n    });\n\n    this.source = source;\n  }\n}\n\nexport default Texture2D;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Texture2D from \"./Texture2D\";\n\n/**\n * @hidden\n */\nclass TextureVideo extends Texture2D {\n  public source: HTMLVideoElement;\n\n  public destroy() {\n    const video = this.source;\n\n    video.pause();\n    video.removeAttribute(\"src\");\n    video.load();\n  }\n\n  public isVideo(): this is TextureVideo { return true; }\n\n  public isPaused() {\n    const video = this.source;\n\n    return video.paused || video.ended || video.readyState <= 2;\n  }\n\n  public hasAudio() {\n    const video = this.source as any;\n\n    if (video.audioTracks) {\n      return video.audioTracks.length > 0;\n    }\n\n    if (video.webkitAudioDecodedByteCount != null) {\n      return video.webkitAudioDecodedByteCount > 0;\n    }\n\n    if (video.mozHasAudio != null) {\n      return video.mozHasAudio;\n    }\n\n    // We don't know whether the video has audio or not, return true\n    return true;\n  }\n}\n\nexport default TextureVideo;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Texture from \"./Texture\";\n\n/**\n * @hidden\n */\nclass TextureCube extends Texture {\n  public sources: TexImageSource[];\n\n  public constructor({\n    sources,\n    width,\n    height,\n    flipY\n  }: {\n    sources: TexImageSource[];\n    width: number;\n    height: number;\n    flipY: boolean;\n  }) {\n    super({\n      width,\n      height,\n      flipY\n    });\n\n    this.sources = sources;\n  }\n\n  public isCube(): this is TextureCube { return true; }\n}\n\nexport default TextureCube;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport ImReady from \"@egjs/imready\";\nimport Texture from \"../texture/Texture\";\nimport Texture2D from \"../texture/Texture2D\";\nimport TextureVideo from \"../texture/TextureVideo\";\nimport TextureCube from \"../texture/TextureCube\";\nimport { getObjectOption, isString } from \"../utils\";\nimport { VideoConfig } from \"../type/external\";\nimport { ProjectionOptions } from \"../projection/Projection\";\n\n/**\n * @hidden\n */\nclass TextureLoader {\n  private _loadChecker: ImReady;\n\n  constructor() {\n    this._loadChecker = new ImReady();\n  }\n\n  public async load(src: ProjectionOptions[\"src\"], video: ProjectionOptions[\"video\"]): Promise<Texture> {\n    if (video) {\n      return this.loadVideo(src, getObjectOption(video));\n    } else {\n      if (Array.isArray(src) && src.length > 1) {\n        return this.loadCubeImage(src);\n      } else {\n        const imgSrc = Array.isArray(src) ? src[0] : src;\n        return this.loadImage(imgSrc);\n      }\n    }\n  }\n\n  public async loadImage(src: string | HTMLElement): Promise<Texture2D> {\n    const images = this._toImageArray(src);\n\n    return this._load(images, resolve => {\n      const image = images[0];\n\n      resolve(new Texture2D({\n        source: image,\n        width: image.naturalWidth,\n        height: image.naturalHeight,\n        flipY: true\n      }));\n    });\n  }\n\n  public async loadCubeImage(src: Array<string | HTMLElement>): Promise<TextureCube> {\n    const images = this._toImageArray(src);\n\n    return this._load(images, resolve => {\n      resolve(new TextureCube({\n        sources: images,\n        width: images[0].naturalWidth,\n        height: images[0].naturalHeight,\n        flipY: false\n      }));\n    });\n  }\n\n  public async loadVideo(src: ProjectionOptions[\"src\"], videoConfig: Partial<VideoConfig>): Promise<TextureVideo> {\n    const config: VideoConfig = {\n      autoplay: true,\n      muted: true,\n      loop: false,\n      volume: 1,\n      ...videoConfig,\n    };\n    const video = this._toVideoElement(src, config);\n\n    return this._load([video], resolve => {\n      const { autoplay, muted } = config;\n\n      video.currentTime = 0;\n      if (autoplay && muted) {\n        video.play().catch(() => void 0);\n      }\n\n      resolve(new TextureVideo({\n        source: video,\n        width: video.videoWidth,\n        height: video.videoHeight,\n        flipY: true\n      }));\n    });\n  }\n\n  private _load<T>(content: HTMLElement[], onLoad: (resolve: (value: T) => void) => void): Promise<T> {\n    const loader = this._loadChecker;\n\n    return new Promise((resolve, reject) => {\n      loader.once(\"ready\", evt => {\n        if (evt.errorCount > 0) return;\n\n        onLoad(resolve);\n      });\n\n      loader.once(\"error\", reject);\n      loader.check(content);\n    });\n  }\n\n  private _toImageArray(src: ProjectionOptions[\"src\"]): HTMLImageElement[] {\n    const srcs = Array.isArray(src) ? src : [src];\n\n    return srcs.map(source => {\n      if (isString(source)) {\n        const imgEl = new Image();\n\n        imgEl.crossOrigin = \"anonymous\";\n        imgEl.src = source;\n\n        return imgEl;\n      } else {\n        return source as HTMLImageElement;\n      }\n    });\n  }\n\n  private _toVideoElement(src: ProjectionOptions[\"src\"], {\n    muted,\n    loop,\n    volume\n  }: VideoConfig): HTMLVideoElement {\n    if (src instanceof HTMLVideoElement) {\n      return src;\n    }\n\n    const video = document.createElement(\"video\");\n\n    video.crossOrigin = \"anonymous\";\n    video.playsInline = true;\n    video.setAttribute(\"webkit-playsinline\", \"\");\n    video.muted = muted;\n    video.volume = volume;\n    video.loop = loop;\n\n    if (Array.isArray(src)) {\n      src.forEach(source => this._appendSourceElement(video, source));\n    } else {\n      this._appendSourceElement(video, src);\n    }\n\n    const sourceCount = video.querySelectorAll(\"source\").length;\n    if (sourceCount > 0 && video.readyState < 1) {\n      video.load();\n    }\n\n    return video;\n  }\n\n  private _appendSourceElement(video: HTMLMediaElement, src: string | HTMLElement) {\n    if (src instanceof HTMLSourceElement) {\n      return src;\n    }\n\n    const sourceEl = document.createElement(\"source\");\n    sourceEl.src = src as string;\n    video.appendChild(sourceEl);\n  }\n}\n\nexport default TextureLoader;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\n/**\n * @internal\n */\nclass FrameAnimator {\n  public maxDeltaTime: number;\n\n  private _context: Window | XRSession;\n  private _rafId: number;\n  private _rafTimer: number;\n  private _lastUpdateTime: number;\n\n  /** */\n  public constructor(maxDeltaTime: number, context: Window | XRSession = window) {\n    this.maxDeltaTime = maxDeltaTime;\n\n    this._context = context;\n    this._rafId = -1;\n    this._rafTimer = -1;\n    this._lastUpdateTime = -1;\n  }\n\n  public start(callback: (delta: number, ...args: any[]) => any) {\n    const context = this._context;\n\n    // No context / callback set\n    if (!context || !callback) return;\n\n    // Animation already started\n    if (this._rafId >= 0 || this._rafTimer >= 0) return;\n\n    const loop = (_time: number, frame?: XRFrame) => {\n      const time = Date.now();\n      const delta = Math.min(time - this._lastUpdateTime, this.maxDeltaTime * 1000);\n\n      callback(delta, frame);\n\n      this._lastUpdateTime = time;\n      this._rafId = context.requestAnimationFrame(loop);\n    };\n\n    this._lastUpdateTime = Date.now();\n    this._rafId = context.requestAnimationFrame(loop);\n  }\n\n  public stop() {\n    if (this._rafId >= 0) {\n      this._context.cancelAnimationFrame(this._rafId);\n    }\n\n    if (this._rafTimer >= 0) {\n      clearTimeout(this._rafTimer);\n    }\n\n    this._rafId = -1;\n    this._rafTimer = -1;\n  }\n\n  public changeContext(context: Window | XRSession) {\n    this.stop();\n    this._context = context;\n  }\n}\n\nexport default FrameAnimator;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport * as BROWSER from \"../const/browser\";\n\n/**\n * Automatic resizer that uses both ResizeObserver and window resize event\n */\nclass AutoResizer {\n  private _enabled: boolean;\n  private _resizeObserver: ResizeObserver | null;\n  private _useResizeObserver: boolean;\n  private _onResize: () => any;\n\n  public get useResizeObserver() { return this._useResizeObserver; }\n\n  /**\n   * Returns whether AutoResizer is enabled\n   */\n  public get enabled() { return this._enabled; }\n\n  /** */\n  public constructor(useResizeObserver: boolean, onResize: () => any) {\n    this._useResizeObserver = useResizeObserver;\n\n    this._enabled = false;\n    this._resizeObserver = null;\n    this._onResize = onResize;\n  }\n\n  /**\n   * Enable resizer\n   */\n  public enable(element: HTMLElement): this {\n    if (this._enabled) {\n      this.disable();\n    }\n\n    if (this._useResizeObserver && !!window.ResizeObserver) {\n      const bbox = element.getBoundingClientRect();\n      const resizeImmediate = bbox.width !== 0 || bbox.height !== 0;\n\n      const resizeObserver = new ResizeObserver(resizeImmediate ? this._skipFirstResize : this._onResize);\n\n      resizeObserver.observe(element);\n\n      this._resizeObserver = resizeObserver;\n    } else {\n      window.addEventListener(BROWSER.EVENTS.RESIZE, this._onResize);\n    }\n\n    this._enabled = true;\n\n    return this;\n  }\n\n  /**\n   * Disable resizer\n   */\n  public disable(): this {\n    if (!this._enabled) return this;\n\n    const resizeObserver = this._resizeObserver;\n    if (resizeObserver) {\n      resizeObserver.disconnect();\n      this._resizeObserver = null;\n    } else {\n      window.removeEventListener(BROWSER.EVENTS.RESIZE, this._onResize);\n    }\n\n    this._enabled = false;\n\n    return this;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/member-ordering\n  private _skipFirstResize = (() => {\n    let isFirstResize = true;\n\n    return (() => {\n      if (isFirstResize) {\n        isFirstResize = false;\n\n        return;\n      }\n      this._onResize();\n    });\n  })();\n}\n\nexport default AutoResizer;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Camera from \"./Camera\";\nimport PanoControl from \"../control/PanoControl\";\nimport View360 from \"../View360\";\nimport * as BROWSER from \"../const/browser\";\nimport { CONTROL_EVENTS } from \"../const/internal\";\nimport { circulate, getObjectOption } from \"../utils\";\n\n/**\n * Options for {@link Autoplay}\n * @ko {@link Autoplay}용 옵션들\n * @since 4.0.0\n */\nexport interface AutoplayOptions {\n  /**\n   * @copy Autoplay#delay\n   */\n  delay: number;\n  /**\n   * @copy Autoplay#delayOnMouseLeave\n   */\n  delayOnMouseLeave: number;\n  /**\n   * @copy Autoplay#speed\n   */\n  speed: number;\n  /**\n   * @copy Autoplay#pauseOnHover\n   */\n  pauseOnHover: boolean;\n  /**\n   * @copy Autoplay#canInterrupt\n   */\n  canInterrupt: boolean;\n  /**\n   * @copy Autoplay#disableOnInterrupt\n   */\n  disableOnInterrupt: boolean;\n}\n\n/**\n * A manager class for autoplay feature.\n * @ko Autoplay 기능의 매니저 클래스.\n * @since 4.0.0\n */\nclass Autoplay {\n  // Options\n  private _delay: number;\n  private _delayOnMouseLeave: number;\n  private _speed: number;\n  private _pauseOnHover: boolean;\n  private _canInterrupt: boolean;\n  private _disableOnInterrupt: boolean;\n\n  // Internal values\n  private _enableBlocked: boolean;\n  private _camera: Camera;\n  private _control: PanoControl;\n  private _element: HTMLElement;\n  private _enabled: boolean;\n  private _interrupted: boolean;\n  private _interruptionTimer: number;\n  private _hovering: boolean;\n\n  /**\n   * Whether autoplay is enabled or not\n   * @ko 자동재생 활성화 여부를 나타내는 값\n   * @readonly\n   * @since 4.0.0\n   */\n  public get enabled() { return this._enabled; }\n  /**\n   * @hidden\n   */\n  public get enableBlocked() { return this._enableBlocked; }\n  /**\n   * Whether autoplay is updating the camera at the moment\n   * @ko 현재 자동재생이 동작중인지 여부를 나타내는 값\n   * @readonly\n   * @since 4.0.0\n   */\n  public get playing() {\n    return this._enabled && !this._interrupted;\n  }\n\n  /**\n   * Reactivation delay after mouse input in milisecond.\n   * @ko 재활성화되기까지의 시간 (밀리초 단위)\n   * @default 2000\n   * @since 4.0.0\n   */\n  public get delay() { return this._delay; }\n  public set delay(val: number) { this._delay = val; }\n\n  /**\n   * Reactivation delay after mouse leave when using {@link AutoplayOptions#pauseOnHover}\n   * @ko {@link AutoplayOptions#pauseOnHover} 사용시 마우스가 캔버스 영역을 떠난 뒤 자동재생이 다시 활성화되기까지의 시간\n   * @default 0\n   * @since 4.0.0\n   */\n  public get delayOnMouseLeave() { return this._delayOnMouseLeave; }\n  public set delayOnMouseLeave(val: number) { this._delayOnMouseLeave = val; }\n\n  /**\n   * Y-axis(yaw) rotation speed\n   * @ko Y-축 회전(yaw)의 속도\n   * @default 1\n   * @since 4.0.0\n   */\n  public get speed() { return this._speed; }\n  public set speed(val: number) { this._speed = val; }\n\n  /**\n   * Whether to pause rotation on mouse hover\n   * @ko 마우스가 캔버스 영역에 들어왔을 때 자동재생을 정지할지 여부\n   * @default false\n   * @since 4.0.0\n   */\n  public get pauseOnHover() { return this._pauseOnHover; }\n  public set pauseOnHover(val: boolean) { this._pauseOnHover = val; }\n\n  /**\n   * Whether user can interrupt the rotation with click/wheel input\n   * @ko 클릭이나 휠같은 사용자 인터랙션시 자동재생을 멈출지 여부\n   * @default true\n   * @since 4.0.0\n   */\n  public get canInterrupt() { return this._canInterrupt; }\n  public set canInterrupt(val: boolean) { this._canInterrupt = val; }\n\n  /**\n   * Whether to disable autoplay on user interrupt\n   * @ko 사용자 동작에 의해 자동재생이 정지할 때, {@link Autoplay#disable}을 호출하여 자동재생을 영구히 정지할지 여부\n   * @default false\n   * @since 4.0.0\n   */\n  public get disableOnInterrupt() { return this._disableOnInterrupt; }\n  public set disableOnInterrupt(val: boolean) { this._disableOnInterrupt = val; }\n\n  /**\n   * Create new AutoPlayer instance\n   * @param camera - Instance of the {@link Camera} {@ko Camera의 인스턴스}\n   * @param element - Canvas element {@ko 캔버스 엘리먼트}\n   * @param options - Autoplay options {@ko 자동재생 옵션들}\n   * @since 4.0.0\n   */\n  public constructor(viewer: View360, element: HTMLElement, options: boolean | Partial<AutoplayOptions>) {\n    this._camera = viewer.camera;\n    this._control = viewer.control;\n    this._element = element;\n\n    this._enabled = false;\n    this._interrupted = false;\n    this._interruptionTimer = -1;\n    this._hovering = false;\n\n    const {\n      delay = 2000,\n      delayOnMouseLeave = 0,\n      speed = 1,\n      pauseOnHover = false,\n      canInterrupt = true,\n      disableOnInterrupt = false\n    } = getObjectOption(options);\n\n    this._enableBlocked = !options;\n    this._delay = delay;\n    this._delayOnMouseLeave = delayOnMouseLeave;\n    this._speed = speed;\n    this._pauseOnHover = pauseOnHover;\n    this._canInterrupt = canInterrupt;\n    this._disableOnInterrupt = disableOnInterrupt;\n  }\n\n  /**\n   * Destroy the instance and remove all event listeners attached\n   * @ko 인스턴스를 제거하고 연결된 모든 이벤트 핸들러를 삭제합니다.\n   * @since 4.0.0\n   */\n  public destroy(): void {\n    this.disable();\n  }\n\n  /**\n   * Rotate camera by given deltaTime\n   * @ko 주어진 deltaTime만큼 카메라를 회전시킵니다.\n   * @param deltaTime - Number of milisec to update {@ko 업데이트할 시간, 밀리초 단위}\n   * @since 4.0.0\n   */\n  public update(deltaTime: number): void {\n    if (!this._enabled) return;\n    if (this._interrupted) {\n      if (this._disableOnInterrupt) {\n        this.disable();\n      }\n\n      return;\n    }\n\n    const camera = this._camera;\n    const delta = -this._speed * deltaTime / 100;\n\n    camera.yaw = circulate(camera.yaw + delta, 0, 360);\n  }\n\n  /**\n   * Enable autoplay and add event listeners.\n   * @ko 자동재생을 활성화하고 이벤트리스너들을 추가합니다.\n   * @since 4.0.0\n   */\n  public enable(): void {\n    const control = this._control;\n    const element = this._element;\n\n    if (this._enabled || control.gyro.enabled) return;\n\n    control.rotate.on(CONTROL_EVENTS.INPUT_START, this._onInputStart);\n    control.rotate.on(CONTROL_EVENTS.INPUT_END, this._onInputEnd);\n\n    control.zoom.on(CONTROL_EVENTS.INPUT_START, this._onInputStart);\n    control.zoom.on(CONTROL_EVENTS.INPUT_END, this._onInputEnd);\n\n    control.gyro.on(CONTROL_EVENTS.ENABLE, this._onGyroEnable);\n\n    element.addEventListener(BROWSER.EVENTS.MOUSE_ENTER, this._onMouseEnter, false);\n    element.addEventListener(BROWSER.EVENTS.MOUSE_LEAVE, this._onMouseLeave, false);\n\n    this._enabled = true;\n    this._enableBlocked = false;\n  }\n\n  /**\n   * Enable autoplay after current `delay` value.\n   * @ko 현재의 `delay`값만큼 시간이 지난 다음에 자동재생을 활성화합니다.\n   * @since 4.0.0\n   */\n  public enableAfterDelay() {\n    this.enable();\n    this._interrupted = true;\n    this._setUninterruptedAfterDelay(this._delay);\n  }\n\n  /**\n   * Disable autoplay and remove all event handlers.\n   * @ko 자동재생을 비활성화하고 모든 이벤트 핸들러를 제거합니다.\n   * @since 4.0.0\n   */\n  public disable(): void {\n    if (!this._enabled) return;\n\n    const control = this._control;\n    const element = this._element;\n\n    control.rotate.off(CONTROL_EVENTS.INPUT_START, this._onInputStart);\n    control.rotate.off(CONTROL_EVENTS.INPUT_END, this._onInputEnd);\n\n    control.zoom.off(CONTROL_EVENTS.INPUT_START, this._onInputStart);\n    control.zoom.off(CONTROL_EVENTS.INPUT_END, this._onInputEnd);\n\n    control.gyro.off(CONTROL_EVENTS.ENABLE, this._onGyroEnable);\n\n    element.removeEventListener(BROWSER.EVENTS.MOUSE_ENTER, this._onMouseEnter, false);\n    element.removeEventListener(BROWSER.EVENTS.MOUSE_LEAVE, this._onMouseLeave, false);\n\n    this._enabled = false;\n    this._interrupted = false;\n    this._hovering = false;\n\n    this._clearTimeout();\n  }\n\n  private _onInputStart = () => {\n    if (!this._canInterrupt) return;\n\n    this._interrupted = true;\n    this._clearTimeout();\n  };\n\n  private _onInputEnd = () => {\n    this._setUninterruptedAfterDelay(this._delay);\n  };\n\n  private _onGyroEnable = () => {\n    this.disable();\n  };\n\n  private _onMouseEnter = () => {\n    if (!this._pauseOnHover) return;\n    this._interrupted = true;\n    this._hovering = true;\n  };\n\n  private _onMouseLeave = () => {\n    if (!this._pauseOnHover) return;\n    this._hovering = false;\n    this._setUninterruptedAfterDelay(this._delayOnMouseLeave);\n  };\n\n  private _setUninterruptedAfterDelay(delay: number): void {\n    if (this._hovering) return;\n\n    this._clearTimeout();\n\n    if (delay > 0) {\n      this._interruptionTimer = window.setTimeout(() => {\n        this._interrupted = false;\n        this._interruptionTimer = -1;\n      }, delay);\n    } else {\n      this._interrupted = false;\n      this._interruptionTimer = -1;\n    }\n  }\n\n  private _clearTimeout(): void {\n    if (this._interruptionTimer >= 0) {\n      window.clearTimeout(this._interruptionTimer);\n      this._interruptionTimer = -1;\n    }\n  }\n}\n\nexport default Autoplay;\n","import { mat4 } from \"gl-matrix\";\nimport Component from \"@egjs/component\";\nimport WebGLContext from \"./WebGLContext\";\nimport GyroControl from \"../control/GyroControl\";\nimport * as BROWSER from \"../const/browser\";\nimport { SESSION_VR, XR_REFERENCE_SPACE } from \"../const/internal\";\nimport { EVENTS } from \"../const/external\";\n\ninterface XRSessionOptions extends XRSessionInit {\n  [key: string]: any;\n}\n\n/**\n * WebXR manager class\n * @ko WebXR 매니저 클래스\n * @since 4.0.0\n */\nclass XRManager extends Component<{\n  /**\n   * An event that fires on entering VR session\n   * @ko VR 세션 진입시에 트리거되는 이벤트\n   * @eventName vrStart\n   * @eventOf XRManager\n   * @version 4.0.0\n   */\n  [EVENTS.VR_START]: {\n    session: XRSession;\n  };\n  /**\n   * An event that fires on exiting VR session\n   * @ko VR 세션에서 나갈 때 트리거되는 이벤트\n   * @eventName vrEnd\n   * @eventOf XRManager\n   * @version 4.0.0\n   */\n  [EVENTS.VR_END]: void;\n}> {\n  private _ctx: WebGLContext;\n  private _xrSession: XRSession | null;\n  private _xrRefSpace: XRReferenceSpace | null;\n  private _options: XRSessionOptions;\n\n  /**\n   * Create new instance.\n   * 새 인스턴스를 생성합니다.\n   * @param ctx - Instance of WebGL context helper {@ko WebGL 콘텍스트 헬퍼의 인스턴스}\n   * @param options - Options {@ko 옵션들}\n   */\n  public constructor(ctx: WebGLContext, options: XRSessionOptions = {}) {\n    super();\n\n    this._xrSession = null;\n    this._xrRefSpace = null;\n    this._ctx = ctx;\n    this._options = options;\n  }\n\n  /**\n   * Destroy instance and end XR session if there was any.\n   * @ko 인스턴스를 제거하고, XR 세션이 존재할 경우 종료합니다.\n   * @since 4.0.0\n   */\n  public destroy = () => {\n    this.exit();\n    this.off();\n  };\n\n  /**\n   * Returns WebXR availability.\n   * @ko WebXR 사용 가능 여부를 반환합니다.\n   * @since 4.0.0\n   */\n  public async isAvailable(): Promise<boolean> {\n    // eslint-disable-next-line compat/compat\n    const xr = window.navigator.xr;\n    if (!xr) return false;\n\n    return xr.isSessionSupported(SESSION_VR)\n      .then(available => {\n        return available;\n      }).catch(() => {\n        return false;\n      });\n  }\n\n  /**\n   * Enter VR session\n   * @ko VR 세션에 진입합니다.\n   * @since 4.0.0\n   */\n  public async enter() {\n    const ctx = this._ctx;\n\n    // eslint-disable-next-line compat/compat\n    const xr = window.navigator.xr;\n    if (!xr) return;\n\n    await GyroControl.requestSensorPermission();\n\n    const options = {\n      ...{\n        requiredFeatures: [XR_REFERENCE_SPACE]\n      },\n      ...this._options\n    };\n\n    await ctx.makeXRCompatible();\n\n    const session = await xr.requestSession(SESSION_VR, options);\n    ctx.bindXRLayer(session);\n\n    const refSpace = await session.requestReferenceSpace(XR_REFERENCE_SPACE);\n\n    this._setSession(session, refSpace);\n\n    this.trigger(EVENTS.VR_START, {\n      session\n    });\n  }\n\n  /**\n   * Exit VR session\n   * @ko VR 세션에서 나갑니다.\n   * @since 4.0.0\n   */\n  public exit() {\n    const xrSession = this._xrSession;\n\n    if (xrSession) {\n      xrSession.end()\n        .catch(() => void 0);\n    }\n\n    this._xrSession = null;\n    this._xrRefSpace = null;\n  }\n\n  /**\n   * @hidden\n   */\n  public canRender(frame: XRFrame) {\n    const refSpace = this._xrRefSpace;\n\n    if (!refSpace) return false;\n\n    const pose = frame.getViewerPose(refSpace);\n\n    return !!pose;\n  }\n\n  /**\n   * @hidden\n   */\n  public getEyeParams(frame: XRFrame): Array<{\n    viewport: XRViewport;\n    vMatrix: mat4;\n    pMatrix: mat4;\n  }> | null {\n    const session = frame.session;\n    const pose = frame.getViewerPose(this._xrRefSpace!);\n\n    if (!pose) return null;\n\n    const glLayer = session.renderState.baseLayer;\n\n    if (!glLayer) return null;\n\n    return pose.views.map(view => {\n      const viewport = glLayer.getViewport(view)!;\n      const vMatrix = view.transform.inverse.matrix;\n\n      return {\n        viewport,\n        vMatrix,\n        pMatrix: view.projectionMatrix\n      };\n    });\n  }\n\n  private _setSession(session: XRSession, refSpace: XRReferenceSpace) {\n    this._xrSession = session;\n    this._xrRefSpace = refSpace;\n\n    session.addEventListener(BROWSER.EVENTS.XR_END, this._onSessionEnd);\n  }\n\n  private _onSessionEnd = () => {\n    this.exit();\n    this.trigger(EVENTS.VR_END);\n  }\n}\n\nexport default XRManager;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { vec3 } from \"gl-matrix\";\n\n/**\n * Hotspot data\n * @ko 핫스팟 데이터\n * @since 4.0.0\n */\nclass Hotspot {\n  /**\n   * HTMLElement of the hotspot\n   * @ko 핫스팟의 HTMLElement\n   * @since 4.0.0\n   */\n  public readonly element: HTMLElement;\n  /**\n   * Position to render hotspot\n   * @ko 핫스팟을 렌더링할 위치\n   * @since 4.0.0\n   */\n  public readonly position: vec3;\n\n  public constructor(element: HTMLElement, position: vec3) {\n    this.element = element;\n    this.position = position;\n  }\n}\n\nexport default Hotspot;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { vec2, vec3 } from \"gl-matrix\";\nimport Hotspot from \"./Hotspot\";\nimport Camera from \"../core/Camera\";\nimport WebGLRenderer from \"../core/WebGLRenderer\";\nimport View360Error from \"../core/View360Error\";\nimport { getNullableElement } from \"../utils\";\nimport ERROR from \"../const/error\";\nimport { DEFAULT_CLASS } from \"../const/external\";\nimport { DEG_TO_RAD } from \"../const/internal\";\n\n/**\n * Options for {@link HotspotRenderer}\n * @ko {@link HotspotRenderer}용 옵션들\n * @since 4.0.0\n */\nexport interface HotspotOptions {\n  /**\n   * Apply scale for hotspots, makes their size sync with background panorama image.\n   * @ko 핫스팟에 스케일을 적용해서 배경 파노라마 이미지의 크기 변화와 동일하게 크기를 조절합니다.\n   * @since 4.0.0\n   */\n  zoom: boolean;\n}\n\n/**\n * Hotspot renderer\n * @ko Hotspot 렌더러\n * @since 4.0.0\n */\nclass HotspotRenderer {\n  // Options\n  private _zoom: HotspotOptions[\"zoom\"];\n\n  // Internal properties\n  private _containerEl: HTMLElement | null;\n  private _renderer: WebGLRenderer;\n  private _hotspots: Hotspot[];\n\n  /**\n   * Create new instance\n   * @ko 새 인스턴스를 생성합니다.\n   * @param rootEl - Container element for hotspots {@ko 핫스팟들의 컨테이너 엘리먼트}\n   * @param renderer - instance of WebGLRenderer {@ko WebGLRenderer의 인스턴스}\n   * @param options - Hotspot options {@ko Hotspot 옵션들 }\n   */\n  public constructor(rootEl: HTMLElement, renderer: WebGLRenderer, {\n    zoom = false\n  }: Partial<HotspotOptions>) {\n    this._containerEl = getNullableElement(`.${DEFAULT_CLASS.HOTSPOT_CONTAINER}`, rootEl);\n    this._renderer = renderer;\n    this._hotspots = [];\n\n    this._zoom = zoom;\n  }\n\n  /**\n   * Refresh hotspots by collecting hotspot elements from current hotspot root element\n   * @ko 현재 핫스팟 루트 엘리먼트 내에서 핫스팟 엘리먼트들을 수집하여 갱신합니다.\n   * @throws {ERROR_CODES.INSUFFICIENT_ARGS} if data-position doesn't include all x, y, z values {@ko data-position이 x, y, z좌표를 전부 포함하고 있지 않을 때}\n   */\n  public refresh() {\n    const container = this._containerEl;\n    if (!container) return;\n\n    const hotspotEls = [].slice.apply(container.querySelectorAll(`.${DEFAULT_CLASS.HOTSPOT}`)) as HTMLElement[];\n    this._hotspots = hotspotEls.map(el => this._parseHotspot(el));\n  }\n\n  /**\n   * Render hotspots\n   * @ko 핫스팟들을 렌더링합니다.\n   * @param camera - Instance of Camera {@ko Camera의 인스턴스}\n   */\n  public render(camera: Camera) {\n    const hotspots = this._hotspots;\n    const halfWidth = this._renderer.width * 0.5;\n    const halfHeight = this._renderer.height * 0.5;\n    const zoom = camera.zoom;\n    const centerTransform = \"translate(-50%, -50%)\";\n    const zoomTransform = this._zoom ? `scale(${zoom})` : \"\";\n\n    hotspots.forEach(hotspot => {\n      const position = hotspot.position;\n      const relPos = vec3.create();\n\n      vec3.copy(relPos, position);\n      vec3.transformMat4(relPos, relPos, camera.viewMatrix);\n      vec3.transformMat4(relPos, relPos, camera.projectionMatrix);\n\n      if (relPos[2] > 1 || relPos[2] < 0) {\n        hotspot.element.classList.remove(DEFAULT_CLASS.HOTSPOT_VISIBLE);\n        return;\n      }\n\n      const screenPos = vec2.fromValues(\n        relPos[0] * halfWidth + halfWidth,\n        -relPos[1] * halfHeight + halfHeight\n      );\n\n      hotspot.element.classList.add(DEFAULT_CLASS.HOTSPOT_VISIBLE);\n      hotspot.element.style.transform = [\n        centerTransform,\n        `translate(${screenPos[0]}px, ${screenPos[1]}px)`,\n        zoomTransform\n      ].join(\" \");\n    });\n  }\n\n  private _parseHotspot(element: HTMLElement): Hotspot {\n    const yawStr = element.dataset.yaw;\n    const pitchStr = element.dataset.pitch;\n    const positionStr = element.dataset.position;\n\n    if (yawStr || pitchStr) {\n      const yaw = yawStr ? parseFloat(yawStr) : 0;\n      const pitch = pitchStr ? parseFloat(pitchStr) : 0;\n\n      const position = this._yawPitchToVec3(yaw, pitch);\n\n      return new Hotspot(element, position);\n    } else if (positionStr) {\n      const pos: number[] = positionStr.split(\" \").map(val => parseFloat(val));\n      if (pos.length < 3) {\n        throw new View360Error(ERROR.MESSAGES.INSUFFICIENT_ARGS(positionStr, \"hotspot attribute \\\"data-position\\\"\"), ERROR.CODES.INSUFFICIENT_ARGS);\n      }\n\n      return new Hotspot(element, vec3.fromValues(pos[0], pos[1], pos[2]));\n    } else {\n      // Place hotspot at yaw: 0, pitch: 0\n      const defaultPos = vec3.fromValues(0, 0, -1);\n\n      return new Hotspot(element, defaultPos);\n    }\n  }\n\n  private _yawPitchToVec3(yaw: number, pitch: number) {\n    const yawRad = yaw * DEG_TO_RAD;\n    const pitchRad = pitch * DEG_TO_RAD;\n    const position = vec3.create();\n\n    position[1] = Math.sin(pitchRad);\n    position[2] = Math.cos(pitchRad);\n\n    position[0] = position[2] * Math.sin(-yawRad);\n    position[2] = -position[2] * Math.cos(-yawRad);\n\n    return position;\n  }\n}\n\nexport default HotspotRenderer;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Geometry from \"../geometry/Geometry\";\nimport { VAO } from \"../type/internal\";\n\n/**\n * @hidden\n */\nclass VertexArrayObject {\n  public readonly obj: VAO | null;\n  public readonly geometry: Geometry;\n  public readonly buffers: {\n    indicies: WebGLBuffer;\n    position: WebGLBuffer;\n    uv: WebGLBuffer;\n  }\n\n  public get count() { return this.geometry.indicies.count; }\n\n  constructor(obj: VAO | null, geometry: Geometry, buffers: VertexArrayObject[\"buffers\"]) {\n    this.obj = obj;\n    this.geometry = geometry;\n    this.buffers = buffers;\n  }\n}\n\nexport default VertexArrayObject;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { mat4 } from \"gl-matrix\";\nimport Uniform from \"../uniform/Uniform\";\nimport Camera from \"./Camera\";\nimport Object3D from \"./Object3D\";\nimport ShaderProgram from \"./ShaderProgram\";\nimport View360Error from \"./View360Error\";\nimport VertexArrayObject from \"./VertexArrayObject\";\nimport VertexData from \"./VertexData\";\nimport Texture from \"../texture/Texture\";\nimport Geometry from \"../geometry/Geometry\";\nimport * as BROWSER from \"../const/browser\";\nimport ERROR from \"../const/error\";\nimport { DEFAULT_CLASS } from \"../const/external\";\nimport { UniformLocations } from \"../type/internal\";\n\n/**\n * @hidden\n */\nclass WebGLContext {\n  private _canvas: HTMLCanvasElement;\n  private _gl: WebGLRenderingContext | WebGL2RenderingContext;\n  private _contextLost: boolean;\n  private _maxTextureSize: number;\n  private _isWebGL2: boolean;\n  private _debug: boolean;\n  private _extensions: {\n    vao: OES_vertex_array_object | null;\n    loseContext: WEBGL_lose_context | null;\n  };\n\n  public get canvas() { return this._canvas; }\n  public get maxTextureSize() { return this._maxTextureSize; }\n  public get isWebGL2() { return this._isWebGL2; }\n  public get supportVAO() { return this._isWebGL2 || !!this._extensions.vao; }\n  public get lost() { return this._contextLost; }\n  public get debug() { return this._debug; }\n\n  public constructor(canvas: HTMLCanvasElement, debug: boolean) {\n    this._canvas = canvas;\n    this._contextLost = false;\n    this._debug = debug;\n    this._extensions = {\n      vao: null,\n      loseContext: null\n    };\n  }\n\n  public init() {\n    const canvas = this._canvas;\n\n    const { gl, isWebGL2 } = this._getContext(canvas);\n\n    this._gl = gl;\n    this._maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    this._isWebGL2 = isWebGL2;\n\n    if (!this._isWebGL2) {\n      this._extensions.vao = gl.getExtension(\"OES_vertex_array_object\");\n    }\n\n    this._extensions.loseContext = gl.getExtension(\"WEBGL_lose_context\");\n\n    canvas.addEventListener(BROWSER.EVENTS.CONTEXT_LOST, this._onContextLost);\n    canvas.addEventListener(BROWSER.EVENTS.CONTEXT_RESTORED, this._onContextRestore);\n\n    // gl.enable(gl.DEPTH_TEST);\n  }\n\n  public destroy() {\n    const gl = this._gl;\n    const canvas = this._canvas;\n\n    if (gl) {\n      // gl is not defined when destroy is called before init\n      gl.bindBuffer(gl.ARRAY_BUFFER, null);\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    }\n\n    canvas.removeEventListener(BROWSER.EVENTS.CONTEXT_LOST, this._onContextLost);\n    canvas.removeEventListener(BROWSER.EVENTS.CONTEXT_RESTORED, this._onContextRestore);\n  }\n\n  public forceLoseContext() {\n    const extension = this._extensions.loseContext;\n\n    if (!extension) return;\n\n    extension.loseContext();\n  }\n\n  public forceRestoreContext() {\n    const extension = this._extensions.loseContext;\n\n    if (!extension) return;\n\n    extension.restoreContext();\n  }\n\n  public clear() {\n    const gl = this._gl;\n\n    gl.clear(gl.COLOR_BUFFER_BIT);\n  }\n\n  public resize() {\n    const gl = this._gl;\n\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n  }\n\n  public viewport(x: number, y: number, width: number, height: number) {\n    const gl = this._gl;\n\n    gl.viewport(x, y, width, height);\n  }\n\n  public createVAO(geometry: Geometry, shaderProgram: ShaderProgram) {\n    const nativeVAO = this._createNativeVAO();\n\n    const vao = new VertexArrayObject(nativeVAO, geometry, {\n      indicies: this._createBuffer(),\n      position: this._createBuffer(),\n      uv: this._createBuffer()\n    });\n\n    if (nativeVAO) {\n      this._bindNativeVAO(nativeVAO);\n      this._supplyGeometryData(vao, shaderProgram);\n      this._bindNativeVAO(null);\n      this._unbindBuffers();\n    }\n\n    return vao;\n  }\n\n  public draw(vao: VertexArrayObject, shaderProgram: ShaderProgram) {\n    const gl = this._gl;\n\n    if (vao.obj) {\n      this._bindNativeVAO(vao.obj);\n    } else {\n      this._supplyGeometryData(vao, shaderProgram);\n    }\n\n    gl.drawElements(gl.TRIANGLES, vao.count, gl.UNSIGNED_SHORT, 0);\n\n    if (vao.obj) {\n      this._bindNativeVAO(null);\n    } else {\n      this._unbindBuffers();\n    }\n  }\n\n  public releaseVAO(vao: VertexArrayObject) {\n    if (vao.obj) {\n      this._deleteNativeVAO(vao.obj);\n    }\n\n    this._deleteBuffer(vao.buffers.indicies);\n    this._deleteBuffer(vao.buffers.position);\n    this._deleteBuffer(vao.buffers.uv);\n  }\n\n  public getUniformLocations<T extends Record<string, Uniform>>(program: WebGLProgram, uniforms: T): UniformLocations<T> {\n    const gl = this._gl;\n\n    const uniformLocations = Object.keys(uniforms).reduce((locations, key) => {\n      locations[key as keyof T] = gl.getUniformLocation(program, key)!;\n\n      return locations;\n    }, {} as UniformLocations<T>);\n\n    return {\n      ...this._getCommonUniformLocations(program),\n      ...uniformLocations\n    };\n  }\n\n  public updateCommonUniforms(entity: Object3D, camera: Camera, shaderProgram: ShaderProgram) {\n    const gl = this._gl;\n\n    const uniformLocations = shaderProgram.uniformLocations;\n\n    // We're using \"matrix\"(=local matrix) here for efficiency\n    // As projection doesn't require world matrix, as it doesn't have any parent or child\n    const matrix = entity.matrix;\n    const mvMatrix = mat4.create();\n    mat4.multiply(mvMatrix, camera.viewMatrix, matrix);\n\n    gl.uniformMatrix4fv(uniformLocations.uMVMatrix, false, mvMatrix);\n    gl.uniformMatrix4fv(uniformLocations.uPMatrix, false, camera.projectionMatrix);\n  }\n\n  public updateVRUniforms(shaderProgram: ShaderProgram, mvMatrix: mat4, pMatrix: mat4, eyeIndex: number) {\n    const gl = this._gl;\n\n    const uniformLocations = shaderProgram.uniformLocations;\n\n    gl.uniformMatrix4fv(uniformLocations.uMVMatrix, false, mvMatrix);\n    gl.uniformMatrix4fv(uniformLocations.uPMatrix, false, pMatrix);\n\n    if (uniformLocations.uEye) {\n      gl.uniform1f(uniformLocations.uEye, eyeIndex);\n    }\n  }\n\n  public updateUniforms(shaderProgram: ShaderProgram) {\n    const gl = this._gl;\n\n    const uniforms = shaderProgram.uniforms;\n    const uniformLocations = shaderProgram.uniformLocations;\n\n    for (const key in uniforms) {\n      const uniform = uniforms[key];\n      const location = uniformLocations[key];\n\n      if (!uniform) continue;\n\n      if (uniform.needsUpdate) {\n        uniform.update(gl, location, this._isWebGL2);\n      }\n    }\n  }\n\n  public releaseShaderResources(shaderProgram: ShaderProgram) {\n    const gl = this._gl;\n\n    const uniforms = shaderProgram.uniforms;\n\n    for (const key in uniforms) {\n      const uniform = uniforms[key];\n\n      if (!uniform) continue;\n\n      if (uniform.needsUpdate) {\n        uniform.destroy(gl);\n      }\n    }\n\n    gl.deleteProgram(shaderProgram.program);\n  }\n\n  public useProgram(shaderProgram: ShaderProgram) {\n    const gl = this._gl;\n\n    gl.useProgram(shaderProgram.program);\n  }\n\n  public createProgram(vertexShader: string, fragmentShader: string) {\n    const gl = this._gl;\n    const program = gl.createProgram()!;\n\n    const vs = this._compileShader(gl.VERTEX_SHADER, vertexShader);\n    const fs = this._compileShader(gl.FRAGMENT_SHADER, fragmentShader);\n\n    gl.attachShader(program, vs);\n    gl.attachShader(program, fs);\n    gl.bindAttribLocation(program, 0, \"position\");\n    gl.bindAttribLocation(program, 1, \"uv\");\n    gl.linkProgram(program);\n\n    if (this._debug && !gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      let shaderLog: string | null = null;\n\n      if (!gl.getShaderParameter(vs, gl.COMPILE_STATUS)) {\n        shaderLog = gl.getShaderInfoLog(vs);\n      } else if (!gl.getShaderParameter(fs, gl.COMPILE_STATUS)) {\n        shaderLog = gl.getShaderInfoLog(fs);\n      }\n\n      throw new View360Error(ERROR.MESSAGES.FAILED_LINKING_PROGRAM(gl.getProgramInfoLog(program), shaderLog), ERROR.CODES.FAILED_LINKING_PROGRAM);\n    }\n\n    gl.deleteShader(vs);\n    gl.deleteShader(fs);\n\n    return program;\n  }\n\n  public createWebGLTexture(texData: Texture): WebGLTexture {\n    const gl = this._gl;\n    const texture = gl.createTexture()!;\n\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, texData.wrapS);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, texData.wrapT);\n\n    if (!texData.isVideo() && this._isWebGL2) {\n      const gl2 = gl as WebGL2RenderingContext;\n\n      gl2.texStorage2D(gl2.TEXTURE_2D, 1, gl2.RGBA8, texData.width, texData.height);\n    }\n\n    return texture;\n  }\n\n  public createWebGLCubeTexture(texData: Texture, size: number): WebGLTexture {\n    const gl = this._gl;\n    const texture = gl.createTexture()!;\n\n    gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture);\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, texData.wrapS);\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, texData.wrapT);\n\n    if (this._isWebGL2) {\n      const gl2 = gl as WebGL2RenderingContext;\n\n      gl2.texStorage2D(gl2.TEXTURE_CUBE_MAP, 1, gl2.RGBA8, size, size);\n    }\n\n    return texture;\n  }\n\n  public async makeXRCompatible() {\n    const gl = this._gl;\n    const attributes = gl.getContextAttributes();\n\n    if (attributes && attributes.xrCompatible !== true) {\n      await gl.makeXRCompatible();\n    }\n  }\n\n  public bindXRLayer(session: XRSession) {\n    const gl = this._gl;\n    const xrLayer = new XRWebGLLayer(session, gl);\n    session.updateRenderState({ baseLayer: xrLayer });\n  }\n\n  public bindXRFrame(frame: XRFrame) {\n    const gl = this._gl;\n    const session = frame.session;\n    const baseLayer = session.renderState.baseLayer!;\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, baseLayer.framebuffer);\n  }\n\n  public useDefaultFrameBuffer() {\n    const gl = this._gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  }\n\n  private _createBuffer(): WebGLBuffer {\n    return this._gl.createBuffer()!;\n  }\n\n  private _deleteBuffer(buffer: WebGLBuffer) {\n    return this._gl.deleteBuffer(buffer);\n  }\n\n  private _createNativeVAO() {\n    const gl = this._gl;\n\n    if (this._isWebGL2) {\n      return (gl as WebGL2RenderingContext).createVertexArray()!;\n    } else {\n      const ext = this._extensions.vao;\n\n      return ext?.createVertexArrayOES() || null;\n    }\n  }\n\n  private _bindNativeVAO(vao: WebGLVertexArrayObject | null) {\n    const gl = this._gl;\n\n    if (this._isWebGL2) {\n      (gl as WebGL2RenderingContext).bindVertexArray(vao);\n    } else {\n      const ext = this._extensions.vao;\n\n      ext?.bindVertexArrayOES(vao);\n    }\n  }\n\n  private _deleteNativeVAO(vao: WebGLVertexArrayObject | null) {\n    const gl = this._gl;\n\n    if (this._isWebGL2) {\n      (gl as WebGL2RenderingContext).deleteVertexArray(vao);\n    } else {\n      const ext = this._extensions.vao;\n\n      ext?.deleteVertexArrayOES(vao);\n    }\n  }\n\n  private _supplyGeometryData(vao: VertexArrayObject, shaderProgram: ShaderProgram) {\n    const geometry = vao.geometry;\n\n    this._supplyIndiciesData(geometry.indicies, vao.buffers.indicies);\n    this._supplyAttributeData(geometry.vertices, shaderProgram.program, \"position\", vao.buffers.position);\n    this._supplyAttributeData(geometry.uvs, shaderProgram.program, \"uv\", vao.buffers.uv);\n  }\n\n  private _unbindBuffers() {\n    const gl = this._gl;\n\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n  }\n\n  private _supplyIndiciesData(indicies: VertexData<Uint16Array>, buffer: WebGLBuffer) {\n    const gl = this._gl;\n\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indicies.data, gl.STATIC_DRAW);\n  }\n\n  private _supplyAttributeData(attribute: VertexData<Float32Array>, program: WebGLProgram, name: string, buffer: WebGLBuffer) {\n    const gl = this._gl;\n    const attribLocation = gl.getAttribLocation(program, name);\n\n    // Attribute not used\n    if (attribLocation < 0) return;\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, attribute.data, gl.STATIC_DRAW);\n    gl.vertexAttribPointer(attribLocation, attribute.itemSize, gl.FLOAT, false, 0, 0);\n    gl.enableVertexAttribArray(attribLocation);\n  }\n\n  private _compileShader(type: number, src: string) {\n    const gl = this._gl;\n    const shader = gl.createShader(type)!;\n\n    gl.shaderSource(shader, src);\n    gl.compileShader(shader);\n\n    return shader;\n  }\n\n  private _getCommonUniformLocations(program: WebGLProgram) {\n    const gl = this._gl;\n\n    return {\n      uMVMatrix: gl.getUniformLocation(program, \"uMVMatrix\")!,\n      uPMatrix: gl.getUniformLocation(program, \"uPMatrix\")!\n    };\n  }\n\n  private _getContext(canvas: HTMLCanvasElement): {\n    gl: WebGLRenderingContext | WebGL2RenderingContext;\n    isWebGL2: boolean;\n  } {\n    const webglIdentifiers = [\"webgl2\", \"webgl\", \"experimental-webgl\", \"webkit-3d\", \"moz-webgl\"];\n    let context: WebGLRenderingContext | null = null;\n    let isWebGL2 = false;\n    const contextAttributes = {\n      preserveDrawingBuffer: false,\n      antialias: false\n    };\n\n    const onWebglContextCreationError = e => e.statusMessage;\n\n    canvas.addEventListener(BROWSER.EVENTS.CONTEXT_CREATE_ERROR, onWebglContextCreationError);\n\n    for (const identifier of webglIdentifiers) {\n      try {\n        context = canvas.getContext(identifier, contextAttributes) as WebGLRenderingContext;\n        isWebGL2 = identifier === \"webgl2\";\n      } catch (t) {} // eslint-disable-line no-empty\n      if (context) {\n        break;\n      }\n    }\n\n    canvas.removeEventListener(BROWSER.EVENTS.CONTEXT_CREATE_ERROR, onWebglContextCreationError);\n\n    if (!context) {\n      throw new View360Error(ERROR.MESSAGES.WEBGL_NOT_SUPPORTED, ERROR.CODES.WEBGL_NOT_SUPPORTED);\n    }\n\n    return {\n      gl: context,\n      isWebGL2\n    };\n  }\n\n  private _onContextLost = () => {\n    const canvas = this._canvas;\n    canvas.classList.add(DEFAULT_CLASS.CTX_LOST);\n    this._contextLost = true;\n  };\n\n  private _onContextRestore = () => {\n    const canvas = this._canvas;\n    canvas.classList.remove(DEFAULT_CLASS.CTX_LOST);\n    this._contextLost = false;\n  };\n}\n\nexport default WebGLContext;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { mat4 } from \"gl-matrix\";\nimport Camera from \"./Camera\";\nimport Projection from \"../projection/Projection\";\nimport WebGLContext from \"./WebGLContext\";\nimport XRManager from \"./XRManager\";\n\n/**\n * Projection renderer, based on WebGL\n * @ko WebGL 기반의 프로젝션 렌더러\n * @since 4.0.0\n */\nclass WebGLRenderer {\n  private _canvas: HTMLCanvasElement;\n  private _elementSize: { x: number, y: number };\n  private _pixelRatio: number;\n\n  public readonly ctx: WebGLContext;\n\n  /**\n   * Canvas element\n   * @ko 캔버스 엘리먼트\n   * @since 4.0.0\n   */\n  public get canvas() { return this._canvas; }\n  /**\n   * Canvas's width (`devicePixelRatio` is not applied)\n   * @ko 캔버스의 보이는 너비 (`devicePixelRatio`가 적용되지 않은)\n   * @since 4.0.0\n   */\n  public get width() { return this._elementSize.x; }\n  /**\n   * Canvas's height (`devicePixelRatio` is not applied)\n   * @ko 캔버스의 높이 (`devicePixelRatio`가 적용되지 않은)\n   * @since 4.0.0\n   */\n  public get height() { return this._elementSize.y; }\n  /**\n   * Current `devicePixelRatio` value.\n   * @ko 현재 `devicePixelRatio` 값.\n   * @since 4.0.0\n   * @example\n   * ```js\n   * cosnt renderingWidth = view360.renderer.width * view360.renderer.pixelRatio;\n   * ```\n   */\n  public get pixelRatio() { return this._pixelRatio; }\n  /**\n   * Width / height ratio (= width / height)\n   * @ko 너비 / 높이의 비율 (= width / height)\n   * @since 4.0.0\n   * @example\n   * ```js\n   * const aspect = view360.renderer.width / view360.renderer.pixelRatio;\n   * assert(aspect === view360.renderer.aspect);\n   * ```\n   */\n  public get aspect() { return this._elementSize.x / this._elementSize.y; }\n\n  /**\n   * Create new instance\n   * @ko 새 인스턴스를 생성합니다.\n   * @param canvas - Canvas element {@ko 캔버스 엘리먼트}\n   * @param debug - Whether to enable WebGL debugging {@ko WebGL debug 활성화 여부 }\n   */\n  public constructor(canvas: HTMLCanvasElement, debug: boolean) {\n    this._canvas = canvas;\n    this._elementSize = { x: 0, y: 0 };\n    this._pixelRatio = 1;\n    this.ctx = new WebGLContext(canvas, debug);\n  }\n\n  /**\n   * Destroy instance and release all resources.\n   * @ko 인스턴스를 제거하고 사용된 리소스를 전부 해제합니다.\n   * @since 4.0.0\n   */\n  public destroy() {\n    const canvas = this._canvas;\n\n    this.ctx.destroy();\n    canvas.width = 1;\n    canvas.height = 1;\n  }\n\n  /**\n   * Resize canvas and renew inner size cache.\n   * @ko 캔버스의 크기를 재계산해서 내부의 사이즈 캐시값을 갱신합니다.\n   * @since 4.0.0\n   */\n  public resize() {\n    const canvas = this._canvas;\n    const canvasSize = this._elementSize;\n    const devicePixelRatio = window.devicePixelRatio;\n\n    canvasSize.x = canvas.clientWidth;\n    canvasSize.y = canvas.clientHeight;\n\n    canvas.width = canvasSize.x * devicePixelRatio;\n    canvas.height = canvasSize.y * devicePixelRatio;\n\n    this._pixelRatio = devicePixelRatio;\n    this.ctx.resize();\n  }\n\n  /**\n   * Render projection\n   * @ko 프로젝션을 렌더링합니다.\n   * @param projection - Projection to render {@ko 렌더링할 프로젝션}\n   * @param cameraa - Camera instance {@ko 카메라의 인스턴스}\n   * @since 4.0.0\n   */\n  public render(projection: Projection, camera: Camera) {\n    const ctx = this.ctx;\n    const mesh = projection.getMesh();\n    if (ctx.lost || !mesh) return;\n\n    ctx.clear();\n    ctx.useProgram(mesh.program);\n    ctx.updateCommonUniforms(mesh, camera, mesh.program);\n    projection.update(camera);\n    ctx.updateUniforms(mesh.program);\n    ctx.draw(mesh.vao, mesh.program);\n  }\n\n  /**\n   * Render VR frame, only used for rendering frames inside VR sessions.\n   * @ko VR 프레임을 렌더링합니다. VR 세션 진입 도중에만 사용됩니다.\n   * @internal\n   * @param projection - Projection to render {@ko 렌더링할 프로젝션}\n   * @param vr - Instance of XRManager {@ko XRManager의 인스턴스}\n   * @param frame - VR frame {@ko VR 프레임}\n   * @since 4.0.0\n   */\n  public renderVR(projection: Projection, vr: XRManager, frame: XRFrame) {\n    const ctx = this.ctx;\n    const mesh = projection.getMesh();\n    const eyeParams = vr.getEyeParams(frame);\n\n    if (!eyeParams || !mesh) return;\n\n    ctx.bindXRFrame(frame);\n    ctx.useProgram(mesh.program);\n    ctx.updateUniforms(mesh.program);\n\n    eyeParams.forEach((eye, eyeIndex) => {\n      const viewport = eye.viewport;\n      // We're using \"mesh.matrix\"(=local matrix) here for efficiency\n      // As projection doesn't require world matrix, as it doesn't have any parent or child\n      const mvMatrix = mat4.multiply(mat4.create(), eye.vMatrix, mesh.matrix);\n\n      ctx.viewport(viewport.x, viewport.y, viewport.width, viewport.height);\n      ctx.updateVRUniforms(mesh.program, mvMatrix, eye.pMatrix, eyeIndex);\n      ctx.draw(mesh.vao, mesh.program);\n    });\n  }\n}\n\nexport default WebGLRenderer;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Component from \"@egjs/component\";\nimport Camera, { CameraOptions } from \"./core/Camera\";\nimport PanoControl, { PanoControlOptions } from \"./control/PanoControl\";\nimport TextureLoader from \"./core/TextureLoader\";\nimport FrameAnimator from \"./core/FrameAnimator\";\nimport AutoResizer from \"./core/AutoResizer\";\nimport Autoplay, { AutoplayOptions } from \"./core/Autoplay\";\nimport XRManager from \"./core/XRManager\";\nimport View360Error from \"./core/View360Error\";\nimport Projection from \"./projection/Projection\";\nimport HotspotRenderer, { HotspotOptions } from \"./hotspot/HotspotRenderer\";\nimport WebGLRenderer from \"./core/WebGLRenderer\";\nimport Texture from \"./texture/Texture\";\nimport View360Plugin from \"./plugin/View360Plugin\";\nimport ERROR from \"./const/error\";\nimport { CONTROL_EVENTS } from \"./const/internal\";\nimport { DEFAULT_CLASS, EVENTS } from \"./const/external\";\nimport { findCanvas, getElement } from \"./utils\";\nimport * as EVENT_TYPES from \"./type/events\";\nimport { EventParams } from \"./type/utils\";\n\n/**\n * Events that {@link View360} can trigger\n * @ko {@link View360}가 트리거할 수 있는 이벤트들\n * @see [Detailed Example](/docs/events/ready)\n * @since 4.0.0\n */\nexport interface View360Events {\n  [EVENTS.READY]: EVENT_TYPES.ReadyEvent;\n  [EVENTS.LOAD_START]: EVENT_TYPES.LoadStartEvent;\n  [EVENTS.LOAD]: EVENT_TYPES.LoadEvent;\n  [EVENTS.PROJECTION_CHANGE]: EVENT_TYPES.ProjectionChangeEvent;\n  [EVENTS.RESIZE]: EVENT_TYPES.ResizeEvent;\n  [EVENTS.BEFORE_RENDER]: EVENT_TYPES.BeforeRenderEvent;\n  [EVENTS.RENDER]: EVENT_TYPES.RenderEvent;\n  [EVENTS.INPUT_START]: EVENT_TYPES.InputStartEvent;\n  [EVENTS.INPUT_END]: EVENT_TYPES.InputEndEvent;\n  [EVENTS.VIEW_CHANGE]: EVENT_TYPES.ViewChangeEvent;\n  [EVENTS.STATIC_CLICK]: EVENT_TYPES.StaticClickEvent;\n  [EVENTS.VR_START]: EVENT_TYPES.VRStartEvent;\n  [EVENTS.VR_END]: EVENT_TYPES.VREndEvent;\n}\n\n/**\n * Options for {@link View360}\n * @ko {@link View360}용 옵션들\n * @see [Detailed Example](/docs/options)\n * @since 4.0.0\n */\nexport interface View360Options extends CameraOptions, PanoControlOptions {\n  projection: Projection | null;\n  hotspot: Partial<HotspotOptions>;\n  autoplay: boolean | Partial<AutoplayOptions>;\n  autoInit: boolean;\n  autoResize: boolean;\n  canvasSelector: string;\n  useResizeObserver: boolean;\n  tabIndex: number | null;\n  on: Partial<{ [key in keyof View360Events]: (evt: View360Events[key]) => any }>;\n  plugins: View360Plugin[];\n  maxDeltaTime: number;\n  debug: boolean;\n}\n\n/**\n * Panorama 360 image viewer\n * @ko 파노라마 360 이미지 뷰어\n * @since 4.0.0\n * @see View360Options\n * @see View360Events\n */\nclass View360 extends Component<View360Events> {\n  /**\n   * Current version string of the View360\n   * @ko View360의 현재 버젼 문자열\n   * @since 4.0.0\n   * @readonly\n   * @example\n   * ```ts\n   * // If the installed version of the View360 is v4.0.0, View360.VERSION is equal to \"4.0.0\"\n   * console.log(View360.VERSION) // 4.0.0\n   * ```\n   */\n  public static readonly VERSION = \"#__VERSION__#\";\n\n  private _rootEl: HTMLElement;\n  private _renderer: WebGLRenderer;\n  private _camera: Camera;\n  private _control: PanoControl;\n  private _animator: FrameAnimator;\n  private _autoplay: Autoplay;\n  private _hotspot: HotspotRenderer;\n  private _projection: Projection | null;\n  private _autoResizer: AutoResizer;\n  private _vr: XRManager;\n  private _plugins: View360Plugin[];\n  private _initialized: boolean;\n\n  private _autoInit: View360Options[\"autoInit\"];\n  private _autoResize: View360Options[\"autoResize\"];\n  private _canvasSelector: View360Options[\"canvasSelector\"];\n  private _useResizeObserver: View360Options[\"useResizeObserver\"];\n  private _tabIndex: View360Options[\"tabIndex\"];\n  private _debug: View360Options[\"debug\"];\n\n  /**\n   * Root element (`.view360-container`)\n   * @ko 루트 엘리먼트 (`.view360-container`)\n   * @since 4.0.0\n   * @readonly\n   * @example\n   * ```html\n   * <div id=\"viewer\" class=\"view360-container\">\n   *   <canvas class=\"view360-canvas\"></canvas>\n   * </div>\n   * ```\n   * ```ts\n   * import View360 from \"@egjs/view360\";\n   *\n   * const viewer = new View360(\"#viewer\");\n   * console.log(viewer.rootEl); // Element with id \"viewer\"\n   * ```\n   */\n  public get rootEl() { return this._rootEl; }\n  /**\n   * Projection renderer.\n   * @ko 프로젝션 렌더러.\n   * @since 4.0.0\n   * @readonly\n   */\n  public get renderer() { return this._renderer; }\n  /**\n   * Projection camera.\n   * @ko 프로젝션 카메라.\n   * @since 4.0.0\n   * @readonly\n   */\n  public get camera() { return this._camera; }\n  /**\n   * Rotate/Zoom Controller.\n   * @ko 회전/줌 컨트롤러.\n   * @since 4.0.0\n   * @readonly\n   */\n  public get control() { return this._control; }\n  /**\n   * WebXR-based VR manager.\n   * @ko WebXR 기반의 VR 기능 매니저 인스턴스.\n   * @since 4.0.0\n   * @readonly\n   * @example\n   * ```ts\n   * // Example: Enter VR\n   * // This must be called on user interaction, else will be rejected.\n   * viewer.vr.enter();\n   * ```\n   */\n  public get vr() { return this._vr; }\n  /**\n   * Hotspot renderer.\n   * You can also change options of {@link View360Options#hotspot} with this.\n   * @ko 핫스팟 렌더러 인스턴스.\n   * {@link View360Options#hotspot} 옵션 변경도 가능합니다.\n   * @since 4.0.0\n   * @readonly\n   */\n  public get hotspot() { return this._hotspot; }\n  /**\n   * An array of plugins added.\n   * @ko 추가된 플러그인의 배열\n   * @since 4.0.0\n   * @readonly\n   * @example\n   * ```ts\n   * const viewer = new View360(\"#el_id\", {\n   *   plugins: [new ControlBar()]\n   * });\n   *\n   * console.log(viewer.plugins); // [ControlBar]\n   *\n   * viewer.addPlugins(new LoadingSpinner()) // [ControlBar, LoadingSpinner];\n   * ```\n   */\n  public get plugins() { return this._plugins; }\n  /**\n   * A instance of {@link Projection} that currently enabled. `null` if not initialized yet.\n   * You should call {@link View360#load} to change panorama src or projection type.\n   * @ko 현재 사용중인 {@link Projection}의 인스턴스. 프로젝션을 활성화하지 않았을 경우 `null`입니다.\n   * 파노라마 이미지 소스나 프로젝션 타입을 변경하려면 {@link View360#load}를 호출하면 됩니다.\n   * @since 4.0.0\n   * @readonly\n   * @example\n   * ```ts\n   * const viewer = new View360\n   * ```\n   */\n  public get projection() { return this._projection; }\n  public set projection(val: View360Options[\"projection\"]) {\n    if (this._initialized && val) {\n      this.load(val);\n    } else {\n      this._projection = val;\n    }\n  }\n  /**\n   * A boolean value whether {@link View360#init init()} is called before.\n   * @ko {@link View360#init init()}이 호출되었는지 여부를 가리키는 값\n   * @since 4.0.0\n   * @readonly\n   * @example\n   * ```ts\n   * const viewer = new View360(\"#el\", { autoInit: false });\n   *\n   * console.log(viewer.initialized); // false\n   *\n   * await viewer.init();\n   *\n   * console.log(viewer.initialized); // true\n   * ```\n   */\n  public get initialized() { return this._initialized; }\n  /**\n   * Instance of the Autoplay manager.\n   * You can also change {@link View360Options#autoplay} options with this.\n   * @ko Autoplay 기능의 매니저 인스턴스.\n   * 이 인스턴스를 통해 {@link View360Options#autoplay} 옵션을 변경하는 것도 가능합니다.\n   * @since 4.0.0\n   * @readonly\n   * @example\n   * ```ts\n   * // Disable autoplay\n   * viewer.autoplay.disable();\n   * ```\n   */\n  public get autoplay() { return this._autoplay; }\n  /**\n   * When this value is `true` and {@link View360Options#projection} is set, {@link View360#init init()} will be called automatically when instance is created.\n   * @ko 이 값이 `true`이고, {@link View360Options#projection}이 설정되었으면, 인스턴스 생성 시점에 자동으로 {@link View360#init init()}을 호출합니다.\n   * @default true\n   * @since 4.0.0\n   * @example\n   * ```ts\n   * import View360, { EquirectProjection, EVENTS } from \"@egjs/view360\";\n   *\n   * // viewer.init() is called on instance creation\n   * // But as `init` is asynchronous, you should wait for \"ready\" event if you want to do something after initialization.\n   * const viewer = new View360(\"#el_id\", {\n   *   autoInit: true,\n   *   projection: new EquirectProjection({ src: \"SRC_TO_URL\" })\n   * });\n   *\n   * console.log(viewer.initialized); // false, as `init` is asynchronous\n   *\n   * viewer.once(EVENTS.READY, () => {\n   *   console.log(viewer.initialized); // true\n   * });\n   * ```\n   */\n  public get autoInit() { return this._autoInit; }\n  /**\n   * When `true`, {@link View360#resize} is called when the canvas size is changed.\n   * @ko `true`일 경우, 캔버스의 크기가 변경되었을 때 자동으로 {@link View360#resize}를 호출합니다.\n   * @default true\n   * @since 4.0.0\n   * @see View360#useResizeObserver\n   * @example\n   * ```ts\n   * const viewer = new View360(\"#el_id\", {\n   *   autoResize: true\n   * });\n   *\n   * // This can trigger `viewer.resize()` if the canvas size was not 400px\n   * const canvas = viewer.renderer.canvas;\n   * canvas.style.width = \"400px\";\n   * ```\n   */\n  public get autoResize() { return this._autoResize; }\n  /**\n   * CSS selector for canvas element to render panorama image/video.\n   * The canvas element should be placed inside the root element. (Dont' have to be direct child)\n   * @ko 파노라마 이미지/비디오를 렌더링할 canvas 엘리먼트의 CSS 선택자\n   * 캔버스 엘리먼트는 루트 엘리먼트 내부에 있어야합니다. 루트 엘리먼트의 직계 자식 엘리먼트(Direct child element)일 필요는 없습니다.\n   * @default \"canvas\"\n   * @since 4.0.0\n   * @example\n   * ```html\n   * <div class=\"view360-container\">\n   *   <canvas id=\"not_this_one\"></canvas>\n   *   <!-- This will be selected -->\n   *   <canvas id=\"canvas_to_select\"></canvas>\n   * </div>\n   * ```\n   *\n   * ```ts\n   * const viewer = new View360(\"#el_id\", {\n   *   canvasSelector: \"#canvas_to_select\"\n   * });\n   * ```\n   */\n  public get canvasSelector() { return this._canvasSelector; }\n  /**\n   * When `true`, it will use {@link ResizeObserver} API to detect canvas size change when {@link View360Options#autoResize} is enabled.\n   * @ko `true`일 때 {@link View360Options#autoResize}가 활성화되었으면, 사용 가능한 환경에서 {@link ResizeObserver} API를 사용해서 캔버스 크기 변화를 추적합니다.\n   * @default true\n   * @since 4.0.0\n   */\n  public get useResizeObserver() { return this._useResizeObserver; }\n  /**\n   * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex tabindex} attribute for the canvas element.\n   * This is necessary for the keyboard controls.\n   * By default, `0` will be assigned. `null` to disable.\n   * @ko 캔버스 엘리먼트에 적용할 {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex tabindex} 어트리뷰트의 값.\n   * 이 값을 설정해야만 키보드 컨트롤을 사용 가능합니다.\n   * 기본값으로 `0`이 설정됩니다. `null`로 지정하면 `tabindex`를 설정하지 않습니다.\n   * @see RotateControlOptions#disableKeyboard\n   * @default 0\n   * @since 4.0.0\n   * @example\n   * ```ts\n   * const viewer = new View360(\"#el_id\", {\n   *   tabindex: 5\n   * });\n   * ```\n   *\n   * ```html\n   * <!-- After init -->\n   * <div class=\"view360-container\">\n   *   <canvas class=\"view360-canvas\" tabindex=\"5\"></canvas>\n   * </div>\n   * ```\n   */\n  public get tabIndex() { return this._tabIndex; }\n  public set tabIndex(val: View360Options[\"tabIndex\"]) {\n    const canvas = this._renderer.canvas;\n    this._tabIndex = val;\n\n    if (val != null) {\n      canvas.tabIndex = val;\n    } else {\n      canvas.removeAttribute(\"tabindex\");\n    }\n  }\n  /**\n   * A maximum delta time between frames in seconds.\n   * It can prevent camera or control changing too fast when frame being late.\n   * @ko 프레임간 시간 차이의 최대값. (초 단위)\n   * 퍼포먼스 등의 이유로 프레임 렌더링이 늦어졌을 때, 화면이 갑작스럽게 바뀌는 것을 막아줍니다.\n   * @default 1 / 30\n   * @since 4.0.0\n   */\n  public get maxDeltaTime() { return this._animator.maxDeltaTime; }\n  public set maxDeltaTime(val: View360Options[\"maxDeltaTime\"]) { this._animator.maxDeltaTime = val; }\n  /**\n   * Enable WebGL debugging. Setting this to `true` can decrease performance.\n   * This is used internally on developing View360.\n   * @ko WebGL 디버깅을 활성화합니다. 이 값을 `true`로 할 경우 성능이 하락할 수 있습니다.\n   * 이 옵션은 View360을 개발하기 위해 내부적으로 사용됩니다.\n   * @default false\n   */\n  public get debug() { return this._debug; }\n  public set debug(val: View360Options[\"debug\"]) { this._debug = val; }\n\n  // Camera options\n  /**\n   * Initial yaw (y-axis rotation) value for camera. (in degrees, °)\n   * As View360 uses right-handed coordinate system internally, camera will rotate counter-clockwise by this value.\n   * @ko 카메라의 초기 yaw(y축 회전)값 (도 단위, °)\n   * View360은 오른손 좌표계를 사용하기 때문에, 카메라가 해당 값만큼 시계 반대방향으로 회전합니다.\n   * @default 0\n   * @since 4.0.0\n   * @example\n   * ```ts\n   * const viewer = new View360(\"#el_id\", {\n   *   initialYaw: 30\n   * });\n   *\n   * viewer.on(\"ready\", () => {\n   *   console.log(viewer.camera.yaw); // 30\n   * });\n   * ```\n   */\n  public get initialYaw() { return this._camera.initialYaw; }\n  public set initialYaw(val: View360Options[\"initialYaw\"]) { this._camera.initialYaw = val; }\n  /**\n   * Initial pitch (x-axis rotation) value for camera. (in degrees, °)\n   * As View360 uses right-handed coordinate system internally, positive value will make camera to look upside, while negative value will look down.\n   * @ko 카메라의 초기 pitch(x축 회전)값 (도 단위, °)\n   * View360은 오른손 좌표계를 사용하기 때문에, 양(+)의 값은 카메라가 위를 보게 하고, 음(-)의 값은 카메라가 아래를 보게 합니다.\n   * @default 0\n   * @since 4.0.0\n   * @example\n   * ```ts\n   * const viewer = new View360(\"#el_id\", {\n   *   initialPitch: 60\n   * });\n   *\n   * viewer.on(\"ready\", () => {\n   *   console.log(viewer.camera.pitch); // 60\n   * });\n   * ```\n   */\n  public get initialPitch() { return this._camera.initialPitch; }\n  public set initialPitch(val: View360Options[\"initialPitch\"]) { this._camera.initialPitch = val; }\n  /**\n   * Initial zoom value for camera.\n   * Setting this value to `2` will enlarge panorama 200% by width.\n   * @ko 카메라의 초기 줌 값.\n   * 이 값을 `2`로 설정할 경우 파노라마 이미지를 가로 기준 200%만큼 확대합니다.\n   * @default 1\n   * @since 4.0.0\n   * @example\n   * ```ts\n   * const viewer = new View360(\"#el_id\", {\n   *   initialZoom: 2\n   * });\n   *\n   * viewer.on(\"ready\", () => {\n   *   console.log(viewer.camera.zoom); // 2\n   * });\n   * ```\n   */\n  public get initialZoom() { return this._camera.initialZoom; }\n  public set initialZoom(val: View360Options[\"initialZoom\"]) { this._camera.initialZoom = val; }\n  /**\n   * Restrict yaw(y-axis rotation) range. (in degrees, °)\n   * @ko yaw(y축 회전) 범위를 제한합니다. (도 단위, °)\n   * @since 4.0.0\n   * @example\n   * ```ts\n   * const viewer = new View360(\"#el_id\", {\n   *   yawRange: [-30, 30]\n   * });\n   *\n   * viewer.on(\"ready\", () => {\n   *   console.log(viewer.camera.yaw); // 0\n   *   viewer.camera.lookAt({ yaw: 60  });\n   *   console.log(viewer.camera.yaw); // 30\n   * });\n   * ```\n   */\n  public get yawRange() { return this._camera.yawRange; }\n  public set yawRange(val: View360Options[\"yawRange\"]) {\n    this._camera.yawRange = val;\n    if (this._projection) this._projection.updateCamera(this._camera);\n  }\n  /**\n   * Restrict pitch(x-axis rotation) range. (in degrees, °)\n   * @ko pitch(x축 회전) 범위를 제한합니다. (도 단위, °)\n   * @default null\n   * @since 4.0.0\n   * @example\n   * ```ts\n   * const viewer = new View360(\"#el_id\", {\n   *   pitchRange: [-45, 45]\n   * });\n   *\n   * viewer.on(\"ready\", () => {\n   *   console.log(viewer.camera.pitch); // 0\n   *   viewer.camera.lookAt({ pitch: 60  });\n   *   console.log(viewer.camera.pitch); // 45\n   * });\n   * ```\n   */\n  public get pitchRange() { return this._camera.pitchRange; }\n  public set pitchRange(val: View360Options[\"pitchRange\"]) {\n    this._camera.pitchRange = val;\n    if (this._projection) this._projection.updateCamera(this._camera);\n  }\n  /**\n   * Restrict camera zoom range.\n   * If `null`, a default zoom range from `0.6` to `10` will be used.\n   * @ko 카메라 줌 범위를 제한합니다.\n   * `null`일 경우 기본값으로 `0.6`에서 `10`의 범위를 사용합니다.\n   * @default null\n   * @since 4.0.0\n   * @example\n   * ```ts\n   * const viewer = new View360(\"#el_id\", {\n   *   zoomRange: [0.5, 4]\n   * });\n   *\n   * viewer.on(\"ready\", () => {\n   *   console.log(viewer.camera.zoom); // 1\n   *   viewer.camera.lookAt({ zoom: 6  });\n   *   console.log(viewer.camera.zoom); // 4\n   * });\n   * ```\n   */\n  public get zoomRange() { return this._camera.zoomRange; }\n  public set zoomRange(val: View360Options[\"zoomRange\"]) {\n    this._camera.zoomRange = val;\n    if (this._projection) this._projection.updateCamera(this._camera);\n  }\n  /**\n   * Camera's horizontal FOV(Field of View). (in degrees, °)\n   * @ko 카메라의 수평 FOV(Field of View) 값. (도 단위, °)\n   * @default 90\n   * @since 4.0.0\n   * @example\n   * ```ts\n   * // Init with fov: 120\n   * const viewer = new View360(\"#el_id\", { fov: 120 });\n   *\n   * // Back to 90\n   * viewer.fov = 90;\n   * ```\n   */\n  public get fov() { return this._camera.fov; }\n  public set fov(val: View360Options[\"fov\"]) {\n    const camera = this._camera;\n    const control = this._control;\n\n    camera.fov = val;\n    camera.updateMatrix();\n    control.sync();\n  }\n\n  // Control options\n  /**\n   * A control for camera rotation.\n   * You can also change options of {@link View360Options#rotate} with this.\n   * @ko 카메라 회전을 담당하는 컨트롤.\n   * {@link View360Options#rotate} 옵션 변경도 가능합니다.\n   * @since 4.0.0\n   * @readonly\n   */\n  public get rotate() { return this._control.rotate; }\n  /**\n   * A control for camera zoom.\n   * You can also change options of {@link View360Options#zoom} with this.\n   * @ko 카메라 줌을 담당하는 컨트롤.\n   * {@link View360Options#zoom} 옵션 변경도 가능합니다.\n   * @since 4.0.0\n   * @readonly\n   */\n  public get zoom() { return this._control.zoom; }\n  /**\n   * A control for camera rotation with gyroscope input.\n   * You can also change options of {@link View360Options#gyro} with this.\n   * @ko 자이로스코프를 통한 카메라 회전을 담당하는 컨트롤.\n   * {@link View360Options#gyro} 옵션 변경도 가능합니다.\n   * @since 4.0.0\n   * @readonly\n   */\n  public get gyro() { return this._control.gyro; }\n  /**\n   * Apply CSS {@link https://developer.mozilla.org/en-US/docs/Web/CSS/cursor cursor} by current state of input when using mouse.\n   * If `true`, this will add CSS style to canvas element. It'll apply `cursor: \"grab\"` by default and `cursor: \"grabbing\"` when holding the mouse button.\n   * @ko 마우스 사용시 CSS {@link https://developer.mozilla.org/en-US/docs/Web/CSS/cursor cursor}값을 자동으로 변경할지 여부.\n   * `true`일 경우 기본 상태에서 `cursor: \"grab\"`을, 입력 도중에 `cursor: \"grabbing\"`을 캔버스에 적용합니다.\n   * @default true\n   * @since 4.0.0\n   */\n  public get useGrabCursor() { return this._control.useGrabCursor; }\n  public set useGrabCursor(val: View360Options[\"useGrabCursor\"]) { this._control.useGrabCursor = val; }\n  /**\n   * Disable context menu which pops up on mouse right click.\n   * @ko 마우스 우클릭시 표시되는 컨텍스트 메뉴를 비활성화합니다.\n   * @default false\n   * @since 4.0.0\n   */\n  public get disableContextMenu() { return this._control.disableContextMenu; }\n  public set disableContextMenu(val: View360Options[\"disableContextMenu\"]) { this._control.disableContextMenu = val; }\n  /**\n   * If `true`, enables scroll on mobile(touch) devices on canvas.\n   * :::caution\n   * When this option is enabled, users must swipe horizontally first then vertically to change view up or down.\n   * :::\n   * @ko `true`로 설정할 경우, 모바일(터치) 환경의 캔버스 영역 내에서 스크롤을 가능하게 합니다.\n   * :::caution\n   * 이 값을 활성화할 경우, 사용자가 카메라 뷰를 위/아래로 바꾸기 위해서는 먼저 가로로 스와이프한 이후에 세로로 스와이프해야만 합니다.\n   * :::\n   * @since 4.0.0\n   * @default true\n   */\n  public get scrollable() { return this._control.scrollable; }\n  public set scrollable(val: View360Options[\"scrollable\"]) { this._control.scrollable = val; }\n  /**\n   * If `true`, enables scroll by mouse wheel on canvas.\n   * :::caution\n   * When this option is enabled, zoom by mouse wheel will be disabled.\n   * :::\n   * @ko `true`로 설정할 경우, 캔버스 영역 내에서 마우스 휠을 이용한 페이지 스크롤이 가능해집니다.\n   * :::caution\n   * 이 값을 활성화할 경우, 마우스 휠을 통한 줌이 불가능하게 됩니다.\n   * :::\n   * @since 4.0.0\n   * @default false\n   */\n  public get wheelScrollable() { return this._control.wheelScrollable; }\n  public set wheelScrollable(val: View360Options[\"wheelScrollable\"]) { this._control.wheelScrollable = val; }\n\n  /**\n   * Create new instance of View360\n   * @ko View360의 새로운 인스턴스를 생성합니다\n   * @param root - Root element(`.view360-container`) to mount View360\n   * Can be either a CSS selector or HTMLElement.\n   * {@ko View360을 마운트할 루트 엘리먼트, CSS 셀렉터나 HTMLElement를 지정 가능합니다.}\n   * @param options - Options to apply\n   * {@ko 적용할 옵션들}\n   * @example\n   * ```ts\n   * import View360, { EquirectProjection } from \"@egjs/view360\";\n   *\n   * // Create new View360 instance\n   * const viewer = new View360(\"#id-of-a-container\", {\n   *   projection: new EquirectProjection({\n   *     src: \"URL_TO_PANORAMA_IMAGE_OR_VIDEO\",\n   *   })\n   * });\n   * ```\n   */\n  public constructor(root: string | HTMLElement, {\n    projection = null,\n    initialYaw = 0,\n    initialPitch = 0,\n    initialZoom = 1,\n    yawRange = null,\n    pitchRange = null,\n    zoomRange = null,\n    fov = 90,\n    useGrabCursor = true,\n    disableContextMenu = false,\n    rotate = true,\n    zoom = true,\n    gyro = false,\n    scrollable = true,\n    wheelScrollable = false,\n    autoplay = false,\n    hotspot = {},\n    autoInit = true,\n    autoResize = true,\n    canvasSelector = \"canvas\",\n    useResizeObserver = true,\n    on = {},\n    plugins = [],\n    maxDeltaTime = 1 / 30,\n    tabIndex = 0,\n    debug = false\n  }: Partial<View360Options> = {}) {\n    super();\n\n    this._rootEl = getElement(root);\n    this._plugins = plugins;\n    this._initialized = false;\n\n    // Options\n    this._autoInit = autoInit;\n    this._autoResize = autoResize;\n    this._canvasSelector = canvasSelector;\n    this._useResizeObserver = useResizeObserver;\n    this._tabIndex = tabIndex;\n    this._debug = debug;\n\n    // Core components\n    const canvas = findCanvas(this._rootEl, canvasSelector);\n    this._renderer = new WebGLRenderer(canvas, debug);\n    this._camera = new Camera({\n      initialYaw,\n      initialPitch,\n      initialZoom,\n      fov,\n      yawRange,\n      pitchRange,\n      zoomRange\n    });\n    this._control = new PanoControl(canvas, this._camera, {\n      useGrabCursor,\n      scrollable,\n      wheelScrollable,\n      disableContextMenu,\n      rotate,\n      zoom,\n      gyro\n    });\n    this._animator = new FrameAnimator(maxDeltaTime);\n    this._autoplay = new Autoplay(this, canvas, autoplay);\n    this._projection = projection;\n    this._autoResizer = new AutoResizer(useResizeObserver, () => this.resize());\n    this._vr = new XRManager(this._renderer.ctx);\n    this._hotspot = new HotspotRenderer(this._rootEl, this._renderer, hotspot);\n\n    this._addEventHandlers(on);\n\n    if (projection && autoInit) {\n      this.init();\n    }\n  }\n\n  /**\n   * Destroy instance and release all resources.\n   * @ko 인스턴스를 제거하고 모든 리소스를 해제합니다.\n   * @since 4.0.0\n   */\n  public destroy() {\n    this._camera.destroy();\n    this._animator.stop();\n    this._renderer.destroy();\n    this._control.destroy();\n    this._autoResizer.disable();\n\n    if (this._projection) {\n      this._projection.releaseAllResources(this._renderer.ctx);\n      this._projection = null;\n    }\n\n    this._plugins.forEach(plugin => plugin.destroy(this));\n\n    this._initialized = false;\n  }\n\n  /**\n   * Initialize inner components and load projection src.\n   * @ko 내부 컴포넌트들을 초기화하고 프로젝션 소스를 로드합니다.\n   * @since 4.0.0\n   */\n  public async init() {\n    if (!this._projection) {\n      throw new View360Error(ERROR.MESSAGES.PROVIDE_PROJECTION_FIRST, ERROR.CODES.PROVIDE_PROJECTION_FIRST);\n    }\n\n    const renderer = this._renderer;\n    const camera = this._camera;\n    const control = this._control;\n    const animator = this._animator;\n    const hotspot = this._hotspot;\n    const projection = this._projection;\n    const canvas = renderer.canvas;\n\n    this._bindComponentEvents();\n    renderer.ctx.init();\n    this._resizeComponents();\n    camera.updateMatrix();\n\n    if (this._autoResize) {\n      this._autoResizer.enable(canvas);\n    }\n\n    if (!this._autoplay.enableBlocked) {\n      this._autoplay.enable();\n    }\n\n    this._plugins.forEach(plugin => {\n      plugin.init(this);\n    });\n\n    const texture = await this._loadTexture(projection);\n    this._applyProjection(projection, texture, null);\n    hotspot.refresh();\n    animator.start(this._renderFrameOnDemand);\n    await control.enable();\n\n    if (this._tabIndex != null && !canvas.hasAttribute(\"tabIndex\")) {\n      canvas.tabIndex = this._tabIndex;\n    }\n\n    this._initialized = true;\n    this.renderFrame(0);\n\n    this._emit(EVENTS.READY);\n  }\n\n  /**\n   * Load new panorama image/video and display it.\n   * This will {@link View360#init init()} View360 if it's not initialized yet.\n   * @ko 새로운 파노라마 이미지 혹은 비디오를 로드하고 표시합니다.\n   * 만약 View360이 아직 초기화되지 않았다면, {@link View360#init init()}을 호출합니다.\n   * @param projection - Projection & video options for new source. {@ko 새로운 파노라마 이미지/비디오에 적용할 옵션들}\n   * @returns `Promise<true>` if load was successful. {@ko 프로젝션 로드에 성공했을 경우 `Promise<true>`를 반환합니다. }\n   * @since 4.0.0\n   * @example\n   * ```ts\n   * // Change to video\n   * viewer.load({\n   *   src: \"URL_TO_NEW_VIDEO\",\n   *   video: true\n   * });\n   * ```\n   */\n  public async load(projection: Projection): Promise<boolean> {\n    if (!projection) return false;\n\n    if (this._initialized) {\n      const texture = await this._loadTexture(projection);\n      this._applyProjection(projection, texture, this._projection);\n      this.renderFrame(0);\n    } else {\n      // Should update internal options before init\n      this._projection = projection;\n      this.init();\n    }\n\n    return true;\n  }\n\n  /**\n   * Refresh component's size by current\n   * @ko View360이 내부적으로 캐시하고 있는 엘리먼트 크기를 현재 크기로 갱신합니다.\n   * @since 4.0.0\n   */\n  public resize() {\n    if (!this._initialized) return;\n\n    this._resizeComponents();\n\n    // To prevent flickering, render immediately after resizing components\n    this.renderFrame(0);\n\n    const { width, height } = this._renderer;\n\n    this._emit(EVENTS.RESIZE, {\n      width,\n      height\n    });\n  }\n\n  /**\n   * Add new plugins\n   * @ko 새로운 플러그인을 추가합니다.\n   * @param plugins Plugins to add {@ko 추가할 플러그인들}\n   * @see View360Options#plugins\n   * @since 4.0.0\n   * @example\n   * ```ts\n   * // Add a single plugin\n   * viewer.addPlugins(new ControlBar());\n   *\n   * // Add multiple plugins\n   * viewer.addPlugins(new ControlBar(), new LoadingSpinner());\n   * ```\n   */\n  public addPlugins(...plugins: View360Plugin[]) {\n    if (this._initialized) {\n      plugins.forEach(plugin => { plugin.init(this); });\n    }\n\n    this._plugins.push(...plugins);\n  }\n\n  /**\n   * Remove plugins.\n   * @ko 플러그인을 제거합니다.\n   * @param plugins Plugins to remove {@ko 제거할 플러그인들}\n   * @since 4.0.0\n   * @example\n   * ```ts\n   * // Remove a single plugin\n   * viewer.removePlugins(plugin1);\n   *\n   * // Remove multiple plugins\n   * viewer.removePlugins(plugin2, plugin3);\n   * ```\n   */\n  public removePlugins(...plugins: View360Plugin[]) {\n    plugins.forEach(plugin => {\n      const pluginIdx = this._plugins.indexOf(plugin);\n\n      if (pluginIdx < 0) return;\n\n      plugin.destroy(this);\n      this._plugins.splice(pluginIdx, 1);\n    });\n  }\n\n  /**\n   * Render a single panorama image/video frame.\n   * Rendering is performed automatically on demand, so you usually don't have to call this.\n   * Call this when a frame is not renewed after changing options.\n   * @ko 파노라마 이미지/비디오의 한 프레임을 렌더링합니다.\n   * 프레임 갱신은 보통 필요한 때에만 자동적으로 이루어지기 때문에, 보통은 이 메소드를 호출할 필요는 없습니다.\n   * 옵션 변경 이후에도 프레임 갱신이 이루어지지 않는다면, 이 메소드를 호출해주세요.\n   * @param delta Delta time in milisec. {@ko 프레임간 시간 차이, 밀리초 단위}\n   * @since 4.0.0\n   */\n  public renderFrame = (delta: number) => {\n    const camera = this._camera;\n    const renderer = this._renderer;\n    const control = this._control;\n    const hotspot = this._hotspot;\n    const autoPlayer = this._autoplay;\n    const projection = this._projection;\n\n    if (!projection) return;\n\n    this._emit(EVENTS.BEFORE_RENDER);\n\n    if (autoPlayer.playing) {\n      autoPlayer.update(delta);\n      control.sync();\n    }\n\n    if (camera.animation) {\n      camera.animation.update(delta);\n    } else {\n      control.update(delta);\n    }\n\n    renderer.render(projection, camera);\n    hotspot.render(camera);\n\n    if (camera.changed) {\n      this._emit(EVENTS.VIEW_CHANGE, {\n        yaw: camera.yaw,\n        pitch: camera.pitch,\n        zoom: camera.zoom,\n        quaternion: [\n          camera.quaternion[0],\n          camera.quaternion[1],\n          camera.quaternion[2],\n          camera.quaternion[3]\n        ]\n      });\n    }\n    camera.onFrameRender();\n\n    this._emit(EVENTS.RENDER);\n  };\n\n  private _emit<K extends keyof View360Events>(eventName: K, ...params: EventParams<View360Events, K>) {\n    const evtParams = params ? params[0] : {};\n\n    this.trigger(eventName as any, {\n      type: eventName,\n      target: this,\n      ...evtParams\n    });\n  }\n\n  private _renderFrameOnDemand = (delta: number) => {\n    const camera = this._camera;\n    const control = this._control;\n    const autoplay = this._autoplay;\n    const texture = this._projection?.getTexture();\n\n    if (!this._initialized || !texture) return;\n    if (\n      !camera.animation\n      && !control.animating\n      && !autoplay.playing\n      && !texture.isVideo()\n    ) return;\n\n    this.renderFrame(delta);\n  };\n\n  private _renderVRFrame = (_delta: number, frame: XRFrame) => {\n    const vr = this._vr;\n    const projection = this._projection;\n    const renderer = this._renderer;\n\n    if (!projection) return;\n\n    this._emit(EVENTS.BEFORE_RENDER);\n\n    renderer.renderVR(projection, vr, frame);\n\n    this._emit(EVENTS.RENDER);\n  }\n\n  private _applyProjection(projection: Projection, texture: Texture, prevProjection: Projection | null) {\n    const camera = this._camera;\n    const control = this._control;\n    const renderer = this._renderer;\n\n    // Remove previous projection\n    if (prevProjection) {\n      prevProjection.releaseAllResources(this._renderer.ctx);\n    }\n\n    projection.applyTexture(renderer.ctx, texture);\n    projection.updateCamera(camera);\n    projection.updateControl(control);\n\n    this._projection = projection;\n    this._emit(EVENTS.PROJECTION_CHANGE, {\n      projection\n    });\n  }\n\n  private async _loadTexture(projection: Projection): Promise<Texture> {\n    const contentLoader = new TextureLoader();\n    const { src, video } = projection;\n\n    this._emit(EVENTS.LOAD_START, {\n      src,\n      video\n    });\n\n    const texture = await contentLoader.load(src, video);\n\n    this._emit(EVENTS.LOAD, {\n      src,\n      video\n    });\n\n    return texture;\n  }\n\n  private _resizeComponents() {\n    const renderer = this._renderer;\n    const camera = this._camera;\n    const control = this._control;\n\n    renderer.resize();\n    camera.resize(renderer.width, renderer.height);\n    control.resize(renderer.width, renderer.height);\n  }\n\n  private _addEventHandlers(events: View360Options[\"on\"]) {\n    // Bind option \"on\"\n    Object.keys(events).forEach((evtName: keyof typeof EVENT_TYPES) => {\n      this.on(evtName, events[evtName]);\n    });\n  }\n\n  private _bindComponentEvents() {\n    // Bind internal component events\n    const root = this._rootEl;\n    const control = this._control;\n    const animator = this._animator;\n    const renderer = this._renderer;\n    const vr = this._vr;\n\n    const controlEventsToPropagate = [\n      CONTROL_EVENTS.STATIC_CLICK,\n      CONTROL_EVENTS.INPUT_START,\n      CONTROL_EVENTS.INPUT_END\n    ];\n\n    controlEventsToPropagate.forEach(evtName => {\n      control.rotate.on(evtName, evt => {\n        this._emit(evtName, evt);\n      });\n\n      control.zoom.on(evtName, evt => {\n        this._emit(evtName, evt);\n      });\n    });\n\n    vr.on(EVENTS.VR_START, evt => {\n      root.classList.add(DEFAULT_CLASS.IN_VR);\n\n      animator.changeContext(evt.session);\n      animator.start(this._renderVRFrame);\n\n      this._emit(EVENTS.VR_START);\n    });\n\n    vr.on(EVENTS.VR_END, () => {\n      root.classList.remove(DEFAULT_CLASS.IN_VR);\n\n      renderer.ctx.useDefaultFrameBuffer();\n      animator.changeContext(window);\n      animator.start(this._renderFrameOnDemand);\n\n      this.resize();\n\n      this._emit(EVENTS.VR_END);\n    });\n  }\n}\n\nexport default View360;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { mat4, quat, vec3 } from \"gl-matrix\";\n\n/**\n * Base class for 3D objects\n * @ko 3D 오브젝트의 베이스 클래스\n * @since 4.0.0\n * @internal\n */\nclass Object3D {\n  /**\n   * Local matrix of the object\n   * @ko 오브젝트의 local matrix\n   * @since 4.0.0\n   */\n  public matrix: mat4;\n  /**\n   * Rotation quaternion\n   * @ko 현재 오브젝트의 회전을 나타내는 사원수 값\n   * @since 4.0.0\n   */\n  public rotation: quat;\n  /**\n   * Position of the object\n   * @ko 오브젝트의 위치\n   * @since 4.0.0\n   */\n  public position: vec3;\n  /**\n   * A scale vector of the object\n   * @ko 오브젝트가 각 축으로 확대된 정도를 나타내는 벡터\n   * @since 4.0.0\n   */\n  public scale: vec3;\n\n  /**\n   * Create new instance.\n   * @ko 새로운 인스턴스를 생성합니다.\n   */\n  public constructor() {\n    this.matrix = mat4.create();\n    this.rotation = quat.create();\n    this.position = vec3.fromValues(0, 0, 0);\n    this.scale = vec3.fromValues(1, 1, 1);\n  }\n\n  /**\n   * Update local matrix of the object.\n   * @ko 오브젝트의 local matrix를 갱신합니다.\n   * @since 4.0.0\n   */\n  public updateMatrix() {\n    mat4.fromRotationTranslationScale(this.matrix, this.rotation, this.position, this.scale);\n  }\n}\n\nexport default Object3D;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport View360Plugin from \"../View360Plugin\";\nimport View360 from \"../../View360\";\nimport { EVENTS } from \"../../const/external\";\nimport { createElement } from \"../../utils\";\nimport { LoadStartEvent } from \"../../type/events\";\n\n/**\n * Options for {@link LoadingSpinner}\n * @ko {@link LoadingSpinner}용 옵션들\n * @since 4.0.0\n * @category Plugin\n */\nexport interface LoadingSpinnerOptions {\n  /**\n   * Override default class names.\n   * @ko 디폴트 클래스 이름들을 오버라이드합니다.\n   * @since 4.0.0\n   */\n  className: Partial<{ -readonly [key in keyof typeof LoadingSpinner.DEFAULT_CLASS]: string }>;\n}\n\n/**\n * A plugin that displays loading spinner while loading the projection.\n * @ko 프로젝션 로딩중에 로딩 스피너를 보여주는 플러그인\n * @since 4.0.0\n * @category Plugin\n */\nclass LoadingSpinner implements View360Plugin {\n  /**\n   * Default class names that LoadingSpinner uses\n   * @ko LoadingSpinner가 사용하는 디폴트 클래스 이름\n   * @since 4.0.0\n   */\n  public static readonly DEFAULT_CLASS = {\n    /**\n     * A class name for the container element\n     * @ko 컨테이너 엘리먼트의 클래스 이름\n     * @since 4.0.0\n     */\n    CONTAINER: \"view360-spinner\",\n    /**\n     * A class name for the spinning ring element\n     * @ko 돌아가는 링 엘리먼트의 클래스 이름\n     * @since 4.0.0\n     */\n    RING: \"view360-spinner-ring\"\n  } as const;\n\n  /**\n   * A class names overriding\n   * @ko 현재 오버라이드 중인 클래스 이름\n   * @since 4.0.0\n   */\n  public readonly className: LoadingSpinnerOptions[\"className\"];\n\n  private _container: HTMLElement;\n\n  /**\n   * Create a new instance of LoadingSpinner. {@ko LoadingSpinner의 새 인스턴스를 생성합니다.}\n   * @param options Options {@ko 옵션들}\n   */\n  public constructor({\n    className = {}\n  }: Partial<LoadingSpinnerOptions> = {}) {\n    this.className = className;\n    this._container = this._createElements();\n  }\n\n  public init(viewer: View360) {\n    viewer.on(EVENTS.LOAD_START, this._startLoading);\n  }\n\n  public destroy(viewer: View360): void {\n    viewer.off(EVENTS.LOAD_START, this._startLoading);\n    this._detachElements({ target: viewer });\n  }\n\n  private _startLoading = ({ target: viewer }: LoadStartEvent) => {\n    viewer.rootEl.appendChild(this._container);\n\n    if (viewer.initialized) {\n      viewer.once(EVENTS.LOAD, this._detachElements);\n    } else {\n      viewer.once(EVENTS.READY, this._detachElements);\n    }\n  };\n\n  private _detachElements = ({ target: viewer }: { target: View360 }) => {\n    const container = this._container;\n    if (!container) return;\n\n    if (container.parentElement === viewer.rootEl) {\n      viewer.rootEl.removeChild(container);\n    }\n  };\n\n  private _createElements() {\n    const className = {\n      ...this.className,\n      ...LoadingSpinner.DEFAULT_CLASS\n    };\n\n    const container = createElement(className.CONTAINER);\n    const ring = createElement(className.RING);\n\n    container.appendChild(ring);\n\n    return container;\n  }\n}\n\nexport default LoadingSpinner;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n/* eslint-disable @typescript-eslint/no-empty-function */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport ControlBar from \"./ControlBar\";\nimport View360 from \"../../View360\";\n\n/**\n * Common options for {@link ControlBarItem}\n * @ko {@link ControlBarItem}의 공통 옵션들\n * @category Plugin\n * @since 4.0.0\n */\nexport interface ControlBarItemOptions {\n  /**\n   * @copy ControlBarItem#position\n   */\n  position: typeof ControlBar.POSITION[keyof typeof ControlBar.POSITION];\n  /**\n   * @copy ControlBarItem#order\n   */\n  order: number;\n}\n\n/**\n * Interface of the ControlBar items\n * @ko 컨트롤바 아이템의 인터페이스\n * @category Plugin\n * @group ControlBar\n * @since 4.0.0\n */\nabstract class ControlBarItem {\n  /**\n   * Element of the item.\n   * @ko 아이템의 엘리먼트\n   * @since 4.0.0\n   */\n  public abstract element: HTMLElement;\n\n  /**\n   * Position to display item.\n   * @ko 아이템을 표시할 위치.\n   * @since 4.0.0\n   */\n  public position: ControlBarItemOptions[\"position\"];\n  /**\n   * Order within the same position.\n   * The lowest one will be shown first.\n   * @ko 동일한 position 내에서의 순서, 작을수록 먼저 표시됩니다.\n   * @since 4.0.0\n   */\n  public order: ControlBarItemOptions[\"order\"];\n\n  /**\n   * Create new instance of the ControlBarItem\n   * @ko ControlBarItem의 새로운 인스턴스를 생성합니다.\n   * @param options Options {@ko 옵션들}\n   */\n  public constructor(options: ControlBarItemOptions) {\n    this.position = options.position;\n    this.order = options.order;\n  }\n\n  /**\n   * Initialize item.\n   * @ko 아이템을 초기화합니다.\n   * @param viewer - A instance of viewer to attach item {@ko 아이템을 부착할 뷰어의 인스턴스}\n   * @param controlBar - A instance of control bar to attach item {@ko 아이템을 부착할 컨트롤바의 인스턴스}\n   * @since 4.0.0\n   */\n  public abstract init(viewer: View360, controlBar: ControlBar): any;\n  /**\n   * Destroy item and release all resources & event handlers.\n   * @ko 아이템을 제거하고 할당된 모든 리소스 및 이벤트 핸들러를 제거합니다.\n   * @param viewer - A instance of viewer to detach item {@ko 아이템을 떼어 낼 뷰어의 인스턴스}\n   * @param controlBar - A instance of control bar to detach item {@ko 아이템을 떼어 낼 컨트롤바의 인스턴스}\n   * @since 4.0.0\n   */\n  public abstract destroy(viewer: View360, controlBar: ControlBar): any;\n}\n\nexport default ControlBarItem;\n","export const CONTROL_BAR_DEFAULT_CLASS = {\n  CONTROLS_ROOT: \"view360-controls\",\n  CONTROLS_BG: \"view360-controls-background\",\n  CONTROLS_MAIN: \"view360-controls-main\",\n  CONTROLS_TOP: \"view360-controls-top\",\n  CONTROLS_BOTTOM: \"view360-controls-bottom\",\n  CONTROLS_MID: \"view360-controls-mid\",\n  CONTROLS_LEFT: \"view360-controls-left\",\n  CONTROLS_RIGHT: \"view360-controls-right\",\n  CONTROLS_FLOAT_LEFT: \"view360-controls-float-left\",\n  CONTROLS_FLOAT_RIGHT: \"view360-controls-float-right\",\n  CONTROLS_BUTTON: \"view360-controls-button\",\n  PROGRESS_ROOT: \"view360-controls-progress\",\n  VOLUME_ROOT: \"view360-controls-volume\",\n  RANGE_ROOT: \"view360-range\",\n  RANGE_TRACK: \"view360-range-track\",\n  RANGE_THUMB: \"view360-range-thumb\",\n  RANGE_FILLER: \"view360-range-filler\",\n  PLAY_BUTTON: \"view360-controls-play\",\n  PAUSE_BUTTON: \"view360-controls-pause\",\n  UNMUTED_BUTTON: \"view360-controls-unmuted\",\n  MUTED_BUTTON: \"view360-controls-muted\",\n  FULLSCREEN_BUTTON: \"view360-controls-fullscreen\",\n  FULLSCREEN_EXIT_BUTTON: \"view360-controls-fullscreen-exit\",\n  VR_BUTTON: \"view360-controls-vr\",\n  GYRO_ENABLED: \"view360-controls-gyro-enabled\",\n  GYRO_DISABLED: \"view360-controls-gyro-disabled\",\n  VIDEO_TIME_DISPLAY: \"view360-controls-time\",\n  PIEVIEW_ROOT: \"view360-controls-pie\",\n  FIXED: \"view360-controls-fixed\",\n  UNAVAILABLE: \"view360-controls-unavailable\",\n  HIDDEN: \"view360-controls-hidden\"\n} as const;\n\nexport const CONTROL_BAR_ITEM_POSITION = {\n  /**\n   * Place control bar item floating at top-left corner\n   * @ko 아이템을 왼쪽 위 구석에 표시합니다.\n   * @since 4.0.0\n   */\n  TOP_LEFT: \"top-left\",\n  /**\n   * Place control bar item floating at top-right corner\n   * @ko 아이템을 오른쪽 위 구석에 표시합니다.\n   * @since 4.0.0\n   */\n  TOP_RIGHT: \"top-right\",\n  /**\n   * Place control bar item at upper block inside the bottom control bar.\n   * @ko 아이템을 하단에 표시되는 컨트롤바 내에서 위쪽 블럭에 표시합니다.\n   * @since 4.0.0\n   */\n  MAIN_TOP: \"main-top\",\n  /**\n   * Place control bar item at lower block inside the bottom control bar.\n   * @ko 아이템을 하단에 표시되는 컨트롤바 내에서 하단 블럭에 표시합니다.\n   * @since 4.0.0\n   */\n  MAIN_BOTTOM: \"main-bottom\",\n  /**\n   * Place control bar item at center-left block inside the bottom control bar.\n   * @ko 아이템을 하단에 표시되는 컨트롤바 내에서 중간 왼쪽 블럭에 표시합니다.\n   * @since 4.0.0\n   */\n  MAIN_LEFT: \"main-left\",\n  /**\n   * Place control bar item at center-right block inside the bottom control bar.\n   * @ko 아이템을 하단에 표시되는 컨트롤바 내에서 중간 오른쪽 블럭에 표시합니다.\n   * @since 4.0.0\n   */\n  MAIN_RIGHT: \"main-right\"\n} as const;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Component from \"@egjs/component\";\nimport { ControlBarOptions } from \"./ControlBar\";\nimport { CONTROL_BAR_DEFAULT_CLASS } from \"./const\";\nimport Motion from \"../../core/Motion\";\nimport MouseInput from \"../../control/input/MouseInput\";\nimport TouchInput from \"../../control/input/TouchInput\";\nimport { CONTROL_EVENTS, INFINITE_RANGE } from \"../../const/internal\";\nimport { clamp } from \"../../utils\";\nimport { InputEvents } from \"../../type/internal\";\nimport { EL_DIV } from \"../../const/browser\";\n\nclass RangeControl extends Component<{\n  [CONTROL_EVENTS.INPUT_START]: number;\n  [CONTROL_EVENTS.CHANGE]: number;\n  [CONTROL_EVENTS.INPUT_END]: void;\n}> {\n  public readonly rootEl: HTMLElement;\n  public readonly thumbEl: HTMLElement;\n  public readonly trackEl: HTMLElement;\n  public readonly fillerEl: HTMLElement;\n\n  private _motion: Motion;\n  private _mouseInput: MouseInput;\n  private _touchInput: TouchInput;\n  private _fixedClass: string;\n  private _bbox: DOMRect;\n\n  /**\n   *\n   */\n  public constructor() {\n    super();\n\n    const root = document.createElement(EL_DIV);\n    const track = document.createElement(EL_DIV);\n    const thumb = document.createElement(EL_DIV);\n    const filler = document.createElement(EL_DIV);\n\n    root.draggable = false;\n\n    track.appendChild(filler);\n    track.appendChild(thumb);\n    root.appendChild(track);\n\n    this.rootEl = root;\n    this.trackEl = track;\n    this.thumbEl = thumb;\n    this.fillerEl = filler;\n\n    this._mouseInput = new MouseInput();\n    this._touchInput = new TouchInput();\n    this._motion = new Motion({ duration: 1, range: INFINITE_RANGE, easing: x => x });\n    this._bbox = {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      top: 0\n    } as DOMRect;\n    this._fixedClass = CONTROL_BAR_DEFAULT_CLASS.FIXED;\n  }\n\n  public init(className: Required<ControlBarOptions[\"className\"]>) {\n    const mouseInput = this._mouseInput;\n    const touchInput = this._touchInput;\n\n    this.rootEl.classList.add(className.RANGE_ROOT);\n    this.trackEl.classList.add(className.RANGE_TRACK);\n    this.thumbEl.classList.add(className.RANGE_THUMB);\n    this.fillerEl.classList.add(className.RANGE_FILLER);\n    this._fixedClass = className.FIXED;\n\n    mouseInput.on(CONTROL_EVENTS.INPUT_START, this._onHold);\n    touchInput.on(CONTROL_EVENTS.INPUT_START, this._onHold);\n\n    mouseInput.on(CONTROL_EVENTS.INPUT_END, this._onRelease);\n    touchInput.on(CONTROL_EVENTS.INPUT_END, this._onRelease);\n\n    mouseInput.on(CONTROL_EVENTS.CHANGE, this._onChange);\n    touchInput.on(CONTROL_EVENTS.CHANGE, this._onChange);\n\n    mouseInput.enable(this.rootEl);\n    touchInput.enable(this.rootEl);\n\n    this.resize();\n  }\n\n  public destroy() {\n    const mouseInput = this._mouseInput;\n    const touchInput = this._touchInput;\n\n    this.rootEl.className = \"\";\n    this.trackEl.className = \"\";\n    this.thumbEl.className = \"\";\n    this.fillerEl.className = \"\";\n\n    mouseInput.off();\n    touchInput.off();\n    mouseInput.disable();\n    touchInput.disable();\n  }\n\n  public resize() {\n    this._bbox = this.trackEl.getBoundingClientRect();\n  }\n\n  public updateStyle(progress: number) {\n    const width = this._bbox.width;\n    const clampedProgress = clamp(progress, 0, 1);\n\n    this.fillerEl.style.width = `${clampedProgress * 100}%`;\n    this.thumbEl.style.transform = `translateX(${clampedProgress * width}px)`;\n  }\n\n  private _onHold = ({ srcEvent, isTouch }: InputEvents<{ x: number; y: number }>[typeof CONTROL_EVENTS.INPUT_START]) => {\n    const bbox = this._bbox;\n    if (!bbox) return;\n\n    const x = isTouch\n      ? (srcEvent as TouchEvent).touches[0].pageX\n      : (srcEvent as MouseEvent).pageX;\n    const elX = bbox.x + (window.scrollX ?? window.pageXOffset);\n\n    const clamepdX = clamp(x, elX, elX + bbox.width);\n    const progress = (clamepdX - elX) / bbox.width;\n\n    this._motion.reset(clamepdX);\n    this.thumbEl.classList.add(this._fixedClass);\n\n    this.trigger(CONTROL_EVENTS.INPUT_START, progress);\n  };\n\n  private _onChange = ({ delta }: InputEvents<{ x: number; y: number }>[typeof CONTROL_EVENTS.CHANGE]) => {\n    const motion = this._motion;\n    const bbox = this._bbox;\n    if (!bbox) return;\n\n    motion.setNewEndByDelta(delta.x);\n    motion.update(1);\n\n    const elX = bbox.x + (window.scrollX ?? window.pageXOffset);\n    const clampedX = clamp(motion.val, elX, elX + bbox.width);\n    const progress = (clampedX - elX) / bbox.width;\n\n    this.trigger(CONTROL_EVENTS.CHANGE, progress);\n  };\n\n  private _onRelease = () => {\n    const bbox = this._bbox;\n    if (!bbox) return;\n\n    this.thumbEl.classList.remove(this._fixedClass);\n\n    this.trigger(CONTROL_EVENTS.INPUT_END);\n  };\n}\n\nexport default RangeControl;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport ControlBar from \"./ControlBar\";\nimport ControlBarItem, { ControlBarItemOptions } from \"./ControlBarItem\";\nimport RangeControl from \"./RangeControl\";\nimport View360 from \"../../View360\";\nimport TextureVideo from \"../../texture/TextureVideo\";\nimport { CONTROL_EVENTS, VIDEO_TIME_CHANGE_EVENT } from \"../../const/internal\";\nimport { CONTROL_BAR_ITEM_POSITION } from \"./const\";\nimport { EVENTS } from \"../../const/external\";\nimport * as BROWSER from \"../../const/browser\";\n\n/**\n * Show video progress bar.\n * @ko 비디오의 프로그레스 바를 표시합니다.\n * @category Plugin\n * @group ControlBar\n * @since 4.0.0\n */\nclass ProgressBar extends ControlBarItem {\n  public get element() { return this._rangeControl.rootEl; }\n\n  private _controlBar: ControlBar | null;\n  private _video: TextureVideo | null;\n  private _rangeControl: RangeControl;\n\n  private _wasPaused: boolean;\n  private _currentTime: number;\n  private _duration: number;\n  private _playPromise: Promise<void> | null;\n\n  /**\n   * Create a new instance.\n   * @ko 새로운 인스턴스를 생성합니다.\n   * @param options - Options {@ko 옵션들}\n   */\n  public constructor({\n    position = CONTROL_BAR_ITEM_POSITION.MAIN_TOP,\n    order = 9999\n  }: Partial<ControlBarItemOptions> = {}) {\n    super({\n      position,\n      order\n    });\n\n    this.position = position;\n    this.order = order;\n\n    this._controlBar = null;\n    this._rangeControl = new RangeControl();\n\n    this._video = null;\n    this._wasPaused = false;\n    this._currentTime = 0;\n    this._duration = 0;\n    this._playPromise = null;\n  }\n\n  public init(viewer: View360, controlBar: ControlBar) {\n    const video = viewer.projection?.getTexture();\n    const element = this.element;\n    const rangeControl = this._rangeControl;\n    const unavailableClass = controlBar.className.UNAVAILABLE;\n\n    if (!video || !video.isVideo()) {\n      element.classList.add(unavailableClass);\n      return;\n    }\n\n    element.classList.remove(unavailableClass);\n    element.classList.add(controlBar.className.PROGRESS_ROOT);\n    viewer.on(EVENTS.RESIZE, this._onResize);\n    video.source.addEventListener(BROWSER.EVENTS.VIDEO_TIME_UPDATE, this._onTimeUpdate);\n    video.source.addEventListener(BROWSER.EVENTS.VIDEO_DURATION_CHANGE, this._onDurationChange);\n    video.source.addEventListener(VIDEO_TIME_CHANGE_EVENT, this._onTimeUpdate);\n    rangeControl.init(controlBar.className);\n    rangeControl.on(CONTROL_EVENTS.INPUT_START, this._onHold);\n    rangeControl.on(CONTROL_EVENTS.CHANGE, this._onControl);\n    rangeControl.on(CONTROL_EVENTS.INPUT_END, this._onRelease);\n\n    this._video = video;\n    this._currentTime = video.source.currentTime;\n    this._duration = video.source.duration;\n    this._controlBar = controlBar;\n\n    rangeControl.updateStyle(this._currentTime / this._duration);\n  }\n\n  public destroy(viewer: View360) {\n    const video = this._video;\n\n    viewer.off(EVENTS.RESIZE, this._onResize);\n\n    if (video) {\n      video.source.removeEventListener(BROWSER.EVENTS.VIDEO_TIME_UPDATE, this._onTimeUpdate);\n      video.source.removeEventListener(BROWSER.EVENTS.VIDEO_DURATION_CHANGE, this._onDurationChange);\n      video.source.removeEventListener(VIDEO_TIME_CHANGE_EVENT, this._onTimeUpdate);\n    }\n\n    this._rangeControl.destroy();\n    this._video = null;\n    this._playPromise = null;\n  }\n\n  private _onResize = () => {\n    this._rangeControl.resize();\n  }\n\n  private _onTimeUpdate = () => {\n    const video = this._video;\n    if (!video) return;\n\n    this._currentTime = video.source.currentTime;\n    this._rangeControl.updateStyle(this._currentTime / this._duration);\n  };\n\n  private _onDurationChange = () => {\n    const video = this._video;\n    if (!video) return;\n\n    this._duration = video.source.duration;\n    this._rangeControl.updateStyle(this._currentTime / this._duration);\n  };\n\n  private _onHold = (progress: number) => {\n    const video = this._video;\n    const controlBar = this._controlBar;\n    if (!video || !controlBar) return;\n\n    const paused = video.isPaused();\n\n    video.source.pause();\n\n    const time = video.source.duration * progress;\n    video.source.currentTime = time;\n    video.source.dispatchEvent(new CustomEvent(VIDEO_TIME_CHANGE_EVENT, { detail: { time }}));\n\n    controlBar.rootEl.classList.add(controlBar.className.FIXED);\n    this._wasPaused = !this._playPromise && paused;\n  };\n\n  private _onControl = (progress: number) => {\n    const video = this._video;\n    if (!video) return;\n\n    const time = video.source.duration * progress;\n    video.source.currentTime = time;\n    video.source.dispatchEvent(new CustomEvent(VIDEO_TIME_CHANGE_EVENT, { detail: { time }}));\n  };\n\n  private _onRelease = () => {\n    const video = this._video;\n    const controlBar = this._controlBar;\n\n    if (video && controlBar) {\n      if (!this._wasPaused && !this._playPromise) {\n        this._playPromise = video.source.play()\n          .catch(() => void 0);\n\n        // This should not be chained\n        this._playPromise.then(() => {\n          this._playPromise = null;\n        });\n\n        controlBar.rootEl.classList.remove(controlBar.className.FIXED);\n      }\n    }\n\n    this._wasPaused = false;\n  };\n}\n\nexport default ProgressBar;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport ControlBar from \"./ControlBar\";\nimport ControlBarItem, { ControlBarItemOptions } from \"./ControlBarItem\";\nimport { CONTROL_BAR_ITEM_POSITION } from \"./const\";\nimport View360 from \"../../View360\";\nimport TextureVideo from \"../../texture/TextureVideo\";\nimport * as BROWSER from \"../../const/browser\";\n\n/**\n * Show video play / pause button.\n * @ko 비디오 재생 / 일시정지 버튼을 표시합니다.\n * @category Plugin\n * @group ControlBar\n * @since 4.0.0\n */\nclass PlayButton extends ControlBarItem {\n  public readonly element: HTMLElement;\n  private _controlBar: ControlBar | null;\n  private _video: TextureVideo | null;\n  private _paused: boolean;\n\n  /**\n   * Create a new instance.\n   * @ko 새로운 인스턴스를 생성합니다.\n   * @param options - Options {@ko 옵션들}\n   */\n  public constructor({\n    position = CONTROL_BAR_ITEM_POSITION.MAIN_LEFT,\n    order = 9999\n  }: Partial<ControlBarItemOptions> = {}) {\n    super({\n      position,\n      order\n    });\n\n    this.element = document.createElement(BROWSER.EL_BUTTON);\n\n    this._video = null;\n    this._paused = true;\n    this._controlBar = null;\n  }\n\n  public init(viewer: View360, controlBar: ControlBar) {\n    const element = this.element;\n    const video = viewer.projection?.getTexture();\n    const className = controlBar.className;\n    const unavailableClass = className.UNAVAILABLE;\n\n    if (!video || !video.isVideo()) {\n      element.classList.add(unavailableClass);\n      return;\n    }\n\n    element.classList.add(className.CONTROLS_BUTTON);\n    element.classList.remove(unavailableClass);\n\n    const paused = video.isPaused();\n    this._video = video;\n    this._paused = paused;\n    this._controlBar = controlBar;\n\n    if (paused) {\n      this._onPause();\n    } else {\n      this._onPlay();\n    }\n\n    element.addEventListener(BROWSER.EVENTS.CLICK, this._onClick);\n    video.source.addEventListener(BROWSER.EVENTS.VIDEO_PLAY, this._onPlay);\n    video.source.addEventListener(BROWSER.EVENTS.VIDEO_PAUSE, this._onPause);\n  }\n\n  public destroy() {\n    const video = this._video;\n    const element = this.element;\n\n    if (!video) return;\n\n    element.className = \"\";\n    element.removeEventListener(BROWSER.EVENTS.CLICK, this._onClick);\n    video.source.removeEventListener(BROWSER.EVENTS.VIDEO_PLAY, this._onPlay);\n    video.source.removeEventListener(BROWSER.EVENTS.VIDEO_PAUSE, this._onPause);\n\n    this._video = null;\n    this._paused = true;\n    this._controlBar = null;\n  }\n\n  private _onClick = () => {\n    const video = this._video;\n    if (!video) return;\n\n    if (this._paused) {\n      video.source.play();\n    } else {\n      video.source.pause();\n    }\n  };\n\n  private _onPlay = () => {\n    if (!this._controlBar) return;\n\n    const element = this.element;\n    const className = this._controlBar.className;\n\n    element.classList.add(className.PAUSE_BUTTON);\n    element.classList.remove(className.PLAY_BUTTON);\n    element.title = \"Pause Video\";\n\n    this._paused = false;\n  };\n\n  private _onPause = () => {\n    if (!this._controlBar) return;\n\n    const element = this.element;\n    const className = this._controlBar.className;\n\n    element.classList.add(className.PLAY_BUTTON);\n    element.classList.remove(className.PAUSE_BUTTON);\n    element.title = \"Play Video\";\n\n    this._paused = true;\n  };\n}\n\nexport default PlayButton;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport ControlBar from \"./ControlBar\";\nimport ControlBarItem, { ControlBarItemOptions } from \"./ControlBarItem\";\nimport RangeControl from \"./RangeControl\";\nimport { CONTROL_BAR_ITEM_POSITION } from \"./const\";\nimport View360 from \"../../View360\";\nimport TextureVideo from \"../../texture/TextureVideo\";\nimport * as BROWSER from \"../../const/browser\";\nimport { CONTROL_EVENTS } from \"../../const/internal\";\nimport { EVENTS } from \"../../const/external\";\n\n/**\n * Show video volume control.\n * @ko 비디오 볼륨 조절 버튼을 표시합니다.\n * @category Plugin\n * @group ControlBar\n * @since 4.0.0\n */\nclass VolumeControl extends ControlBarItem {\n  public get element() { return this._rootEl; }\n\n  private _controlBar: ControlBar | null;\n  private _rootEl: HTMLButtonElement;\n  private _buttonEl: HTMLElement;\n  private _rangeControl: RangeControl;\n  private _video: TextureVideo | null;\n\n  /**\n   * Create a new instance.\n   * @ko 새로운 인스턴스를 생성합니다.\n   * @param options - Options {@ko 옵션들}\n   */\n  public constructor({\n    position = CONTROL_BAR_ITEM_POSITION.MAIN_RIGHT,\n    order = 9999\n  }: Partial<ControlBarItemOptions> = {}) {\n    super({\n      position,\n      order\n    });\n\n    this._controlBar = null;\n    this._rangeControl = new RangeControl();\n    this._createElements();\n\n    this._video = null;\n  }\n\n  public init(viewer: View360, controlBar: ControlBar) {\n    const video = viewer.projection?.getTexture();\n    const root = this._rootEl;\n    const button = this._buttonEl;\n    const rangeControl = this._rangeControl;\n    const className = controlBar.className;\n    const unavailableClass = className.UNAVAILABLE;\n\n    if (!video || !video.isVideo()) {\n      root.classList.add(unavailableClass);\n      return;\n    }\n\n    root.classList.remove(unavailableClass);\n    root.classList.add(className.CONTROLS_BUTTON);\n    root.classList.add(className.VOLUME_ROOT);\n    button.classList.add(className.CONTROLS_BUTTON);\n\n    if (video.source.muted) {\n      button.classList.add(className.MUTED_BUTTON);\n    } else {\n      button.classList.add(className.UNMUTED_BUTTON);\n    }\n\n    viewer.on(EVENTS.RESIZE, this._onResize);\n    root.addEventListener(BROWSER.EVENTS.TRANSITION_END, this._onResize);\n    button.addEventListener(BROWSER.EVENTS.CLICK, this._onClick);\n\n    video.source.addEventListener(BROWSER.EVENTS.VIDEO_VOLUME_CHANGE, this._onVolumeChange);\n    video.source.addEventListener(BROWSER.EVENTS.VIDEO_LOADED_DATA, this._updateDisplay);\n    video.source.addEventListener(BROWSER.EVENTS.VIDEO_CAN_PLAYTHROUGH, this._updateDisplay);\n\n    rangeControl.init(className);\n    rangeControl.on(CONTROL_EVENTS.INPUT_START, this._onHold);\n    rangeControl.on(CONTROL_EVENTS.CHANGE, this._onChange);\n    rangeControl.on(CONTROL_EVENTS.INPUT_END, this._onRelease);\n\n    this._controlBar = controlBar;\n    this._video = video;\n\n    this._updateDisplay();\n  }\n\n  public destroy(viewer: View360) {\n    const video = this._video;\n    const button = this._buttonEl;\n    const root = this._rootEl;\n\n    root.className = \"\";\n    button.className = \"\";\n\n    viewer.off(EVENTS.RESIZE, this._onResize);\n    root.removeEventListener(BROWSER.EVENTS.TRANSITION_END, this._onResize);\n    button.removeEventListener(BROWSER.EVENTS.CLICK, this._onClick);\n\n    if (video) {\n      video.source.removeEventListener(BROWSER.EVENTS.VIDEO_VOLUME_CHANGE, this._onVolumeChange);\n      video.source.removeEventListener(BROWSER.EVENTS.VIDEO_LOADED_DATA, this._updateDisplay);\n      video.source.removeEventListener(BROWSER.EVENTS.VIDEO_CAN_PLAYTHROUGH, this._updateDisplay);\n    }\n\n    this._controlBar = null;\n    this._rangeControl.destroy();\n    this._video = null;\n  }\n\n  private _onResize = () => {\n    this._rangeControl.resize();\n    this._updateDisplay();\n  }\n\n  private _onClick = () => {\n    const video = this._video;\n    if (!video || this._rootEl.disabled) return;\n\n    video.source.muted = !video.source.muted;\n  };\n\n  private _onVolumeChange = () => {\n    const button = this._buttonEl;\n    const video = this._video;\n    const controlBar = this._controlBar;\n\n    if (!video || !controlBar) return;\n\n    const className = controlBar.className;\n\n    if (video.source.muted || video.source.volume === 0) {\n      button.classList.add(className.MUTED_BUTTON);\n      button.classList.remove(className.UNMUTED_BUTTON);\n    } else {\n      button.classList.add(className.UNMUTED_BUTTON);\n      button.classList.remove(className.MUTED_BUTTON);\n    }\n\n    this._updateDisplay();\n  };\n\n  private _createElements() {\n    const root = document.createElement(BROWSER.EL_BUTTON);\n    const buttonEl = document.createElement(BROWSER.EL_DIV);\n\n    root.appendChild(this._rangeControl.rootEl);\n    root.appendChild(buttonEl);\n    root.title = \"Toggle Mute\";\n\n    this._rootEl = root;\n    this._buttonEl = buttonEl;\n  }\n\n  private _onHold = (progress: number) => {\n    const video = this._video;\n    const controlBar = this._controlBar;\n\n    if (!video || !controlBar) return;\n\n    const className = controlBar.className;\n\n    video.source.volume = progress;\n\n    this._rootEl.classList.add(className.FIXED);\n    controlBar.containerEl.classList.add(className.FIXED);\n\n    this._updateDisplay();\n  };\n\n  private _onChange = (progress: number) => {\n    const video = this._video;\n    if (!video) return;\n\n    video.source.volume = progress;\n    if (progress > 0) {\n      video.source.muted = false;\n    } else {\n      video.source.muted = true;\n    }\n\n    this._updateDisplay();\n  };\n\n  private _onRelease = () => {\n    const controlBar = this._controlBar;\n    if (!controlBar) return;\n\n    const className = controlBar.className;\n\n    this._rootEl.classList.remove(className.FIXED);\n    controlBar.containerEl.classList.remove(className.FIXED);\n  };\n\n  private _updateDisplay = () => {\n    const video = this._video;\n    const root = this._rootEl;\n    if (!video) return;\n\n    if (!video.hasAudio()) {\n      root.disabled = true;\n      return;\n    }\n\n    root.disabled = false;\n\n    const volume = video.source.muted ? 0 : video.source.volume;\n\n    this._rangeControl.updateStyle(volume);\n  };\n}\n\nexport default VolumeControl;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport ControlBar from \"./ControlBar\";\nimport ControlBarItem, { ControlBarItemOptions } from \"./ControlBarItem\";\nimport { CONTROL_BAR_ITEM_POSITION } from \"./const\";\nimport View360 from \"../../View360\";\nimport * as BROWSER from \"../../const/browser\";\nimport { isFullscreen } from \"../../utils\";\n\n/**\n * Show fullscreen enter / exit button.\n * @ko 풀스크린 진입 / 해제 버튼을 표시합니다.\n * @category Plugin\n * @group ControlBar\n * @since 4.0.0\n */\nclass FullscreenButton extends ControlBarItem {\n  public readonly element: HTMLElement;\n  private _controlBar: ControlBar | null;\n  private _targetEl: HTMLElement | null;\n\n  /**\n   * Create a new instance.\n   * @ko 새로운 인스턴스를 생성합니다.\n   * @param options - Options {@ko 옵션들}\n   */\n  public constructor({\n    position = CONTROL_BAR_ITEM_POSITION.MAIN_RIGHT,\n    order = 9999\n  }: Partial<ControlBarItemOptions> = {}) {\n    super({\n      position,\n      order\n    });\n\n    this.element = document.createElement(BROWSER.EL_BUTTON);\n    this.element.title = \"Toggle Fullscreen\";\n    this._controlBar = null;\n    this._targetEl = null;\n  }\n\n  public init(viewer: View360, controlBar: ControlBar) {\n    const element = this.element;\n    const className = controlBar.className;\n\n    if (!this._fullscreenAvailable()) {\n      element.classList.add(className.UNAVAILABLE);\n      return;\n    }\n\n    element.classList.add(className.CONTROLS_BUTTON);\n    element.classList.remove(className.UNAVAILABLE);\n    element.addEventListener(BROWSER.EVENTS.CLICK, this._onClick);\n    this._addFullscreenHandlers();\n\n    if (isFullscreen()) {\n      element.classList.add(className.FULLSCREEN_EXIT_BUTTON);\n    } else {\n      element.classList.add(className.FULLSCREEN_BUTTON);\n    }\n\n    this._controlBar = controlBar;\n    this._targetEl = viewer.rootEl;\n  }\n\n  public destroy() {\n    const element = this.element;\n\n    element.className = \"\";\n    element.removeEventListener(BROWSER.EVENTS.CLICK, this._onClick);\n    this._removeFullscreenHandlers();\n\n    this._controlBar = null;\n    this._targetEl = null;\n  }\n\n  private _onClick = () => {\n    const target = this._targetEl;\n    if (!target) return;\n\n    if (isFullscreen()) {\n      this._exitFullscreen();\n    } else {\n      this._requestFullscreen(target);\n    }\n  };\n\n  private _fullscreenAvailable() {\n    return BROWSER.FULLSCREEN_REQUEST.some(key => !!document[key]);\n  }\n\n  private _requestFullscreen(el: HTMLElement) {\n    for (const key of BROWSER.FULLSCREEN_REQUEST) {\n      const request = el[key];\n      if (request) {\n        request.call(el);\n        return;\n      }\n    }\n  }\n\n  private _exitFullscreen() {\n    for (const key of BROWSER.FULLSCREEN_EXIT) {\n      const exit = document[key];\n\n      if (exit) {\n        exit.call(document);\n        return;\n      }\n    }\n  }\n\n  private _addFullscreenHandlers() {\n    BROWSER.FULLSCREEN_CHANGE.forEach(evtName => {\n      document.addEventListener(evtName, this._onFullscreenChange);\n    });\n  }\n\n  private _removeFullscreenHandlers() {\n    BROWSER.FULLSCREEN_CHANGE.forEach(evtName => {\n      document.removeEventListener(evtName, this._onFullscreenChange);\n    });\n  }\n\n  private _onFullscreenChange = () => {\n    const element = this.element;\n    const controlBar = this._controlBar;\n\n    if (!controlBar) return;\n\n    const className = controlBar.className;\n\n    if (isFullscreen()) {\n      element.classList.add(className.FULLSCREEN_EXIT_BUTTON);\n      element.classList.remove(className.FULLSCREEN_BUTTON);\n    } else {\n      element.classList.add(className.FULLSCREEN_BUTTON);\n      element.classList.remove(className.FULLSCREEN_EXIT_BUTTON);\n    }\n  };\n}\n\nexport default FullscreenButton;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport ControlBar from \"./ControlBar\";\nimport ControlBarItem, { ControlBarItemOptions } from \"./ControlBarItem\";\nimport { CONTROL_BAR_ITEM_POSITION } from \"./const\";\nimport View360 from \"../../View360\";\nimport TextureVideo from \"../../texture/TextureVideo\";\nimport * as BROWSER from \"../../const/browser\";\nimport { VIDEO_TIME_CHANGE_EVENT } from \"../../const/internal\";\n\n/**\n * Show video current / total time.\n * @ko 비디오의 현재 / 총 재생시간을 표시합니다.\n * @category Plugin\n * @group ControlBar\n * @since 4.0.0\n */\nclass VideoTime extends ControlBarItem {\n  public readonly element: HTMLElement;\n  private _video: TextureVideo | null;\n  private _currentTime: number;\n  private _duration: number;\n\n  /**\n   * Create a new instance.\n   * @ko 새로운 인스턴스를 생성합니다.\n   * @param options - Options {@ko 옵션들}\n   */\n  public constructor({\n    position = CONTROL_BAR_ITEM_POSITION.MAIN_LEFT,\n    order = 9999\n  }: Partial<ControlBarItemOptions> = {}) {\n    super({\n      position,\n      order\n    });\n\n    this.element = document.createElement(BROWSER.EL_DIV);\n\n    this._video = null;\n    this._currentTime = 0;\n    this._duration = 0;\n  }\n\n  public init(viewer: View360, controlBar: ControlBar) {\n    const video = viewer.projection?.getTexture();\n    const element = this.element;\n    const className = controlBar.className;\n\n    if (!video || !video.isVideo()) {\n      element.classList.add(className.UNAVAILABLE);\n      return;\n    }\n\n    element.classList.add(className.VIDEO_TIME_DISPLAY);\n    element.classList.remove(className.UNAVAILABLE);\n\n    video.source.addEventListener(BROWSER.EVENTS.VIDEO_TIME_UPDATE, this._onTimeUpdate);\n    video.source.addEventListener(BROWSER.EVENTS.VIDEO_DURATION_CHANGE, this._onDurationChange);\n    video.source.addEventListener(VIDEO_TIME_CHANGE_EVENT, this._onCustomTimeChange);\n\n    this._video = video;\n    this._currentTime = video.source.currentTime;\n    this._duration = video.source.duration;\n\n    this._updateDisplay();\n  }\n\n  public destroy() {\n    const video = this._video;\n\n    if (!video) return;\n\n    this.element.className = \"\";\n    video.source.removeEventListener(BROWSER.EVENTS.VIDEO_TIME_UPDATE, this._onTimeUpdate);\n    video.source.removeEventListener(BROWSER.EVENTS.VIDEO_DURATION_CHANGE, this._onDurationChange);\n    video.source.removeEventListener(VIDEO_TIME_CHANGE_EVENT, this._onCustomTimeChange);\n\n    this._video = null;\n  }\n\n  private _onTimeUpdate = () => {\n    const video = this._video;\n    if (!video) return;\n\n    this._currentTime = video.source.currentTime;\n    this._updateDisplay();\n  };\n\n  private _onDurationChange = () => {\n    const video = this._video;\n    if (!video) return;\n\n    this._duration = video.source.duration;\n    this._updateDisplay();\n  };\n\n  private _onCustomTimeChange = (evt: CustomEvent<{ time: number }>) => {\n    this._currentTime = evt.detail.time;\n    this._updateDisplay();\n  };\n\n  private _updateDisplay() {\n    const time = this._currentTime;\n    const timeMinute = Math.floor(time / 60);\n    const timeSeconds = Math.floor(time - timeMinute * 60);\n    const timeSecondsFormatted = timeSeconds < 10 ? `0${timeSeconds}` : timeSeconds;\n\n    const duration = this._duration;\n    const durationMinute = Math.floor(duration / 60);\n    const durationSeconds = Math.floor(duration - durationMinute * 60);\n    const durationSecondsFormatted = durationSeconds < 10 ? `0${durationSeconds}` : durationSeconds;\n\n    this.element.innerText = `${timeMinute}:${timeSecondsFormatted} / ${durationMinute}:${durationSecondsFormatted}`;\n  }\n}\n\nexport default VideoTime;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport ControlBar from \"./ControlBar\";\nimport ControlBarItem, { ControlBarItemOptions } from \"./ControlBarItem\";\nimport { CONTROL_BAR_ITEM_POSITION } from \"./const\";\nimport View360 from \"../../View360\";\nimport { circulate, getObjectOption } from \"../../utils\";\nimport * as BROWSER from \"../../const/browser\";\nimport { EVENTS } from \"../../const/external\";\nimport { SVG_NAMESPACE } from \"../../const/internal\";\n\n/**\n * Options for {@link PieView}\n * @ko {@link PieView}용 옵션들\n * @category Plugin\n */\nexport interface PieViewOptions extends ControlBarItemOptions {\n  /**\n   * @copy PieView#resetCamera\n   */\n  resetCamera: boolean | Partial<{\n    yaw: number;\n    pitch: number;\n    zoom: number;\n    duration: number;\n    easing: (x: number) => number;\n  }>;\n}\n\n/**\n * Show camera direction/fov indicator.\n * @ko 카메라가 향하는 방향 및 FOV를 표시합니다.\n * @category Plugin\n * @group ControlBar\n * @since 4.0.0\n */\nclass PieView extends ControlBarItem {\n  public readonly element: HTMLElement;\n\n  /**\n   * Set rotation to reset camera to when PieView is clicked.\n   * `false` will disable this value, and `true` will enable with default options.\n   * @ko PieView가 클릭되었을 때 카메라를 리셋할 방향을 지정합니다.\n   * `false`일 경우 이 동작을 비활성화하며, `true`일 경우 기본값을 사용합니다.\n   * @since 4.0.0\n   */\n  public resetCamera: PieViewOptions[\"resetCamera\"];\n\n  private _viewer: View360 | null;\n  private _piePathEl: SVGPathElement;\n  private _rangeCircleEl: SVGCircleElement;\n\n  /**\n   * Create a new instance.\n   * @ko 새로운 인스턴스를 생성합니다.\n   * @param options - Options {@ko 옵션들}\n   */\n  public constructor({\n    resetCamera = true,\n    position = CONTROL_BAR_ITEM_POSITION.TOP_RIGHT,\n    order = 9999\n  }: Partial<PieViewOptions> = {}) {\n    super({\n      position,\n      order\n    });\n\n    this.element = document.createElement(BROWSER.EL_DIV);\n    this.element.title = \"Reset view\";\n    this.resetCamera = resetCamera;\n    this._createPieElements();\n    this._viewer = null;\n  }\n\n  public init(viewer: View360, controlBar: ControlBar) {\n    const element = this.element;\n\n    if (!viewer.initialized) {\n      viewer.once(EVENTS.READY, this._updatePie);\n    } else {\n      this._updatePie({ target: viewer });\n    }\n\n    const rootClass = controlBar.className.PIEVIEW_ROOT;\n    element.classList.add(rootClass);\n\n    if (this.resetCamera) {\n      element.addEventListener(BROWSER.EVENTS.CLICK, this._onClick);\n    }\n\n    viewer.on(EVENTS.VIEW_CHANGE, this._updatePie);\n\n    this._viewer = viewer;\n  }\n\n  public destroy(viewer: View360) {\n    const element = this.element;\n\n    element.removeEventListener(BROWSER.EVENTS.CLICK, this._onClick);\n    element.className = \"\";\n    viewer.off(EVENTS.READY, this._updatePie);\n    viewer.off(EVENTS.VIEW_CHANGE, this._updatePie);\n\n    this._viewer = null;\n  }\n\n  private _onClick = () => {\n    const viewer = this._viewer;\n    const resetCamera = this.resetCamera;\n\n    if (!viewer || !resetCamera) return;\n\n    const {\n      yaw = viewer.initialYaw,\n      pitch = viewer.initialPitch,\n      zoom = viewer.initialZoom,\n      duration = 500\n    } = getObjectOption(resetCamera);\n\n    viewer.camera.animateTo({\n      yaw,\n      pitch,\n      zoom,\n      duration\n    });\n  };\n\n  private _createPieElements() {\n    const root = this.element;\n    const pieSVG = document.createElementNS(SVG_NAMESPACE, \"svg\");\n    pieSVG.setAttribute(\"viewBox\", \"0 0 48 48\");\n    pieSVG.setAttribute(\"width\", \"100%\");\n    pieSVG.setAttribute(\"height\", \"100%\");\n\n    const piePath = document.createElementNS(SVG_NAMESPACE, \"circle\");\n\n    piePath.setAttribute(\"stroke\", \"currentColor\");\n    piePath.setAttribute(\"fill\", \"transparent\");\n    piePath.setAttribute(\"cx\", \"24\");\n    piePath.setAttribute(\"cy\", \"24\");\n    piePath.setAttribute(\"r\", \"12\");\n    piePath.setAttribute(\"stroke-width\", \"24\");\n    pieSVG.appendChild(piePath);\n\n    const rangeCircle = document.createElementNS(SVG_NAMESPACE, \"circle\");\n\n    rangeCircle.setAttribute(\"stroke\", \"currentColor\");\n    rangeCircle.setAttribute(\"fill\", \"transparent\");\n    rangeCircle.setAttribute(\"cx\", \"24\");\n    rangeCircle.setAttribute(\"cy\", \"24\");\n    rangeCircle.setAttribute(\"r\", \"22.5\");\n    rangeCircle.setAttribute(\"stroke-width\", \"3\");\n    pieSVG.appendChild(rangeCircle);\n\n    root.appendChild(pieSVG);\n\n    this._piePathEl = piePath;\n    this._rangeCircleEl = rangeCircle;\n  }\n\n  private _updatePie = ({ target: viewer }: { target: View360 }) => {\n    const piePath = this._piePathEl;\n    const rangeCircle = this._rangeCircleEl;\n    const camera = viewer.camera;\n    const fov = camera.getHorizontalFov();\n    const yawRange = camera.getYawRange(camera.zoom);\n    const halfFov = fov * 0.5;\n\n    const pieRadius = 24 * Math.PI;\n    const pieDeg = pieRadius * fov / 360;\n    const pieOffset = pieRadius * (camera.yaw + halfFov + 90) / 360;\n\n    piePath.setAttribute(\"stroke-dasharray\", `${pieDeg} ${pieRadius - pieDeg}`);\n    piePath.setAttribute(\"stroke-dashoffset\", `${pieOffset}`);\n\n    if (isFinite(yawRange.min) && isFinite(yawRange.max)) {\n      const radius = 45 * Math.PI; // 2 * PI * r\n      const min = (circulate(yawRange.min, -180, 180) - halfFov) / 360;\n      const max = (circulate(yawRange.max, -180, 180) + halfFov) / 360;\n\n      const rangeDiff = radius * Math.abs(max - min);\n      const offset = -radius * (min - 0.25);\n\n      rangeCircle.setAttribute(\"stroke-dasharray\", `${rangeDiff} ${radius - rangeDiff}`);\n      rangeCircle.setAttribute(\"stroke-dashoffset\", `${offset}`);\n    } else {\n      rangeCircle.setAttribute(\"stroke-dasharray\", \"\");\n      rangeCircle.setAttribute(\"stroke-dashoffset\", \"\");\n    }\n  };\n}\n\nexport default PieView;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport ControlBar from \"./ControlBar\";\nimport ControlBarItem, { ControlBarItemOptions } from \"./ControlBarItem\";\nimport { CONTROL_BAR_ITEM_POSITION } from \"./const\";\nimport View360 from \"../../View360\";\nimport * as BROWSER from \"../../const/browser\";\n\n/**\n * Show VR enter button.\n * @ko VR 진입 버튼을 표시합니다.\n * @category Plugin\n * @group ControlBar\n * @since 4.0.0\n */\nclass VRButton extends ControlBarItem {\n  public readonly element: HTMLElement;\n\n  private _viewer: View360 | null;\n\n  /**\n   * Create a new instance.\n   * @ko 새로운 인스턴스를 생성합니다.\n   * @param options - Options {@ko 옵션들}\n   */\n  public constructor({\n    position = CONTROL_BAR_ITEM_POSITION.MAIN_RIGHT,\n    order = 9999\n  }: Partial<ControlBarItemOptions> = {}) {\n    super({\n      position,\n      order\n    });\n\n    this.element = document.createElement(BROWSER.EL_BUTTON);\n    this.element.title = \"Enter VR\";\n    this._viewer = null;\n  }\n\n  public init(viewer: View360, controlBar: ControlBar) {\n    const element = this.element;\n    const className = controlBar.className;\n\n    element.classList.add(className.UNAVAILABLE);\n    element.classList.add(className.VR_BUTTON);\n    element.classList.add(className.CONTROLS_BUTTON);\n\n    viewer.vr.isAvailable()\n      .then(available => {\n        if (available) {\n          element.classList.remove(className.UNAVAILABLE);\n        }\n      });\n\n    element.addEventListener(BROWSER.EVENTS.CLICK, this._onClick);\n    this._viewer = viewer;\n  }\n\n  public destroy() {\n    const element = this.element;\n\n    element.className = \"\";\n    element.removeEventListener(BROWSER.EVENTS.CLICK, this._onClick);\n\n    this._viewer = null;\n  }\n\n  private _onClick = () => {\n    const viewer = this._viewer;\n    if (!viewer) return;\n\n    viewer.vr.enter();\n  };\n}\n\nexport default VRButton;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport ControlBar from \"./ControlBar\";\nimport ControlBarItem, { ControlBarItemOptions } from \"./ControlBarItem\";\nimport { CONTROL_BAR_ITEM_POSITION } from \"./const\";\nimport View360 from \"../../View360\";\nimport * as BROWSER from \"../../const/browser\";\nimport GyroControl from \"../../control/GyroControl\";\nimport { CONTROL_EVENTS } from \"../../const/internal\";\nimport { sensorCanBeEnabledIOS } from \"../../utils\";\n\n/**\n * Show gyroscope control enable / disable button\n * @ko 자이로스코프 컨트롤 활성화 / 비활성화 버튼을 표시합니다.\n * @category Plugin\n * @group ControlBar\n * @since 4.0.0\n */\nclass GyroButton extends ControlBarItem {\n  public readonly element: HTMLElement;\n  private _viewer: View360 | null;\n  private _controlBar: ControlBar | null;\n\n  /**\n   * Create a new instance.\n   * @ko 새로운 인스턴스를 생성합니다.\n   * @param options - Options {@ko 옵션들}\n   */\n  public constructor({\n    position = CONTROL_BAR_ITEM_POSITION.MAIN_RIGHT,\n    order = 9999\n  }: Partial<ControlBarItemOptions> = {}) {\n    super({\n      position,\n      order\n    });\n\n    this.element = document.createElement(BROWSER.EL_DIV);\n    this.element.title = \"Toggle gyroscope control\";\n  }\n\n  public init(viewer: View360, controlBar: ControlBar) {\n    const element = this.element;\n    const className = controlBar.className;\n\n    element.addEventListener(BROWSER.EVENTS.CLICK, this._onClick);\n    element.classList.add(className.CONTROLS_BUTTON);\n    element.classList.add(className.UNAVAILABLE);\n\n    const enableButton = () => {\n      element.classList.remove(className.UNAVAILABLE);\n      viewer.control.gyro.on(CONTROL_EVENTS.ENABLE, this._updateStyle);\n      viewer.control.gyro.on(CONTROL_EVENTS.DISABLE, this._updateStyle);\n    };\n\n    if (sensorCanBeEnabledIOS()) {\n      enableButton();\n    } else {\n      GyroControl.isAvailable().then(available => {\n        if (!available) return;\n        enableButton();\n      });\n    }\n\n    this._controlBar = controlBar;\n    this._viewer = viewer;\n    this._updateStyle();\n  }\n\n  public destroy(viewer: View360) {\n    const element = this.element;\n\n    viewer.control.gyro.off(CONTROL_EVENTS.ENABLE, this._updateStyle);\n    viewer.control.gyro.off(CONTROL_EVENTS.DISABLE, this._updateStyle);\n    element.removeEventListener(BROWSER.EVENTS.CLICK, this._onClick);\n    element.className = \"\";\n\n    this._controlBar = null;\n    this._viewer = null;\n  }\n\n  private _onClick = () => {\n    const viewer = this._viewer;\n    const controlBar = this._controlBar;\n\n    if (!viewer || !controlBar) return;\n\n    const gyroControl = viewer.control.gyro;\n    if (gyroControl.enabled) {\n      gyroControl.disable();\n    } else {\n      GyroControl.requestSensorPermission().then(available => {\n        if (available) {\n          gyroControl.enable();\n        } else {\n          this.element.classList.add(controlBar.className.UNAVAILABLE);\n        }\n      });\n    }\n  };\n\n  private _updateStyle = () => {\n    const element = this.element;\n    const viewer = this._viewer;\n    const controlBar = this._controlBar;\n\n    if (!viewer || !controlBar) return;\n\n    const gyroControl = viewer.control.gyro;\n    const className = controlBar.className;\n\n    if (gyroControl.enabled) {\n      element.classList.add(className.GYRO_ENABLED);\n      element.classList.remove(className.GYRO_DISABLED);\n    } else {\n      element.classList.add(className.GYRO_DISABLED);\n      element.classList.remove(className.GYRO_ENABLED);\n    }\n  };\n}\n\nexport default GyroButton;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport ControlBar from \"./ControlBar\";\nimport View360 from \"../../View360\";\nimport * as BROWSER from \"../../const/browser\";\nimport { FULLSCREEN_CHANGE } from \"../../const/browser\";\nimport TextureVideo from \"../../texture/TextureVideo\";\nimport { isFullscreen } from \"../../utils\";\n\n/**\n * Options for ControlBar's {@link ControlBarOptions#autoHide}\n * @ko ControlBar의 {@link ControlBarOptions#autoHide}용 옵션\n * @category Plugin\n * @since 4.0.0\n */\nexport interface AutoHideOptions {\n  /**\n   * Initial delay before the control bar hides (ms)\n   * @ko 컨트롤바가 처음으로 표시되고 사라지기까지 걸리는 시간 (ms)\n   * @default 3000\n   * @since 4.0.0\n   */\n  initialDelay: number;\n  /**\n   * Delay time before hiding the control bar after mouse leave (ms)\n   * @ko 마우스가 컨트롤바 영역을 떠난 뒤 컨트롤바가 사라지기까지 걸리는 시간 (ms)\n   * @default 0\n   * @since 4.0.0\n   */\n  delay: number;\n  /**\n   * Delay time before hiding the control bar becomes active, like touch on mobile device or mouse move in fullscreen mode (ms)\n   * @ko 모바일이나 풀스크린 환경 등에서 사용자 입력이 없을 때 컨트롤바가 사라지기까지 걸리는 시간 (ms)\n   * @default 3000\n   * @since 4.0.0\n   */\n  idleDelay: number;\n}\n\nclass AutoHide {\n  private _initialDelay: AutoHideOptions[\"initialDelay\"];\n  private _delay: AutoHideOptions[\"delay\"];\n  private _idleDelay: AutoHideOptions[\"idleDelay\"];\n\n  private _controlBar: ControlBar;\n  private _timer: number;\n  private _isGrabbing: boolean;\n  private _isCursorInside: boolean;\n  private _isFullscreen: boolean;\n  private _targetEl: HTMLElement | null;\n  private _video: TextureVideo | null;\n\n  public get enabled() { return !!this._targetEl; }\n  public get hidden() { return this._controlBar.containerEl.classList.contains(this._hiddenClass); }\n\n  private get _hiddenClass() { return this._controlBar.className.HIDDEN; }\n  private get _fixedClass() { return this._controlBar.className.FIXED; }\n\n  public constructor(controlBar: ControlBar, {\n    initialDelay = 3000,\n    delay = 0,\n    idleDelay: activationDelay = 3000\n  }: Partial<AutoHideOptions>) {\n    this._controlBar = controlBar;\n    this._initialDelay = initialDelay;\n    this._delay = delay;\n    this._idleDelay = activationDelay;\n    this._timer = -1;\n    this._isCursorInside = false;\n    this._isGrabbing = false;\n    this._isFullscreen = false;\n    this._video = null;\n    this._targetEl = null;\n  }\n\n  public enable(viewer: View360) {\n    if (this._targetEl) {\n      this.disable(viewer);\n    }\n\n    const initialDelay = this._initialDelay;\n    const root = viewer.rootEl;\n\n    this._targetEl = viewer.rootEl;\n    this._timer = window.setTimeout(() => {\n      this.hide();\n    }, initialDelay);\n\n    root.addEventListener(BROWSER.EVENTS.MOUSE_DOWN, this._onHold);\n    root.addEventListener(BROWSER.EVENTS.MOUSE_ENTER, this._onMouseEnter);\n    root.addEventListener(BROWSER.EVENTS.MOUSE_MOVE, this._onMouseMove);\n    root.addEventListener(BROWSER.EVENTS.MOUSE_LEAVE, this._onMouseLeave);\n    this._addFullscreenHandlers();\n\n    const video = viewer.projection?.getTexture();\n    if (!video || !video.isVideo()) {\n      return;\n    }\n\n    if (video.isPaused()) {\n      this._controlBar.containerEl.classList.add(this._fixedClass);\n    }\n\n    video.source.addEventListener(BROWSER.EVENTS.VIDEO_PLAY, this._onVideoPlay);\n    video.source.addEventListener(BROWSER.EVENTS.VIDEO_PAUSE, this._onVideoPause);\n\n    this._video = video;\n  }\n\n  public disable(viewer: View360) {\n    if (!this._targetEl) return;\n\n    const controlBar = this._controlBar;\n    const root = viewer.rootEl;\n    const video = this._video;\n\n    root.removeEventListener(BROWSER.EVENTS.MOUSE_DOWN, this._onHold);\n    window.removeEventListener(BROWSER.EVENTS.MOUSE_UP, this._onRelease);\n    root.removeEventListener(BROWSER.EVENTS.MOUSE_ENTER, this._onMouseEnter);\n    root.removeEventListener(BROWSER.EVENTS.MOUSE_MOVE, this._onMouseMove);\n    root.removeEventListener(BROWSER.EVENTS.MOUSE_LEAVE, this._onMouseLeave);\n    this._removeFullscreenHandlers();\n\n    window.clearTimeout(this._timer);\n    controlBar.containerEl.classList.remove(this._fixedClass);\n\n    if (video) {\n      video.source.removeEventListener(BROWSER.EVENTS.VIDEO_PLAY, this._onVideoPlay);\n      video.source.removeEventListener(BROWSER.EVENTS.VIDEO_PAUSE, this._onVideoPause);\n    }\n\n    this._isCursorInside = false;\n    this._isGrabbing = false;\n    this._video = null;\n    this._targetEl = null;\n  }\n\n  public show() {\n    this._clearHideTimer();\n    this._controlBar.containerEl.classList.remove(this._hiddenClass);\n  }\n\n  public showTemporaliy() {\n    this.show();\n    this._hideAfterDelay(this._idleDelay);\n  }\n\n  public hide() {\n    this._clearHideTimer();\n    this._controlBar.containerEl.classList.add(this._hiddenClass);\n  }\n\n  private _clearHideTimer() {\n    if (this._timer) {\n      window.clearTimeout(this._timer);\n      this._timer = -1;\n    }\n  }\n\n  private _hideAfterDelay(delay = this._delay) {\n    if (this._isGrabbing || (!this._isFullscreen && this._isCursorInside)) return;\n\n    this._clearHideTimer();\n    if (delay <= 0) {\n      this.hide();\n    } else {\n      this._timer = window.setTimeout(() => {\n        this.hide();\n      }, delay);\n    }\n  }\n\n  private _onMouseEnter = () => {\n    this._isCursorInside = true;\n    this.show();\n  };\n\n  private _onMouseLeave = () => {\n    this._isCursorInside = false;\n    this._hideAfterDelay();\n  };\n\n  private _onMouseMove = () => {\n    if (!this._isFullscreen) return;\n\n    this.showTemporaliy();\n  }\n\n  private _onHold = (evt: PointerEvent) => {\n    this._isGrabbing = true;\n\n    if (evt.pointerType === \"mouse\") {\n      this._isCursorInside = true;\n    }\n\n    window.addEventListener(BROWSER.EVENTS.MOUSE_UP, this._onRelease);\n\n    this.show();\n  };\n\n  private _onRelease = () => {\n    this._isGrabbing = false;\n\n    window.removeEventListener(BROWSER.EVENTS.MOUSE_UP, this._onRelease);\n\n    this._hideAfterDelay();\n  };\n\n  private _onVideoPlay = () => {\n    const root = this._targetEl;\n    if (!root) return;\n\n    this._controlBar.containerEl.classList.remove(this._fixedClass);\n  };\n\n  private _onVideoPause = () => {\n    const root = this._targetEl;\n    if (!root) return;\n\n    this._controlBar.containerEl.classList.add(this._fixedClass);\n  };\n\n  private _addFullscreenHandlers() {\n    FULLSCREEN_CHANGE.forEach(evtName => {\n      document.addEventListener(evtName, this._onFullscreenChange);\n    });\n  }\n\n  private _removeFullscreenHandlers() {\n    FULLSCREEN_CHANGE.forEach(evtName => {\n      document.removeEventListener(evtName, this._onFullscreenChange);\n    });\n  }\n\n  private _onFullscreenChange = () => {\n    this._isFullscreen = isFullscreen();\n\n    if (this._isFullscreen) {\n      this._hideAfterDelay();\n    }\n  };\n}\n\nexport default AutoHide;\n","import TextureVideo from \"../../texture/TextureVideo\";\nimport * as BROWSER from \"../../const/browser\";\nimport { clamp } from \"../../utils\";\nimport { VIDEO_TIME_CHANGE_EVENT } from \"../../const/internal\";\n\nclass VideoControl {\n  private _video: TextureVideo | null;\n\n  public enable(root: HTMLElement, video: TextureVideo) {\n    this._video = video;\n    // capture is needed for resolving conflict with keyboard control\n    root.addEventListener(BROWSER.EVENTS.KEY_DOWN, this._onKeyDown, true);\n  }\n\n  public disable(root: HTMLElement) {\n    this._video = null;\n    root.removeEventListener(BROWSER.EVENTS.KEY_DOWN, this._onKeyDown, true);\n  }\n\n  private _onKeyDown = (event: KeyboardEvent) => {\n    const video = this._video;\n    if (!video) return;\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    const videoEl = video.source;\n    const keyPressed = event.keyCode != null\n      ? BROWSER.DIRECTION_KEY_CODE[event.keyCode]\n      : BROWSER.DIRECTION_KEY_NAME[event.key];\n\n    switch (keyPressed) {\n      case \"LEFT\":\n      case \"RIGHT\":\n        return this._changeVideoTime(videoEl, keyPressed === \"RIGHT\");\n      case \"UP\":\n      case \"DOWN\":\n        return this._changeVideoVolume(videoEl, keyPressed === \"UP\");\n    }\n\n    const spacePressed = event.keyCode === BROWSER.SPACE_KEY_CODE || event.key === BROWSER.SPACE_KEY_NAME;\n    if (spacePressed) {\n      this._toggleVideo(video);\n    }\n  }\n\n  private _changeVideoTime(video: HTMLVideoElement, forward: boolean) {\n    const delta = forward ? 5 : -5;\n\n    video.currentTime += delta;\n    video.dispatchEvent(new CustomEvent(VIDEO_TIME_CHANGE_EVENT, { detail: { time: video.currentTime }}));\n  }\n\n  private _changeVideoVolume(video: HTMLVideoElement, increase: boolean) {\n    const delta = increase ? 0.1 : -0.1;\n\n    if (video.muted) {\n      video.volume = clamp(delta, 0, 1);\n    } else {\n      video.volume = clamp(video.volume + delta, 0, 1);\n    }\n\n    if (video.volume > 0) {\n      video.muted = false;\n    } else {\n      video.muted = true;\n    }\n  }\n\n  private _toggleVideo(video: TextureVideo) {\n    if (video.isPaused()) {\n      video.source.play();\n    } else {\n      video.source.pause();\n    }\n  }\n}\n\nexport default VideoControl;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport ControlBarItem, { ControlBarItemOptions } from \"./ControlBarItem\";\nimport ProgressBar from \"./ProgressBar\";\nimport PlayButton from \"./PlayButton\";\nimport VolumeControl from \"./VolumeControl\";\nimport FullscreenButton from \"./FullscreenButton\";\nimport VideoTime from \"./VideoTime\";\nimport PieView, { PieViewOptions } from \"./PieView\";\nimport VRButton from \"./VRButton\";\nimport GyroButton from \"./GyroButton\";\nimport AutoHide, { AutoHideOptions } from \"./AutoHide\";\nimport VideoControl from \"./VideoControl\";\nimport View360, { View360Events } from \"../../View360\";\nimport View360Plugin from \"../View360Plugin\";\nimport { EVENTS } from \"../../const/external\";\nimport { createElement, findIndex, getObjectOption } from \"../../utils\";\nimport { ValueOf } from \"../../type/utils\";\nimport { StaticClickEvent } from \"../../type/events\";\nimport { CONTROL_BAR_DEFAULT_CLASS, CONTROL_BAR_ITEM_POSITION } from \"./const\";\n\n/**\n * Options for {@link ControlBar}\n * @ko {@link ControlBar}용 옵션들\n * @category Plugin\n * @since 4.0.0\n */\nexport interface ControlBarOptions {\n  /**\n   * @copy ControlBar#autoHide\n   */\n  autoHide: boolean | Partial<AutoHideOptions>;\n  /**\n   * @copy ControlBar#showBackground\n   */\n  showBackground: boolean;\n  /**\n   * @copy ControlBar#clickToPlay\n   */\n  clickToPlay: boolean;\n  /**\n   * @copy ControlBar#keyboardControls\n   */\n  keyboardControls: boolean;\n  /**\n   * @copy ControlBar#progressBar\n   */\n  progressBar: boolean | Partial<ControlBarItemOptions>;\n  /**\n   * @copy ControlBar#playButton\n   */\n  playButton: boolean | Partial<ControlBarItemOptions>;\n  /**\n   * @copy ControlBar#volumeButton\n   */\n  volumeButton: boolean | Partial<ControlBarItemOptions>;\n  /**\n   * @copy ControlBar#fullscreenButton\n   */\n  fullscreenButton: boolean | Partial<ControlBarItemOptions>;\n  /**\n   * @copy ControlBar#videoTime\n   */\n  videoTime: boolean | Partial<ControlBarItemOptions>;\n  /**\n   * @copy ControlBar#pieView\n   */\n  pieView: boolean | Partial<PieViewOptions>;\n  /**\n   * @copy ControlBar#vrButton\n   */\n  vrButton: boolean | Partial<ControlBarItemOptions>;\n  /**\n   * @copy ControlBar#gyroButton\n   */\n  gyroButton: boolean | Partial<ControlBarItemOptions>;\n  /**\n   * @copy ControlBar#className\n   */\n  className: Partial<{ -readonly [key in keyof typeof ControlBar.DEFAULT_CLASS]: string }>;\n  /**\n   * @copy ControlBar#customItems\n   */\n  customItems: ControlBarItem[];\n}\n\n/**\n * A plugin that displays extra buttons & controls that controls {@link View360}.\n * @ko {@link View360}에 부가적인 버튼과 컨트롤을 추가해주는 플러그인.\n * @category Plugin\n * @since 4.0.0\n */\nclass ControlBar implements View360Plugin {\n  /**\n   * Default class names that ControlBar uses\n   * @ko ControlBar가 사용하는 디폴트 클래스 이름들\n   * @since 4.0.0\n   */\n  public static readonly DEFAULT_CLASS = CONTROL_BAR_DEFAULT_CLASS;\n\n  /**\n   * Constants for {@link ControlBarItemOptions#position}\n   * @ko {@link ControlBarItemOptions#position}에 사용 가능한 값들\n   */\n  public static readonly POSITION = CONTROL_BAR_ITEM_POSITION;\n\n  /**\n   * Automatically hide control bar on video plays.\n   * `true` to enable with default values, `false` to disable.\n   * @ko 비디오 재생시 자동으로 컨트롤바를 숨깁니다.\n   * `true`일 경우 기본값을 적용하고, `false`일 경우 비활성화합니다.\n   * @since 4.0.0\n   */\n  public readonly autoHide?: ControlBarOptions[\"autoHide\"];\n  /**\n   * Show background element.\n   * @ko 배경 엘리먼트를 표시합니다.\n   * @since 4.0.0\n   */\n  public readonly showBackground?: ControlBarOptions[\"showBackground\"];\n  /**\n   * Whether to play / pause video on canvas click\n   * @ko 캔버스 클릭시에 비디오를 재생 / 일시정지 토글합니다.\n   * @since 4.0.0\n   */\n  public readonly clickToPlay: ControlBarOptions[\"clickToPlay\"];\n  /**\n   * Enable keyboard controls for video.\n   * Pressing up / down arrow will control video volume, and pressing left / right arrow will control video time.\n   * @ko 비디오 키보드 컨트롤을 활성화합니다.\n   * 위 / 아래 화살표키를 누를 시 비디오 볼륨을, 왼쪽 / 오른쪽 화살표키를 누를 시 비디오 시간을 조정합니다.\n   * @since 4.0.0\n   */\n  public readonly keyboardControls: ControlBarOptions[\"keyboardControls\"];\n  /**\n   * Show video progress bar.\n   * `true` to enable with default values, `false` to disable.\n   * @ko 비디오 프로그레스 바를 표시합니다.\n   * `true`일 경우 기본값을 적용하고, `false`일 경우 비활성화합니다.\n   * @since 4.0.0\n   */\n  public readonly progressBar: ControlBarOptions[\"progressBar\"];\n  /**\n   * Show video play / pause button.\n   * `true` to enable with default values, `false` to disable.\n   * @ko 비디오 재생 / 일시정지 버튼을 표시합니다.\n   * `true`일 경우 기본값을 적용하고, `false`일 경우 비활성화합니다.\n   * @since 4.0.0\n   */\n  public readonly playButton: ControlBarOptions[\"playButton\"];\n  /**\n   * Show video volume control button.\n   * `true` to enable with default values, `false` to disable.\n   * @ko 비디오 볼륨 조절 버튼을 표시합니다.\n   * `true`일 경우 기본값을 적용하고, `false`일 경우 비활성화합니다.\n   * @since 4.0.0\n   */\n  public readonly volumeButton: ControlBarOptions[\"volumeButton\"];\n  /**\n   * Show fullscreen button.\n   * `true` to enable with default values, `false` to disable.\n   * @ko 풀스크린 진입 / 해제 버튼을 표시합니다.\n   * `true`일 경우 기본값을 적용하고, `false`일 경우 비활성화합니다.\n   * @since 4.0.0\n   */\n  public readonly fullscreenButton: ControlBarOptions[\"fullscreenButton\"];\n  /**\n   * Show video current / total time\n   * `true` to enable with default values, `false` to disable.\n   * @ko 비디오의 현재 시간 / 총 시간을 표시합니다.\n   * `true`일 경우 기본값을 적용하고, `false`일 경우 비활성화합니다.\n   * @since 4.0.0\n   */\n  public readonly videoTime: ControlBarOptions[\"videoTime\"];\n  /**\n   * Show camera pie view.\n   * `true` to enable with default values, `false` to disable.\n   * @ko 현재 카메라가 가리키는 방향을 표시하는 파이 뷰를 표시합니다.\n   * `true`일 경우 기본값을 적용하고, `false`일 경우 비활성화합니다.\n   * @since 4.0.0\n   */\n  public readonly pieView: ControlBarOptions[\"pieView\"];\n  /**\n   * Show VR button.\n   * `true` to enable with default values, `false` to disable.\n   * @ko VR 진입버튼을 표시합니다.\n   * `true`일 경우 기본값을 적용하고, `false`일 경우 비활성화합니다.\n   * @since 4.0.0\n   */\n  public readonly vrButton: ControlBarOptions[\"vrButton\"];\n  /**\n   * Show gyroscope control enable / disable button.\n   * `true` to enable with default values, `false` to disable.\n   * @ko 자이로스코프 컨트롤을 활성화 / 비활성화하는 버튼을 표시합니다.\n   * `true`일 경우 기본값을 적용하고, `false`일 경우 비활성화합니다.\n   * @since 4.0.0\n   */\n  public readonly gyroButton: ControlBarOptions[\"gyroButton\"];\n  /**\n   * Override default class names.\n   * @ko 디폴트 클래스 이름들을 오버라이드합니다.\n   * @since 4.0.0\n   */\n  public readonly className: Required<ControlBarOptions[\"className\"]>;\n\n  /**\n   * Root element of the control bar\n   * @ko 컨트롤바의 루트 엘리먼트\n   * @since 4.0.0\n   */\n  public get rootEl() { return this._rootEl; }\n  /**\n   * Container element of the control bar\n   * @ko 컨트롤바의 컨테이너 엘리먼트\n   * @since 4.0.0\n   */\n  public get containerEl() { return this._containerEl; }\n  /**\n   * Background element of the control bar\n   * @ko 컨트롤바의 배경 엘리먼트\n   * @since 4.0.0\n   */\n  public get backgroundEl() { return this._bgEl; }\n  /**\n   * Control bar's default items created by {@link ControlBarOptions}\n   * @ko 주어진 {@link ControlBarOptions}에 의해 생성된 디폴트 아이템들\n   * @since 4.0.0\n   */\n  public get items() { return this._items; }\n  /**\n   * Custom control bar items\n   * @ko 커스텀 컨트롤바 아이템들을 추가합니다.\n   * @since 4.0.0\n   */\n  public get customItems() { return this._customItems; }\n\n  private _rootEl: HTMLElement;\n  private _containerEl: HTMLElement;\n  private _bgEl: HTMLElement;\n  private _wrapperEl: Record<ValueOf<typeof ControlBar.POSITION>, HTMLElement>;\n  private _items: Record<ValueOf<typeof ControlBar.POSITION>, ControlBarItem[]>;\n  private _customItems: ControlBarItem[];\n  private _autoHider: AutoHide;\n  private _videoControl: VideoControl;\n\n  /**\n   * Create new instance of ControlBar.\n   * @ko ControlBar의 새 인스턴스를 생성합니다.\n   * @param options - Options {@ko 옵션들}\n   */\n  public constructor({\n    autoHide,\n    showBackground,\n    clickToPlay = true,\n    keyboardControls = true,\n    progressBar = true,\n    playButton = true,\n    volumeButton = true,\n    fullscreenButton = true,\n    videoTime = true,\n    pieView = true,\n    vrButton = true,\n    gyroButton = true,\n    className = {},\n    customItems = []\n  }: Partial<ControlBarOptions> = {}) {\n    this.autoHide = autoHide;\n    this.showBackground = showBackground;\n    this.clickToPlay = clickToPlay;\n    this.keyboardControls = keyboardControls;\n    this.progressBar = progressBar;\n    this.playButton = playButton;\n    this.volumeButton = volumeButton;\n    this.fullscreenButton = fullscreenButton;\n    this.videoTime = videoTime;\n    this.pieView = pieView;\n    this.vrButton = vrButton;\n    this.gyroButton = gyroButton;\n    this.className = {\n      ...ControlBar.DEFAULT_CLASS,\n      ...className\n    };\n\n    const rootClass = className.CONTROLS_ROOT ?? ControlBar.DEFAULT_CLASS.CONTROLS_ROOT;\n\n    this._rootEl = createElement(rootClass);\n    this._createPositionWrappers();\n    this._items = Object.keys(ControlBar.POSITION).reduce((items, key) => {\n      items[ControlBar.POSITION[key]] = [];\n      return items;\n    }, {}) as Record<ValueOf<typeof ControlBar.POSITION>, ControlBarItem[]>;\n    this._customItems = customItems;\n    this._autoHider = new AutoHide(this, getObjectOption(autoHide));\n    this._videoControl = new VideoControl();\n\n    customItems.forEach(item => {\n      this._items[item.position].push(item);\n    });\n  }\n\n  public init(viewer: View360) {\n    const panoRoot = viewer.rootEl;\n    const controlsRoot = this._rootEl;\n    const defaultItems = this._createDefaultItems();\n\n    this._updateBackground(viewer);\n    this._updateAutoHide(viewer);\n    this._updateKeyboardHandler(viewer);\n\n    panoRoot.appendChild(controlsRoot);\n    this._addItem(viewer, defaultItems);\n    this._addItem(viewer, this._customItems);\n\n    viewer.on(EVENTS.PROJECTION_CHANGE, this._onNewSrcLoad);\n    viewer.on(EVENTS.STATIC_CLICK, this._onStaticClick);\n  }\n\n  public destroy(viewer: View360): void {\n    // Remove controls root from pano root\n    const panoRoot = viewer.rootEl;\n    const controlsRoot = this._rootEl;\n    const items = this._items;\n\n    if (controlsRoot.parentElement === panoRoot) {\n      panoRoot.removeChild(controlsRoot);\n    }\n\n    Object.keys(items).forEach((key: ValueOf<typeof ControlBar.POSITION>) => {\n      const category = items[key];\n\n      category.forEach(item => {\n        item.destroy(viewer, this);\n      });\n\n      items[key] = [];\n    });\n\n    this._clearItemElements();\n    this._autoHider.disable(viewer);\n    this._videoControl.disable(panoRoot);\n\n    viewer.off(EVENTS.PROJECTION_CHANGE, this._onNewSrcLoad);\n    viewer.off(EVENTS.STATIC_CLICK, this._onStaticClick);\n  }\n\n  private _addItem(viewer: View360, items: ControlBarItem[]) {\n    for (const item of items) {\n      const category = this._items[item.position];\n      const wrapper = this._wrapperEl[item.position];\n\n      const nextSiblingIndex = findIndex(category, sibling => sibling.order > item.order);\n\n      if (nextSiblingIndex >= 0) {\n        const nextSibling = category[nextSiblingIndex].element;\n        category.splice(nextSiblingIndex, 0, item);\n        wrapper.insertBefore(item.element, nextSibling);\n      } else {\n        category.push(item);\n        wrapper.appendChild(item.element);\n      }\n\n      item.init(viewer, this);\n    }\n  }\n\n  private _createPositionWrappers() {\n    const className = {\n      ...ControlBar.DEFAULT_CLASS,\n      ...this.className\n    };\n    const rootEl = this._rootEl;\n\n    // BG & FLOATING CONTROLS\n    const backgroundEl = createElement(className.CONTROLS_BG);\n    const floatLeftEl = createElement(className.CONTROLS_FLOAT_LEFT);\n    const floatRightEl = createElement(className.CONTROLS_FLOAT_RIGHT);\n\n    rootEl.appendChild(floatLeftEl);\n    rootEl.appendChild(floatRightEl);\n\n    // BOTTOM CONTROLS\n    const container = createElement(className.CONTROLS_MAIN);\n    const topWrapper = createElement(className.CONTROLS_TOP);\n    const bottomWrapper = createElement(className.CONTROLS_BOTTOM);\n    const midWrapper = createElement(className.CONTROLS_MID);\n    const leftControlsWrapper = createElement(className.CONTROLS_LEFT);\n    const rightControlsWrapper = createElement(className.CONTROLS_RIGHT);\n\n    midWrapper.appendChild(leftControlsWrapper);\n    midWrapper.appendChild(rightControlsWrapper);\n    container.appendChild(backgroundEl);\n    container.appendChild(topWrapper);\n    container.appendChild(midWrapper);\n    container.appendChild(bottomWrapper);\n    rootEl.appendChild(container);\n\n    this._bgEl = backgroundEl;\n    this._containerEl = container;\n    this._wrapperEl = {\n      [ControlBar.POSITION.MAIN_TOP]: topWrapper,\n      [ControlBar.POSITION.MAIN_LEFT]: leftControlsWrapper,\n      [ControlBar.POSITION.MAIN_RIGHT]: rightControlsWrapper,\n      [ControlBar.POSITION.MAIN_BOTTOM]: bottomWrapper,\n      [ControlBar.POSITION.TOP_LEFT]: floatLeftEl,\n      [ControlBar.POSITION.TOP_RIGHT]: floatRightEl\n    };\n  }\n\n  private _clearItemElements() {\n    const wrappers = Object.keys(ControlBar.POSITION).map(key => ControlBar.POSITION[key]);\n\n    // Remove all elements inside wrappers\n    wrappers.forEach(wrapper => {\n      while (wrapper.firstChild) {\n        wrapper.removeChild(wrapper.firstChild);\n      }\n    });\n  }\n\n  private _onStaticClick = ({ target: viewer, isTouch }: StaticClickEvent) => {\n    const autoHider = this._autoHider;\n\n    if (isTouch) {\n      if (!autoHider.enabled) return;\n\n      if (autoHider.hidden) {\n        autoHider.showTemporaliy();\n      } else {\n        autoHider.hide();\n      }\n    } else {\n      if (!this.clickToPlay) return;\n\n      const video = viewer.projection?.getTexture();\n      if (!video || !video.isVideo()) return;\n\n      if (video.isPaused()) {\n        video.source.play();\n      } else {\n        video.source.pause();\n      }\n    }\n  };\n\n  private _onNewSrcLoad = ({ target: viewer }: View360Events[\"projectionChange\"]) => {\n    const items = this._items;\n\n    this._updateBackground(viewer);\n    this._updateAutoHide(viewer);\n    this._updateKeyboardHandler(viewer);\n\n    Object.keys(items).forEach((key: ValueOf<typeof ControlBar.POSITION>) => {\n      const category = items[key];\n\n      category.forEach(item => {\n        item.destroy(viewer, this);\n        item.init(viewer, this);\n      });\n    });\n  };\n\n  private _updateAutoHide(viewer: View360) {\n    const autoHide = this.autoHide;\n    const autoHider = this._autoHider;\n\n    if (autoHide != null) {\n      if (autoHide) {\n        autoHider.enable(viewer);\n      } else {\n        autoHider.disable(viewer);\n      }\n    } else {\n      // Automatically choose whether to show background by content type\n      const texture = viewer.projection?.getTexture();\n\n      if (texture && texture.isVideo()) {\n        // Enable auto hide when content type is video\n        autoHider.enable(viewer);\n      } else {\n        autoHider.disable(viewer);\n      }\n    }\n  }\n\n  private _updateBackground(viewer: View360) {\n    const background = this._bgEl;\n    const showBackground = this.showBackground;\n    const hiddenClass = this.className.HIDDEN ?? ControlBar.DEFAULT_CLASS.HIDDEN;\n\n    if (showBackground != null) {\n      if (showBackground) {\n        background.classList.remove(hiddenClass);\n      } else {\n        background.classList.add(hiddenClass);\n      }\n    } else {\n      // Automatically choose whether to show background by content type\n      const texture = viewer.projection?.getTexture();\n\n      if (texture && texture.isVideo()) {\n        // Show bg when content type is video\n        background.classList.remove(hiddenClass);\n      } else {\n        background.classList.add(hiddenClass);\n      }\n    }\n  }\n\n  private _updateKeyboardHandler(viewer: View360) {\n    const panoRoot = viewer.rootEl;\n    const videoControl = this._videoControl;\n    const texture = viewer.projection?.getTexture();\n\n    if (this.keyboardControls && texture && texture.isVideo()) {\n      videoControl.enable(panoRoot, texture);\n    } else {\n      videoControl.disable(panoRoot);\n    }\n  }\n\n  private _createDefaultItems(): ControlBarItem[] {\n    const items: ControlBarItem[] = [];\n\n    if (this.progressBar) {\n      items.push(new ProgressBar(getObjectOption(this.progressBar)));\n    }\n\n    if (this.playButton) {\n      items.push(new PlayButton(getObjectOption(this.playButton)));\n    }\n\n    if (this.volumeButton) {\n      items.push(new VolumeControl(getObjectOption(this.volumeButton)));\n    }\n\n    if (this.gyroButton) {\n      items.push(new GyroButton(getObjectOption(this.gyroButton)));\n    }\n\n    if (this.vrButton) {\n      items.push(new VRButton(getObjectOption(this.vrButton)));\n    }\n\n    if (this.fullscreenButton) {\n      items.push(new FullscreenButton(getObjectOption(this.fullscreenButton)));\n    }\n\n    if (this.videoTime) {\n      items.push(new VideoTime(getObjectOption(this.videoTime)));\n    }\n\n    if (this.pieView) {\n      items.push(new PieView(getObjectOption(this.pieView)));\n    }\n\n    return items;\n  }\n}\n\nexport default ControlBar;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Camera from \"../core/Camera\";\nimport PanoControl from \"../control/PanoControl\";\nimport TriangleMesh from \"../core/TriangleMesh\";\nimport Texture from \"../texture/Texture\";\nimport WebGLContext from \"../core/WebGLContext\";\nimport { VideoConfig } from \"../type/external\";\nimport UniformCanvasCube from \"../uniform/UniformCanvasCube\";\nimport UniformTexture2D from \"../uniform/UniformTexture2D\";\nimport UniformTextureCube from \"../uniform/UniformTextureCube\";\n\ntype CommonProjectionUniforms = {\n  uTexture: UniformTexture2D | UniformTextureCube | UniformCanvasCube;\n}\n\n/**\n * Common option for {@link Projection}s\n * @ko {@link Projection}을 위한 공통 옵션들\n * @category Projection\n * @since 4.0.0\n */\nexport interface ProjectionOptions {\n  /**\n   * @copy Projection#src\n   */\n  src: string | HTMLElement | Array<string | HTMLElement>;\n  /**\n   * @copy Projection#video\n   */\n  video?: boolean | Partial<VideoConfig>;\n}\n\n/**\n * Base class for projections.\n * @ko 프로젝션 베이스 클래스.\n * @category Projection\n * @since 4.0.0\n */\nabstract class Projection<T extends CommonProjectionUniforms = CommonProjectionUniforms> {\n  /**\n   * Source URL to panorama image/video.\n   * @ko 파노라마 이미지/비디오의 URL\n   * @since 4.0.0\n   */\n  public readonly src: ProjectionOptions[\"src\"];\n  /**\n   * Properties for the video element.\n   * Setting `false` will treat panorama source as an image, `true` will use default properties.\n   * @ko 비디오 엘리먼트에 설정할 프로퍼티를 담는 객체.\n   * @since 4.0.0\n   * @example\n   * Default properties\n   * ```ts\n   * autoplay: true\n   * muted: true\n   * loop: false\n   * volume: 1\n   * ```\n   */\n  public readonly video: ProjectionOptions[\"video\"];\n\n  protected _mesh: TriangleMesh<T> | null;\n\n  /**\n   * Create new instance\n   * @ko 새로운 인스턴스를 생성합니다.\n   * @param options - Options {@ko 옵션들}\n   */\n  public constructor({\n    src,\n    video = false\n  }: ProjectionOptions) {\n    this.src = src;\n    this.video = video;\n    this._mesh = null;\n  }\n\n  /**\n   * Apply texture to current projection.\n   * @ko 주어진 텍스쳐를 현재 프로젝션에 적용합니다.\n   * @param ctx - Instance of the WebGLContext helper {@ko WebGL context 헬퍼의 인스턴스}\n   * @param texture - New texture to apply {@ko 새로 적용할 텍스쳐}\n   * @internal\n   * @since 4.0.0\n   */\n  public abstract applyTexture(ctx: WebGLContext, texture: Texture): void;\n\n  /**\n   * Release all resources projection has.\n   * This is automatically called on projection change & View360's destroy call\n   * @ko 현재 갖고 있는 모든 리소스를 반환합니다.\n   * 이 메소드는 프로젝션 변경 및 View360의 destroy 호출 시 자동으로 호출됩니다.\n   * @param ctx\n   */\n  public releaseAllResources(ctx: WebGLContext) {\n    this._mesh?.destroy(ctx);\n  }\n\n  /**\n   * Update camera to match projection's settings.\n   * @ko 현재 프로젝션의 세팅으로 카메라를 업데이트합니다.\n   * @param camera - Instance of the camera to update {@ko 업데이트할 카메라의 인스턴스}\n   * @since 4.0.0\n   */\n  public updateCamera(camera: Camera) {\n    // Use default mode & no view restriction\n    camera.resetRange();\n  }\n\n  /**\n   * Update control to match projection's settings.\n   * @ko 현재 프로젝션의 세팅으로 컨트롤을 업데이트합니다.\n   * @param control - Instance of the control to update {@ko 업데이트할 컨트롤의 인스턴스}\n   * @since 4.0.0\n   */\n  public updateControl(control: PanoControl) {\n    control.ignoreZoomScale = false;\n  }\n\n  /**\n   * Update projection.\n   * @ko 현재 프로젝션 정보를 갱신합니다.\n   * @param camera - Instance of the camera to reference {@ko 참조할 카메라의 인스턴스}\n   * @since 4.0.0\n   */\n  public update(camera: Camera) {} // eslint-disable-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars\n\n  /**\n   * Return active texture.\n   * @ko 현재 활성화된 텍스쳐를 반환합니다.\n   * @internal\n   * @since 4.0.0\n   */\n  public getTexture() {\n    if (!this._mesh) return null;\n\n    return this._mesh.program.uniforms.uTexture.texture;\n  }\n\n  /**\n   * A 3D triangle mesh for projection. It's `null` until loading the `src`.\n   * @ko Projection을 표시하기 위한 Mesh, src를 로드하기 전까지는 `null`입니다.\n   * @since 4.0.0\n   */\n  public getMesh(): TriangleMesh<T> | null {\n    return this._mesh;\n  }\n}\n\nexport default Projection;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nabstract class Uniform {\n  public needsUpdate: boolean;\n\n  public constructor() {\n    this.needsUpdate = true;\n  }\n\n  public abstract update(gl: WebGLRenderingContext | WebGL2RenderingContext, location: WebGLUniformLocation, isWebGL2: boolean): void;\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public destroy(gl: WebGLRenderingContext | WebGL2RenderingContext) {\n    // DO_NOTHING\n  }\n}\n\nexport default Uniform;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport TextureCube from \"../texture/TextureCube\";\nimport { reorderCube } from \"../utils\";\nimport WebGLContext from \"../core/WebGLContext\";\nimport Uniform from \"./Uniform\";\n\nclass UniformTextureCube extends Uniform {\n  public readonly texture: TextureCube;\n  private _webglTexture: WebGLTexture;\n  private _cubemapOrder: string;\n\n  public constructor(ctx: WebGLContext, texture: TextureCube, cubemapOrder: string) {\n    super();\n\n    this.texture = texture;\n    this._webglTexture = ctx.createWebGLCubeTexture(texture, texture.width);\n    this._cubemapOrder = cubemapOrder;\n  }\n\n  public destroy(gl: WebGLRenderingContext | WebGL2RenderingContext): void {\n    this.texture.destroy();\n    gl.deleteTexture(this._webglTexture);\n  }\n\n  public update(gl: WebGLRenderingContext | WebGL2RenderingContext, location: WebGLUniformLocation, isWebGL2: boolean) {\n    const texture = this.texture;\n\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n    gl.uniform1i(location, 0);\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_CUBE_MAP, this._webglTexture);\n\n    const sources = reorderCube(texture.sources, this._cubemapOrder);\n    sources.forEach((src, idx) => {\n      if (isWebGL2) {\n        gl.texSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + idx, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, src);\n      } else {\n        gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + idx, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, src);\n      }\n    });\n\n    if (!texture.isVideo()) {\n      this.needsUpdate = false;\n    }\n  }\n}\n\nexport default UniformTextureCube;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Texture2D from \"../texture/Texture2D\";\nimport { range, reorderCube } from \"../utils\";\n\n/** @hidden */\nclass CubeTexturePainter {\n  public readonly texture: Texture2D;\n  private _renderingOrder: number[];\n  private _canvas: HTMLCanvasElement;\n  private _ctx: CanvasRenderingContext2D;\n  private _row: number;\n  private _column: number;\n  private _size: number;\n\n  public get size() { return this._size; }\n\n  public constructor(texture: Texture2D, cubemapOrder: string) {\n    this.texture = texture;\n    this._renderingOrder = reorderCube(range(6), cubemapOrder);\n\n    const canvas = document.createElement(\"canvas\");\n\n    this._calcRenderingSize();\n\n    canvas.width = this._size;\n    canvas.height = this._size;\n\n    this._canvas = canvas;\n    this._ctx = canvas.getContext(\"2d\")!;\n  }\n\n  public destroy() {\n    const canvas = this._canvas;\n\n    // release memories\n    canvas.width = 1;\n    canvas.height = 1;\n    this._canvas = null as any;\n  }\n\n  public draw(gl: WebGLRenderingContext | WebGL2RenderingContext, isWebGL2: boolean) {\n    const size = this._size;\n    const texture = this.texture;\n    let surfaceIdx = 0;\n\n    for (let row = 0; row < this._row; row++) {\n      for (let column = 0; column < this._column; column++) {\n        const x = size * column;\n        const y = size * row;\n        const renderingFace = this._renderingOrder[surfaceIdx];\n\n        this._ctx.drawImage(texture.source as CanvasImageSource, x, y, size, size, 0, 0, size, size);\n\n        if (isWebGL2) {\n          gl.texSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderingFace, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, this._canvas);\n        } else {\n          gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderingFace, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this._canvas);\n        }\n\n        surfaceIdx++;\n      }\n    }\n  }\n\n  private _calcRenderingSize() {\n    const {\n      width,\n      height\n    } = this.texture;\n    const aspect = width / height;\n\n    if (aspect === 1 / 6) {\n      this._size = width;\n      this._row = 6;\n      this._column = 1;\n    } else if (aspect === 6) {\n      this._size = height;\n      this._row = 1;\n      this._column = 6;\n    } else if (aspect === 2 / 3) {\n      this._size = width * 0.5;\n      this._row = 3;\n      this._column = 2;\n    } else {\n      this._size = width / 3;\n      this._row = 2;\n      this._column = 3;\n    }\n  }\n}\n\nexport default CubeTexturePainter;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport CubeTexturePainter from \"../core/CubeTexturePainter\";\nimport Texture2D from \"../texture/Texture2D\";\nimport WebGLContext from \"../core/WebGLContext\";\nimport Uniform from \"./Uniform\";\n\nclass UniformCanvasCube extends Uniform {\n  private _webglTexture: WebGLTexture;\n  private _painter: CubeTexturePainter;\n\n  public get texture() { return this._painter.texture; }\n\n  public constructor(ctx: WebGLContext, texture: Texture2D, cubemapOrder: string) {\n    super();\n\n    this._painter = new CubeTexturePainter(texture as Texture2D, cubemapOrder);\n    this._webglTexture = ctx.createWebGLCubeTexture(texture, this._painter.size);\n  }\n\n  public destroy(gl: WebGLRenderingContext | WebGL2RenderingContext) {\n    gl.deleteTexture(this._webglTexture);\n    this._painter.destroy();\n  }\n\n  public update(gl: WebGLRenderingContext | WebGL2RenderingContext, location: WebGLUniformLocation, isWebGL2: boolean) {\n    const texture = this.texture;\n\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n    gl.uniform1i(location, 0);\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_CUBE_MAP, this._webglTexture);\n\n    this._painter.draw(gl, isWebGL2);\n\n    if (!texture.isVideo()) {\n      this.needsUpdate = false;\n    }\n  }\n}\n\nexport default UniformCanvasCube;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Object3D from \"./Object3D\";\nimport ShaderProgram from \"./ShaderProgram\";\nimport VertexArrayObject from \"./VertexArrayObject\";\nimport Uniform from \"../uniform/Uniform\";\nimport WebGLContext from \"./WebGLContext\";\n\n/**\n * @hidden\n */\nclass TriangleMesh<T extends Record<string, Uniform> = Record<string, never>> extends Object3D {\n  /**\n   * @internal\n   * Geometry data for projection\n   */\n  public readonly vao: VertexArrayObject;\n  /**\n   * @internal\n   * Material(shader) data for projection\n   */\n  public readonly program: ShaderProgram<T>;\n\n  public constructor(vao: VertexArrayObject, program: ShaderProgram<T>) {\n    super();\n\n    this.vao = vao;\n    this.program = program;\n  }\n\n  public destroy(ctx: WebGLContext) {\n    ctx.releaseVAO(this.vao);\n    ctx.releaseShaderResources(this.program);\n  }\n}\n\nexport default TriangleMesh;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Uniform from \"../uniform/Uniform\";\nimport WebGLContext from \"./WebGLContext\";\nimport { UniformLocations } from \"../type/internal\";\n\nclass ShaderProgram<T extends Record<string, Uniform> = Record<string, Uniform>> {\n  public readonly program: WebGLProgram;\n  public readonly uniforms: T;\n  public readonly uniformLocations: UniformLocations<T>;\n\n  public constructor(ctx: WebGLContext, vertexShader: string, fragmentShader: string, uniforms: T) {\n    this.program = ctx.createProgram(vertexShader, fragmentShader);\n    this.uniforms = uniforms;\n    this.uniformLocations = ctx.getUniformLocations(this.program, uniforms);\n  }\n}\n\nexport default ShaderProgram;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { TypedArray } from \"../type/utils\";\n\n/**\n * @hidden\n */\nclass VertexData<T extends TypedArray> {\n  public readonly data: T;\n  public itemSize: number;\n  public count: number;\n\n  /** */\n  public constructor(data: T, itemSize: number) {\n    this.data = data;\n    this.itemSize = itemSize;\n    this.count = data.length / itemSize;\n  }\n}\n\nexport default VertexData;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport VertexData from \"../core/VertexData\";\n\n/**\n * @hidden\n */\nabstract class Geometry {\n  public readonly vertices: VertexData<Float32Array>;\n  public readonly indicies: VertexData<Uint16Array>;\n  public readonly uvs: VertexData<Float32Array>;\n\n  /** */\n  public constructor(vertices: number[], indicies: number[], uvs: number[]) {\n    this.vertices = new VertexData(new Float32Array(vertices), 3);\n    this.indicies = new VertexData(new Uint16Array(indicies), 1);\n    this.uvs = new VertexData(new Float32Array(uvs), 2);\n  }\n}\n\nexport default Geometry;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Geometry from \"./Geometry\";\nimport { ROTATE } from \"../const/internal\";\nimport { reorderCube } from \"../utils\";\n\n/**\n * @hidden\n */\nclass CubeGeometry extends Geometry {\n  public constructor({\n    order,\n    rotateUV\n  }: {\n    order: string;\n    rotateUV?: ROTATE[]\n  }) {\n    const vertices = [\n      // back\n      1, -1, 1,\n      -1, -1, 1,\n      -1, 1, 1,\n      1, 1, 1,\n\n      // front\n      -1, -1, -1,\n      1, -1, -1,\n      1, 1, -1,\n      -1, 1, -1,\n\n      // up\n      -1, 1, -1,\n      1, 1, -1,\n      1, 1, 1,\n      -1, 1, 1,\n\n      // down\n      -1, -1, 1,\n      1, -1, 1,\n      1, -1, -1,\n      -1, -1, -1,\n\n      // right\n      1, -1, -1,\n      1, -1, 1,\n      1, 1, 1,\n      1, 1, -1,\n\n      // left\n      -1, -1, 1,\n      -1, -1, -1,\n      -1, 1, -1,\n      -1, 1, 1\n    ];\n\n    const indicies = [\n      0, 1, 2,\n      0, 2, 3,\n      4, 5, 6,\n      4, 6, 7,\n      8, 9, 10,\n      8, 10, 11,\n      12, 13, 14,\n      12, 14, 15,\n      16, 17, 18,\n      16, 18, 19,\n      20, 21, 22,\n      20, 22, 23\n    ];\n\n    const oneThird = 1 / 3;\n    const coords: number[][] = [];\n\n    for (let r = 1; r >= 0; r--) {\n      for (let c = 0; c < 3; c++) {\n        const coord = [\n          c * oneThird, r * 0.5,\n          (c + 1) * oneThird, r * 0.5,\n          (c + 1) * oneThird, (r + 1) * 0.5,\n          c * oneThird, (r + 1) * 0.5\n        ];\n\n        coords.push(coord);\n      }\n    }\n\n    if (rotateUV) {\n      rotateUV.forEach((degree, idx) => {\n        if (degree === ROTATE.ZERO) return;\n\n        const coord = coords[idx];\n        let newOrder: number[];\n\n        if (degree === ROTATE.CW_90) {\n          newOrder = [1, 2, 3, 0];\n        } else if (degree === ROTATE.CCW_90) {\n          newOrder = [3, 0, 1, 2];\n        } else {\n          newOrder = [2, 3, 0, 1];\n        }\n\n        const newCoords = Array<number>(coord.length);\n        for (let uvIdx = 0; uvIdx < coord.length / 2; uvIdx++) {\n          newCoords[uvIdx * 2 + 0] = coord[newOrder[uvIdx] * 2 + 0];\n          newCoords[uvIdx * 2 + 1] = coord[newOrder[uvIdx] * 2 + 1];\n        }\n\n        coords[idx] = newCoords;\n      });\n    }\n\n    const uvs = reorderCube(coords, order, \"BFUDRL\")\n      .reduce((acc, val) => acc.concat(val), []);\n\n    super(vertices, indicies, uvs);\n  }\n}\n\nexport default CubeGeometry;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Texture2D from \"../texture/Texture2D\";\nimport WebGLContext from \"../core/WebGLContext\";\nimport Uniform from \"./Uniform\";\n\nclass UniformTexture2D extends Uniform {\n  public readonly texture: Texture2D;\n  private _webglTexture: WebGLTexture;\n\n  public constructor(ctx: WebGLContext, texture: Texture2D) {\n    super();\n\n    this.texture = texture;\n    this._webglTexture = ctx.createWebGLTexture(texture);\n  }\n\n  public destroy(gl: WebGLRenderingContext | WebGL2RenderingContext): void {\n    this.texture.destroy();\n    gl.deleteTexture(this._webglTexture);\n  }\n\n  public update(gl: WebGLRenderingContext | WebGL2RenderingContext, location: WebGLUniformLocation, isWebGL2: boolean) {\n    const texture = this.texture;\n    const isVideo = texture.isVideo();\n\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n    gl.uniform1i(location, 0);\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, this._webglTexture);\n\n    if (!isVideo && isWebGL2) {\n      gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, texture.source);\n    } else {\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, texture.source);\n    }\n\n    if (!isVideo) {\n      this.needsUpdate = false;\n    }\n  }\n}\n\nexport default UniformTexture2D;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Geometry from \"./Geometry\";\n\n/**\n * @hidden\n */\nclass CylinderGeometry extends Geometry {\n  public constructor(maxTheta: number) {\n    const vertices: number[] = [];\n    const indicies: number[] = [];\n    const uvs: number[] = [];\n\n    const height = 1;\n    const radialSegments = 60;\n    const halfHeight = height * 0.5;\n    const heightSegments = [-halfHeight, halfHeight];\n    const invRadialSegments = 1 / radialSegments;\n    const angleConst = maxTheta * invRadialSegments;\n\n    for (let yIdx = 0; yIdx < 2; yIdx++) {\n      const y = heightSegments[yIdx];\n\n      for (let lngIdx = 0; lngIdx <= radialSegments; lngIdx++) {\n        const angle = lngIdx * angleConst + Math.PI - maxTheta * 0.5;\n        const x = Math.cos(angle);\n        const z = Math.sin(angle);\n        const u = lngIdx * invRadialSegments;\n        const v = yIdx;\n\n        uvs.push(u, v);\n        vertices.push(x, y, z);\n\n        if (yIdx === 0 && lngIdx < radialSegments) {\n          const a = lngIdx;\n          const b = a + radialSegments + 1;\n\n          indicies.push(a, b, a + 1, b, b + 1, a + 1);\n        }\n      }\n    }\n\n    super(vertices, indicies, uvs);\n  }\n}\n\nexport default CylinderGeometry;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Geometry from \"./Geometry\";\n\n/**\n * @hidden\n */\nclass SphereGeometry extends Geometry {\n  /** */\n  public constructor() {\n    // const radius = 1;\n    const widthSegments = 60;\n    const heightSegments = 60;\n    const ANGLE_CORRECTION_FOR_CENTER_ALIGN = -0.5 * Math.PI;\n\n    const uvs: number[] = [];\n    const vertices: number[] = [];\n    const indicies: number[] = [];\n    let latIdx: number;\n    let lngIdx: number;\n\n    for (latIdx = 0; latIdx <= widthSegments; latIdx++) {\n      const theta = (latIdx / widthSegments - 0.5) * Math.PI;\n      const sinTheta = Math.sin(theta);\n      const cosTheta = Math.cos(theta);\n\n      for (lngIdx = 0; lngIdx <= heightSegments; lngIdx++) {\n        const phi = (lngIdx / heightSegments - 0.5) * 2 * Math.PI + ANGLE_CORRECTION_FOR_CENTER_ALIGN;\n        const sinPhi = Math.sin(phi);\n        const cosPhi = Math.cos(phi);\n        const x = cosPhi * cosTheta;\n        const y = sinTheta;\n        const z = sinPhi * cosTheta;\n        const u = lngIdx / heightSegments;\n        const v = latIdx / widthSegments;\n\n        uvs.push(u, v);\n        vertices.push(x, y, z);\n\n        if (lngIdx !== heightSegments && latIdx !== widthSegments) {\n          const a = latIdx * (heightSegments + 1) + lngIdx;\n          const b = a + heightSegments + 1;\n\n          indicies.push(a, a + 1, b, b, a + 1, b + 1);\n        }\n      }\n    }\n\n    super(vertices, indicies, uvs);\n  }\n}\n\nexport default SphereGeometry;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Uniform from \"./Uniform\";\n\nclass UniformFloat extends Uniform {\n  public val: number;\n\n  public constructor(val: number) {\n    super();\n\n    this.val = val;\n  }\n\n  public update(gl: WebGLRenderingContext | WebGL2RenderingContext, location: WebGLUniformLocation) {\n    gl.uniform1f(location, this.val);\n\n    this.needsUpdate = false;\n  }\n}\n\nexport default UniformFloat;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Geometry from \"./Geometry\";\n\n/**\n * @hidden\n */\nclass PlaneGeometry extends Geometry {\n  /** */\n  public constructor(width: number = 2, height: number = 2, z: number = -1) {\n    const halfWidth = width * 0.5;\n    const halfHeight = height * 0.5;\n    const vertices = [\n      -halfWidth, -halfHeight, z,\n      halfWidth, -halfHeight, z,\n      -halfWidth, halfHeight, z,\n      halfWidth, halfHeight, z\n    ];\n    const indicies = [\n      0, 1, 2,\n      2, 1, 3\n    ];\n    const uvs = [\n      0, 0,\n      1, 0,\n      0, 1,\n      1, 1\n    ];\n\n    super(vertices, indicies, uvs);\n  }\n}\n\nexport default PlaneGeometry;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Uniform from \"./Uniform\";\n\nclass UniformVector4Array extends Uniform {\n  public val: number[][];\n\n  public constructor(val: number[][]) {\n    super();\n\n    this.val = val;\n  }\n\n  public update(gl: WebGLRenderingContext | WebGL2RenderingContext, location: WebGLUniformLocation) {\n    gl.uniform4fv(location, this.val.reduce((arr, vector) => [...arr, ...vector], []));\n\n    this.needsUpdate = false;\n  }\n}\n\nexport default UniformVector4Array;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Projection, { ProjectionOptions } from \"./Projection\";\nimport UniformTexture2D from \"../uniform/UniformTexture2D\";\nimport WebGLContext from \"../core/WebGLContext\";\nimport Texture2D from \"../texture/Texture2D\";\nimport SphereGeometry from \"../geometry/SphereGeometry\";\nimport ShaderProgram from \"../core/ShaderProgram\";\nimport TriangleMesh from \"../core/TriangleMesh\";\nimport UniformVector4Array from \"../uniform/UniformVector4Array\";\nimport UniformFloat from \"../uniform/UniformFloat\";\nimport vs from \"../shader/stereoequi.vert\";\nimport fs from \"../shader/common.frag\";\n\n/**\n * Options for {@link StereoEquiProjection}\n * @ko {@link StereoEquiProjection}의 옵션들\n * @since 4.0.0\n * @category Projection\n */\nexport interface StereoEquiProjectionOptions extends ProjectionOptions {\n  src: string | HTMLElement;\n  /**\n   * Stereoscopic mode of the image\n   * @ko 이미지의 스테레오스코픽 모드\n   * @since 4.0.0\n   * @default \"top_bottom\"\n   */\n  mode: typeof StereoEquiProjection.MODE[keyof typeof StereoEquiProjection.MODE]\n}\n\n/**\n * Projection based on stereo equirectangular images.\n * @ko Stereo equirectangular 이미지 기반의 프로젝션\n * @since 4.0.0\n * @category Projection\n */\nclass StereoEquiProjection extends Projection<{\n  uTexture: UniformTexture2D;\n  uEye: UniformFloat;\n  uTexScaleOffset: UniformVector4Array;\n}> {\n  /**\n   * Available stereoscopic modes\n   * @ko 사용가능한 스테레오스코픽 모드들\n   * @since 4.0.0\n   */\n  public static MODE = {\n    /**\n     * @ko 이미지가 왼쪽/오른쪽으로 구성되어있을 경우\n     * @since 4.0.0\n     */\n    LEFT_RIGHT: \"left_right\",\n    /**\n     * @ko 이미지가 위/아래로 구성되어있을 경우\n     * @since 4.0.0\n     */\n    TOP_BOTTOM: \"top_bottom\",\n  } as const;\n\n  private _mode: StereoEquiProjectionOptions[\"mode\"];\n\n  /**\n   * Create new instance\n   * @ko 새로운 인스턴스를 생성합니다.\n   * @param options - Options {@ko 옵션들}\n   */\n  public constructor(options: StereoEquiProjectionOptions) {\n    super(options);\n\n    this._mode = options.mode;\n  }\n\n  public applyTexture(ctx: WebGLContext, texture: Texture2D) {\n    let leftEye: number[];\n    let rightEye: number[];\n\n    switch (this._mode) {\n      case StereoEquiProjection.MODE.LEFT_RIGHT:\n        leftEye = [0.5, 1, 0, 0];\n        rightEye = [0.5, 1, 0.5, 0];\n        break;\n      default:\n        // Default, uses \"top_bottom\"\n        leftEye = [1, 0.5, 0, 0];\n        rightEye = [1, 0.5, 0, 0.5];\n    }\n\n\n    const uniforms = {\n      uTexture: new UniformTexture2D(ctx, texture),\n      uEye: new UniformFloat(0),\n      uTexScaleOffset: new UniformVector4Array([leftEye, rightEye])\n    };\n\n    const geometry = new SphereGeometry();\n    const program = new ShaderProgram(ctx, vs, fs, uniforms);\n\n    const vao = ctx.createVAO(geometry, program);\n    const mesh = new TriangleMesh(vao, program);\n\n    this._mesh = mesh;\n  }\n}\n\nexport default StereoEquiProjection;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Projection, { ProjectionOptions } from \"./Projection\";\nimport UniformTextureCube from \"../uniform/UniformTextureCube\";\nimport UniformCanvasCube from \"../uniform/UniformCanvasCube\";\nimport TriangleMesh from \"../core/TriangleMesh\";\nimport ShaderProgram from \"../core/ShaderProgram\";\nimport WebGLContext from \"../core/WebGLContext\";\nimport Texture2D from \"../texture/Texture2D\";\nimport TextureCube from \"../texture/TextureCube\";\nimport CubeGeometry from \"../geometry/CubeGeometry\";\nimport vs from \"../shader/cube.vert\";\nimport fs from \"../shader/cube.frag\";\n\n/**\n * Options for {@link CubemapProjection}\n * @ko {@link CubemapProjection}의 옵션들\n * @since 4.0.0\n * @category Projection\n */\nexport interface CubemapProjectionOptions extends ProjectionOptions {\n  /**\n   * Order of the cubemap images.\n   * @ko 큐브맵 이미지의 순서.\n   * @since 4.0.0\n   * @default \"RLUDFB\" (Right - Left - Up - Down - Front - Back)\n   */\n  cubemapOrder?: string;\n  /**\n   * Whether to flip cubemap image horizontally.\n   * @ko 큐브맵 이미지를 좌우대칭할지 여부.\n   * @since 4.0.0\n   * @default false\n   */\n  cubemapFlipX?: boolean;\n}\n\n/**\n * Projection based on cubemap images, accepts both multiple or single images.\n * @ko 큐브맵 이미지 기반의 프로젝션, 단일 혹은 여러 장의 이미지를 모두 사용 가능합니다.\n * @since 4.0.0\n * @category Projection\n */\nclass CubemapProjection extends Projection<{\n  uTexture: UniformTextureCube | UniformCanvasCube;\n}> {\n  private _cubemapOrder: NonNullable<CubemapProjectionOptions[\"cubemapOrder\"]>;\n  private _cubemapFlipX: NonNullable<CubemapProjectionOptions[\"cubemapFlipX\"]>;\n\n  /**\n   * Create new instance.\n   * @ko 새 인스턴스를 생성합니다.\n   * @param options Options {@ko Options}\n   */\n  public constructor(options: CubemapProjectionOptions) {\n    super(options);\n\n    const {\n      cubemapOrder = \"RLUDFB\",\n      cubemapFlipX = false\n    } = options;\n\n    this._cubemapOrder = cubemapOrder;\n    this._cubemapFlipX = cubemapFlipX;\n  }\n\n  public applyTexture(ctx: WebGLContext, texture: Texture2D) {\n    const cubemapOrder = this._cubemapOrder;\n    const cubemapFlipX = this._cubemapFlipX;\n    const uniforms = {\n      uTexture: texture.isCube()\n        ? new UniformTextureCube(ctx, texture as TextureCube, cubemapOrder)\n        : new UniformCanvasCube(ctx, texture as Texture2D, cubemapOrder)\n    };\n\n    const geometry = new CubeGeometry({\n      order: cubemapOrder\n    });\n    const program = new ShaderProgram(ctx, vs, fs, uniforms);\n    const vao = ctx.createVAO(geometry, program);\n    const mesh = new TriangleMesh(vao, program);\n\n    if (cubemapFlipX) {\n      mesh.scale[0] = -1;\n    }\n    mesh.updateMatrix();\n\n    this._mesh = mesh;\n  }\n}\n\nexport default CubemapProjection;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Projection, { ProjectionOptions } from \"./Projection\";\nimport TriangleMesh from \"../core/TriangleMesh\";\nimport ShaderProgram from \"../core/ShaderProgram\";\nimport WebGLContext from \"../core/WebGLContext\";\nimport Texture2D from \"../texture/Texture2D\";\nimport UniformTexture2D from \"../uniform/UniformTexture2D\";\nimport CubeGeometry from \"../geometry/CubeGeometry\";\nimport vs from \"../shader/common.vert\";\nimport fs from \"../shader/common.frag\";\n\n/**\n * Options for {@link CubestripProjection}\n * @ko {@link CubestripProjection}의 옵션들\n * @since 4.0.0\n * @category Projection\n */\nexport interface CubestripProjectionOptions extends ProjectionOptions {\n  /**\n   * @copy CubemapProjectionOptions#cubemapOrder\n   */\n  cubemapOrder?: string;\n  /**\n   * @copy CubemapProjectionOptions#cubemapFlipX\n   */\n  cubemapFlipX?: boolean;\n}\n\n/**\n * Projection based on cubemap strip.\n * Slightly more efficient than {@link CubemapProjection} as it doesn't copy cubemap image to canvas while rendering.\n * Accepts only single image.\n * @ko 큐브맵 스트립 기반의 프로젝션.\n * {@link CubemapProjection}와 달리 렌더링하는 과정에 캔버스에 이미지를 복사하는 과정이 없기 때문에 살짝 더 효율적입니다.\n * 단일 이미지만 사용 가능합니다.\n * @since 4.0.0\n * @category Projection\n */\nclass CubestripProjection extends Projection<{\n  uTexture: UniformTexture2D;\n}> {\n  private _cubemapOrder: NonNullable<CubestripProjectionOptions[\"cubemapOrder\"]>;\n  private _cubemapFlipX: NonNullable<CubestripProjectionOptions[\"cubemapFlipX\"]>;\n\n  /**\n   * Create new instance.\n   * @ko 새 인스턴스를 생성합니다.\n   * @param options Options {@ko Options}\n   */\n  public constructor(options: CubestripProjectionOptions) {\n    super(options);\n\n    const {\n      cubemapOrder = \"RLUDFB\",\n      cubemapFlipX = false\n    } = options;\n\n    this._cubemapOrder = cubemapOrder;\n    this._cubemapFlipX = cubemapFlipX;\n  }\n\n  public applyTexture(ctx: WebGLContext, texture: Texture2D) {\n    const cubemapOrder = this._cubemapOrder;\n    const cubemapFlipX = this._cubemapFlipX;\n    const uniforms = {\n      uTexture: new UniformTexture2D(ctx, texture)\n    };\n    const geometry = new CubeGeometry({\n      order: cubemapOrder\n    });\n    const program = new ShaderProgram(ctx, vs, fs, uniforms);\n    const vao = ctx.createVAO(geometry, program);\n    const mesh = new TriangleMesh(vao, program);\n\n    if (cubemapFlipX) {\n      mesh.scale[0] = -1;\n    }\n    mesh.updateMatrix();\n\n    this._mesh = mesh;\n  }\n}\n\nexport default CubestripProjection;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n*/\nimport { quat } from \"gl-matrix\";\nimport Projection, { ProjectionOptions } from \"./Projection\";\nimport UniformTexture2D from \"../uniform/UniformTexture2D\";\nimport WebGLContext from \"../core/WebGLContext\";\nimport Texture2D from \"../texture/Texture2D\";\nimport CylinderGeometry from \"../geometry/CylinderGeometry\";\nimport Camera from \"../core/Camera\";\nimport ShaderProgram from \"../core/ShaderProgram\";\nimport { DEG_TO_RAD, RAD_TO_DEG } from \"../const/internal\";\nimport vs from \"../shader/common.vert\";\nimport fs from \"../shader/common.frag\";\nimport TriangleMesh from \"../core/TriangleMesh\";\n\n/**\n * Options for {@link CylindricalProjection}\n * @ko {@link CylindricalProjection}의 옵션들\n * @since 4.0.0\n * @category Projection\n */\nexport interface CylindricalProjectionOptions extends ProjectionOptions {\n  src: string | HTMLElement;\n  /**\n   * Whether the panorama image covers full 360 degrees.\n   * @ko 파노라마 이미지가 360도를 전부 커버하는지 여부\n   * @since 4.0.0\n   * @default false\n   */\n  partial?: boolean;\n}\n\n/**\n * Projection based on cylindrical projection.\n * This can show panorama images taken from smartphones.\n * @ko 원통 투영법 기반의 프로젝션.\n * 일반적인 스마트폰 파노라마 사진을 표시하는데 사용될 수 있습니다.\n * @since 4.0.0\n * @category Projection\n */\nclass CylindricalProjection extends Projection<{\n  uTexture: UniformTexture2D;\n}> {\n  private _partial: boolean;\n\n  /**\n   * Create new instance.\n   * @ko 새 인스턴스를 생성합니다.\n   * @param options Options {@ko Options}\n   */\n  public constructor(options: CylindricalProjectionOptions) {\n    super(options);\n\n    const {\n      partial = false\n    } = options;\n\n    this._partial = partial;\n  }\n\n  public applyTexture(ctx: WebGLContext, texture: Texture2D) {\n    const partial = this._partial;\n    const { width, height } = texture;\n    const aspect = width / height;\n    const halfVFov = 180 / aspect;\n    const cylinderHeight = partial\n      ? 1\n      : 2 * Math.tan(halfVFov * DEG_TO_RAD);\n    const cylinderTheta = partial\n      ? aspect\n      : 2 * Math.PI;\n\n    const geometry = new CylinderGeometry(cylinderTheta);\n    const program = new ShaderProgram(ctx, vs, fs, {\n      uTexture: new UniformTexture2D(ctx, texture)\n    });\n    const vao = ctx.createVAO(geometry, program);\n    const mesh = new TriangleMesh(vao, program);\n\n    mesh.scale[1] = cylinderHeight;\n    quat.identity(mesh.rotation);\n    quat.rotateY(mesh.rotation, mesh.rotation, -Math.PI / 2);\n    mesh.updateMatrix();\n\n    this._mesh = mesh;\n  }\n\n  public updateCamera(camera: Camera) {\n    super.updateCamera(camera);\n\n    const mesh = this._mesh;\n    if (!mesh) return;\n\n    const uTexture = mesh.program.uniforms.uTexture;\n    const texture = uTexture.texture;\n    const { width, height } = texture;\n    const aspect = width / height;\n    const halfHeight = mesh.scale[1] * 0.5;\n\n    if (this._partial) {\n      const restrictedYaw = 0.5 * aspect * RAD_TO_DEG;\n      camera.restrictYawRange(-restrictedYaw, restrictedYaw);\n    }\n\n    const restrictedPitch = Math.atan2(halfHeight, 1) * RAD_TO_DEG;\n    const minZoom = Math.tan(camera.fov * DEG_TO_RAD * 0.5) / (halfHeight * camera.aspect);\n\n    camera.restrictPitchRange(-restrictedPitch, restrictedPitch);\n    camera.restrictZoomRange(minZoom, Infinity);\n    camera.restrictRenderHeight(halfHeight * 2);\n  }\n}\n\nexport default CylindricalProjection;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Projection, { ProjectionOptions } from \"./Projection\";\nimport TriangleMesh from \"../core/TriangleMesh\";\nimport ShaderProgram from \"../core/ShaderProgram\";\nimport UniformTexture2D from \"../uniform/UniformTexture2D\";\nimport WebGLContext from \"../core/WebGLContext\";\nimport Texture2D from \"../texture/Texture2D\";\nimport CubeGeometry from \"../geometry/CubeGeometry\";\nimport vs from \"../shader/common.vert\";\nimport fs from \"../shader/eac.frag\";\nimport { ROTATE } from \"../const/internal\";\n\n/**\n * Options for {@link EquiangularProjection}\n * @ko {@link EquiangularProjection}의 옵션들\n * @since 4.0.0\n * @category Projection\n */\nexport interface EquiangularProjectionOptions extends ProjectionOptions {}\n\n/**\n * Equi-Angular Cubemap Projection.\n * This format is used by Youtube's 360 videos.\n * @ko Equi-Angular Cubemap 프로젝션.\n * 이 포맷은 주로 Youtube의 360 비디오에 사용됩니다.\n * @since 4.0.0\n * @category Projection\n */\nclass EquiangularProjection extends Projection<{\n  uTexture: UniformTexture2D;\n}> {\n  public applyTexture(ctx: WebGLContext, texture: Texture2D) {\n    const uniforms = {\n      uTexture: new UniformTexture2D(ctx, texture)\n    };\n    const geometry = new CubeGeometry({\n      order: \"LFRDBU\",\n      rotateUV: [\n        ROTATE.ZERO, ROTATE.ZERO, ROTATE.ZERO,\n        ROTATE.CW_90, ROTATE.CCW_90, ROTATE.CW_90\n      ]\n    });\n    const program = new ShaderProgram(ctx, vs, fs, uniforms);\n    const vao = ctx.createVAO(geometry, program);\n    const mesh = new TriangleMesh(vao, program);\n\n    this._mesh = mesh;\n  }\n}\n\nexport default EquiangularProjection;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Projection, { ProjectionOptions } from \"./Projection\";\nimport WebGLContext from \"../core/WebGLContext\";\nimport UniformTexture2D from \"../uniform/UniformTexture2D\";\nimport Texture2D from \"../texture/Texture2D\";\nimport ShaderProgram from \"../core/ShaderProgram\";\nimport SphereGeometry from \"../geometry/SphereGeometry\";\nimport TriangleMesh from \"../core/TriangleMesh\";\nimport vs from \"../shader/common.vert\";\nimport fs from \"../shader/common.frag\";\n\n/**\n * Options for {@link EquirectProjection}\n * @ko {@link EquirectProjection}의 옵션들\n * @since 4.0.0\n * @category Projection\n */\nexport interface EquirectProjectionOptions extends ProjectionOptions {\n  src: string | HTMLElement;\n}\n\n/**\n * Projection based on equirectangular projection.\n * @ko 등 장방형 도법(Equirectangular projection) 기반의 프로젝션\n * @since 4.0.0\n * @category Projection\n */\nclass EquirectProjection extends Projection<{\n  uTexture: UniformTexture2D\n}> {\n  /**\n   * Create new instance\n   * @ko 새로운 인스턴스를 생성합니다.\n   * @param options - Options {@ko 옵션들}\n   */\n  public constructor(options: EquirectProjectionOptions) {\n    super(options);\n  }\n\n  public applyTexture(ctx: WebGLContext, texture: Texture2D) {\n    const uniforms = {\n      uTexture: new UniformTexture2D(ctx, texture)\n    };\n\n    const geometry = new SphereGeometry();\n    const program = new ShaderProgram(ctx, vs, fs, uniforms);\n\n    const vao = ctx.createVAO(geometry, program);\n    const mesh = new TriangleMesh(vao, program);\n\n    this._mesh = mesh;\n  }\n}\n\nexport default EquirectProjection;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Projection, { ProjectionOptions } from \"./Projection\";\nimport WebGLContext from \"../core/WebGLContext\";\nimport UniformTexture2D from \"../uniform/UniformTexture2D\";\nimport UniformFloat from \"../uniform/UniformFloat\";\nimport Camera from \"../core/Camera\";\nimport PanoControl from \"../control/PanoControl\";\nimport ShaderProgram from \"../core/ShaderProgram\";\nimport Texture2D from \"../texture/Texture2D\";\nimport PlaneGeometry from \"../geometry/PlaneGeometry\";\nimport vs from \"../shader/little-planet.vert\";\nimport fs from \"../shader/little-planet.frag\";\nimport TriangleMesh from \"../core/TriangleMesh\";\n\n/**\n * Options for {@link LittlePlanetProjection}\n * @ko {@link LittlePlanetProjection}의 옵션들\n * @since 4.0.0\n * @category Projection\n */\nexport interface LittlePlanetProjectionOptions extends ProjectionOptions {\n  src: string | HTMLElement;\n}\n\n/**\n * Projection based on so-called \"Little planet\" or \"Tiny planet\" effect.\n * @ko \"Little planet\" 혹은 \"Tiny planet\"로 불리는 이펙트 기반의 프로젝션\n * @since 4.0.0\n * @category Projection\n */\nclass LittlePlanetProjection extends Projection<{\n  uTexture: UniformTexture2D;\n  uYaw: UniformFloat;\n  uPitch: UniformFloat;\n  uZoom: UniformFloat;\n}> {\n  /**\n   * Create new instance\n   * @ko 새로운 인스턴스를 생성합니다.\n   * @param options - Options {@ko 옵션들}\n   */\n  public constructor(options: LittlePlanetProjectionOptions) {\n    super(options);\n  }\n\n  public applyTexture(ctx: WebGLContext, texture: Texture2D) {\n    texture.wrapS = WebGLRenderingContext.REPEAT;\n    texture.wrapT = WebGLRenderingContext.REPEAT;\n\n    const uniforms = {\n      uTexture: new UniformTexture2D(ctx, texture),\n      uYaw: new UniformFloat(0),\n      uPitch: new UniformFloat(0.5),\n      uZoom: new UniformFloat(1)\n    };\n\n    const geometry = new PlaneGeometry();\n    const program = new ShaderProgram(ctx, vs, fs, uniforms);\n\n    const vao = ctx.createVAO(geometry, program);\n    const mesh = new TriangleMesh(vao, program);\n\n    this._mesh = mesh;\n  }\n\n  public updateControl(control: PanoControl) {\n    control.ignoreZoomScale = true;\n  }\n\n  public update(camera: Camera) {\n    const mesh = this._mesh;\n    if (!mesh) return;\n\n    const uniforms = mesh.program.uniforms;\n\n    uniforms.uYaw.val = camera.yaw / 360;\n    // Range from 0 ~ 1\n    uniforms.uPitch.val = (camera.pitch / 180) + 0.5;\n    uniforms.uZoom.val = camera.zoom;\n\n    uniforms.uYaw.needsUpdate = true;\n    uniforms.uPitch.needsUpdate = true;\n    uniforms.uZoom.needsUpdate = true;\n  }\n}\n\nexport default LittlePlanetProjection;\n","/**\n * @hidden\n */\nexport const getValidProps = (propsObj: any) => {\n  return Object.keys(propsObj).reduce((props, propName) => {\n    if (propsObj[propName] != null) {\n      props[propName] = propsObj[propName];\n    }\n\n    return props;\n  }, {});\n};\n","export const VIEW360_METHODS = [\n  \"destroy\",\n  \"init\",\n  \"load\",\n  \"resize\",\n  \"addPlugins\",\n  \"removePlugins\",\n  \"renderFrame\",\n  // @egjs/component methods\n  \"on\",\n  \"hasOn\",\n  \"once\",\n  \"off\",\n  \"trigger\"\n] as const;\n","import Component from \"@egjs/component\";\nimport View360 from \"../View360\";\n\n/**\n * @hidden\n */\nconst withMethods = (prototype: any, attr: string) => {\n  [Component.prototype, View360.prototype].forEach(proto => {\n    Object.getOwnPropertyNames(proto)\n      .filter(name => name.charAt(0) !== \"_\" && name !== \"constructor\")\n      .forEach((name: string) => {\n        const descriptor = Object.getOwnPropertyDescriptor(proto, name)!;\n\n        if (descriptor.value) {\n          // Public Function\n          Object.defineProperty(prototype, name, {\n            value: function(...args) {\n              return descriptor.value.call(this[attr], ...args);\n            }\n          });\n        } else {\n          const getterDescriptor: { get?: () => any; set?: (val: any) => void } = {};\n          if (descriptor.get) {\n            getterDescriptor.get = function() {\n              return this[attr] && descriptor.get?.call(this[attr]);\n            };\n          }\n          if (descriptor.set) {\n            getterDescriptor.set = function(...args) {\n              return descriptor.set?.call(this[attr], ...args);\n            };\n          }\n\n          Object.defineProperty(prototype, name, getterDescriptor);\n        }\n      });\n  });\n};\n\nexport default withMethods;\n","/*\n * Copyright (c) 2023-present NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport View360, * as modules from \"./index\";\nimport { merge } from \"./utils\";\n\nmerge(View360, modules);\n\nexport default View360;\n"],"names":["View360Error","Error","constructor","message","code","super","Object","setPrototypeOf","this","prototype","name","ERROR_CODES","WRONG_TYPE","WRONG_OPTION","ELEMENT_NOT_FOUND","CANVAS_NOT_FOUND","WEBGL_NOT_SUPPORTED","FAILED_CREATE_CONTEXT_2D","PROVIDE_PROJECTION_FIRST","FAILED_LINKING_PROGRAM","INSUFFICIENT_ARGS","ERROR","val","types","map","type","join","optionName","query","msg","shaderLog","EVENTS","EL_DIV","EL_BUTTON","MOUSE_BUTTON","CURSOR","KEY_DIRECTION","DIRECTION_KEY_CODE","DIRECTION_KEY_NAME","LEFT","UP","RIGHT","DOWN","FULLSCREEN_REQUEST","FULLSCREEN_ELEMENT","FULLSCREEN_EXIT","FULLSCREEN_CHANGE","DEFAULT_CLASS","CONTAINER","CANVAS","CTX_LOST","IN_VR","HOTSPOT_CONTAINER","HOTSPOT","HOTSPOT_VISIBLE","HOTSPOT_FLIP_X","HOTSPOT_FLIP_Y","READY","LOAD_START","LOAD","PROJECTION_CHANGE","RESIZE","BEFORE_RENDER","RENDER","INPUT_START","INPUT_END","VIEW_CHANGE","STATIC_CLICK","VR_START","VR_END","EASING","LINEAR","x","SINE_WAVE","Math","sin","PI","EASE_OUT_CUBIC","pow","EASE_OUT_BOUNCE","n1","d1","CAMERA_EVENTS","CONTROL_EVENTS","DEG_TO_RAD","RAD_TO_DEG","DEFAULT_EASING","DEFAULT_ANIMATION_DURATION","INFINITE_RANGE","min","Infinity","max","DEFAULT_PITCH_RANGE","DEFAULT_ZOOM_RANGE","ROTATE","VIDEO_TIME_CHANGE_EVENT","SVG_NAMESPACE","SESSION_VR","XR_REFERENCE_SPACE","EPSILON","_a","Number","isString","createElement","className","tag","BROWSER","el","document","classList","add","getNullableElement","parent","targetEl","queryResult","querySelector","nodeType","Node","ELEMENT_NODE","clamp","lerp","a","b","t","circulate","size","abs","findIndex","array","checker","idx","length","getObjectOption","toVerticalFov","fovRadian","aspect","atan","tan","reorderCube","arr","order","defaultOrder","split","face","indexOf","index","isFullscreen","key","sensorCanBeEnabledIOS","DeviceMotionEvent","window","isSecureContext","eulerToQuat","out","yaw","pitch","roll","quat","pitchClamped","quatToEuler","quaternion","y","z","w","unit","test","atan2","view","vec3","up","viewXZ","sqrt","Motion","_val","start","_start","end","_end","progress","_progress","activated","_activated","duration","_duration","loop","_loop","range","_range","easing","_easing","reset","update","deltaTime","prev","nextProgress","easedProgress","defaultVal","delta","setNewEndByDelta","setRange","CameraAnimation","_motion","camera","from","to","_camera","_from","_to","_finishPromise","Promise","resolve","_finish","getFinishPromise","motion","rotation","zoom","rotate","Camera","Component","_aspect","changed","_changed","yawRange","_initialYawRange","pitchRange","_initialPitchRange","zoomRange","_initialZoomRange","initialYaw","initialPitch","initialZoom","fov","rollOffset","position","animation","_up","_yawRange","_pitchRange","_zoomRange","_updateQuaternion","viewMatrix","mat4","projectionMatrix","_maxRenderHeight","destroy","off","resize","width","height","prevAspect","updateMatrix","lookAt","prevQuaternion","prevZoom","zoomDiff","normalized","isSameRotation","animateTo","finishPromise","then","trigger","restrictYawRange","restrictPitchRange","restrictZoomRange","restrictRenderHeight","resetRange","getYawRange","yawLimit","maxRenderHeight","halfHFov","getHorizontalFov","minYaw","maxYaw","halfVFovRad","h","d","theta","getPitchRange","pitchLimit","minPitch","maxPitch","halfVFov","getVerticalFov","getZoomRange","limit","minFov","maxFov","currentFov","current","_getZoomedHorizontalFov","hFov","fovToZoom","baseFov","projMatrix","upDir","viewDir","vFov","onFrameRender","MouseInput","_onMouseDown","evt","_el","button","preventDefault","focus","_prevPos","clientX","clientY","addEventListener","_onMouseMove","_onMouseUp","srcEvent","isTouch","isKeyboard","prevPos","deltaX","deltaY","removeEventListener","scrolling","enable","element","disable","TouchInput","scrollable","_scrollable","_onTouchStart","touches","_scrolling","touch","_isFirstTouch","_onTouchMove","cancelable","_onTouchEnd","passive","KeyboardInput","active","pressed","_pressed","_onKeyDown","location","KeyboardEvent","DOM_KEY_LOCATION_STANDARD","_updateKeyPress","pressedCount","_getPressedKeyCount","repeat","_onKeyUp","_clearPressedKeys","_getDeltaByPressedKeys","reduce","obj","keyName","assign","event","isEnable","keyToUpdate","keyCode","filter","RotateControl","enabled","_enabled","enableBlocked","_enableBlocked","animating","_keyboardInput","_xMotion","_yMotion","_touchInput","pointerScale","_pointerScale","keyboardScale","_keyboardScale","disablePitch","_disablePitch","disableYaw","_disableYaw","disableKeyboard","_disableKeyboard","controlEl","_onInputStart","_changedWhileDragging","inputType","_onChange","invZoomScale","_zoomScale","screenScale","_screenScale","scale","scaledX","scaledY","_onInputEnd","_controlEl","_mouseInput","_bindInputs","xMotion","yMotion","keyboardInput","updateRange","setZoomScale","hfov","vfov","control","updateCursor","sync","mouseInput","touchInput","on","WheelInput","_onWheel","stopPropagation","_inputTimer","_clearTimer","_baseScale","setTimeout","capture","clearTimeout","PinchInput","prevDistance","_prevDistance","diff","pageX","pageY","distance","ZoomControl","_wheelInput","_scale","scaledDelta","_pinchInput","wheelInput","pinchInput","ROTATE_CONSTANT","PITCH_DELTA","YAW_DELTA_BY_ROLL","YAW_DELTA_BY_YAW","targetAxis","meshPoint","GyroInput","orientationUpdated","_orientationUpdated","ignoreRoll","_ignoreRoll","_onDeviceOrientation","prevOrientation","_orientation","alpha","beta","gamma","_needsCalibrate","_calibrateSensor","_updateScreenOrientation","screen","orientation","undefined","angle","_screenOrientation","_yawOrigin","_yawOffset","_updateRotation","collectDelta","prevRotation","_toEulerDelta","setInitialRotation","yawOrigin","sensorYaw","screenAngle","world","cos","prevQuat","currentQuat","_getDeltaYaw","_getDeltaPitch","prvQ","curQ","yawDeltaByYaw","_getRotationDelta","_extractPitchFromQuat","prevQ","rotateKind","curQuaternion","prevPoint","curPoint","rotateDirection","meshPoint2","meshPoint3","vecU","vecV","vecN","coefficientA","coefficientB","coefficientC","projectedPrevPoint","trigonometricRatio","acos","crossVec","thetaDirection","baseV","GyroControl","_input","static","onDeviceMotionChange","race","res","rotationRate","available","requestPermission","permissionState","catch","_updateYawPitch","input","yawDelta","pitchDelta","PanoControl","useGrabCursor","_useGrabCursor","_setCursor","disableContextMenu","_disableContextMenu","_blockContextMenu","_restoreContextMenu","_rotateControl","wheelScrollable","_zoomControl","ignoreZoomScale","_ignoreZoomScale","gyro","_gyroControl","_preventContextMenu","_onEnable","_onDisable","_onCameraAnimationEnd","_bindEvents","isAvailable","rotateControl","zoomControl","gyroControl","hfovToZoom","zoomScale","newCursor","style","cursor","Texture","flipY","wrapS","WebGLRenderingContext","CLAMP_TO_EDGE","wrapT","isVideo","isCube","Texture2D","source","TextureVideo","video","pause","removeAttribute","load","isPaused","paused","ended","readyState","hasAudio","audioTracks","webkitAudioDecodedByteCount","mozHasAudio","TextureCube","sources","TextureLoader","_loadChecker","ImReady","src","loadVideo","Array","isArray","loadCubeImage","imgSrc","loadImage","images","_toImageArray","_load","image","naturalWidth","naturalHeight","videoConfig","config","autoplay","muted","volume","_toVideoElement","currentTime","play","videoWidth","videoHeight","content","onLoad","loader","reject","once","errorCount","check","imgEl","Image","crossOrigin","HTMLVideoElement","playsInline","setAttribute","forEach","_appendSourceElement","querySelectorAll","HTMLSourceElement","sourceEl","appendChild","FrameAnimator","maxDeltaTime","context","_context","_rafId","_rafTimer","_lastUpdateTime","callback","_time","frame","time","Date","now","requestAnimationFrame","stop","cancelAnimationFrame","changeContext","AutoResizer","useResizeObserver","_useResizeObserver","onResize","_skipFirstResize","isFirstResize","_onResize","_resizeObserver","ResizeObserver","bbox","getBoundingClientRect","resizeImmediate","resizeObserver","observe","disconnect","Autoplay","playing","_interrupted","delay","_delay","delayOnMouseLeave","_delayOnMouseLeave","speed","_speed","pauseOnHover","_pauseOnHover","canInterrupt","_canInterrupt","disableOnInterrupt","_disableOnInterrupt","viewer","options","_clearTimeout","_setUninterruptedAfterDelay","_onGyroEnable","_onMouseEnter","_hovering","_onMouseLeave","_control","_element","_interruptionTimer","enableAfterDelay","XRManager","ctx","exit","_onSessionEnd","_xrSession","_xrRefSpace","_ctx","_options","xr","navigator","isSessionSupported","enter","requestSensorPermission","requiredFeatures","makeXRCompatible","session","requestSession","bindXRLayer","refSpace","requestReferenceSpace","_setSession","xrSession","canRender","getViewerPose","getEyeParams","pose","glLayer","renderState","baseLayer","views","viewport","getViewport","vMatrix","transform","inverse","matrix","pMatrix","Hotspot","HotspotRenderer","rootEl","renderer","_containerEl","_renderer","_hotspots","_zoom","refresh","container","hotspotEls","slice","apply","_parseHotspot","render","hotspots","halfWidth","halfHeight","centerTransform","zoomTransform","hotspot","relPos","remove","screenPos","vec2","yawStr","dataset","pitchStr","positionStr","parseFloat","_yawPitchToVec3","pos","defaultPos","yawRad","pitchRad","VertexArrayObject","count","geometry","indicies","buffers","WebGLContext","canvas","_canvas","maxTextureSize","_maxTextureSize","isWebGL2","_isWebGL2","supportVAO","_extensions","vao","lost","_contextLost","debug","_debug","_onContextLost","_onContextRestore","loseContext","init","gl","_getContext","_gl","getParameter","MAX_TEXTURE_SIZE","getExtension","bindBuffer","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","forceLoseContext","extension","forceRestoreContext","restoreContext","clear","COLOR_BUFFER_BIT","drawingBufferWidth","drawingBufferHeight","createVAO","shaderProgram","nativeVAO","_createNativeVAO","_createBuffer","uv","_bindNativeVAO","_supplyGeometryData","_unbindBuffers","draw","drawElements","TRIANGLES","UNSIGNED_SHORT","releaseVAO","_deleteNativeVAO","_deleteBuffer","getUniformLocations","program","uniforms","uniformLocations","keys","locations","getUniformLocation","_getCommonUniformLocations","updateCommonUniforms","entity","mvMatrix","uniformMatrix4fv","uMVMatrix","uPMatrix","updateVRUniforms","eyeIndex","uEye","uniform1f","updateUniforms","uniform","needsUpdate","releaseShaderResources","deleteProgram","useProgram","createProgram","vertexShader","fragmentShader","vs","_compileShader","VERTEX_SHADER","fs","FRAGMENT_SHADER","attachShader","bindAttribLocation","linkProgram","getProgramParameter","LINK_STATUS","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","getProgramInfoLog","deleteShader","createWebGLTexture","texData","texture","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","gl2","texStorage2D","RGBA8","createWebGLCubeTexture","TEXTURE_CUBE_MAP","attributes","getContextAttributes","xrCompatible","xrLayer","XRWebGLLayer","updateRenderState","bindXRFrame","bindFramebuffer","FRAMEBUFFER","framebuffer","useDefaultFrameBuffer","createBuffer","buffer","deleteBuffer","createVertexArray","ext","createVertexArrayOES","bindVertexArray","bindVertexArrayOES","deleteVertexArray","deleteVertexArrayOES","_supplyIndiciesData","_supplyAttributeData","vertices","uvs","bufferData","data","STATIC_DRAW","attribute","attribLocation","getAttribLocation","vertexAttribPointer","itemSize","FLOAT","enableVertexAttribArray","shader","createShader","shaderSource","compileShader","webglIdentifiers","contextAttributes","preserveDrawingBuffer","antialias","onWebglContextCreationError","e","statusMessage","identifier","getContext","WebGLRenderer","_elementSize","pixelRatio","_pixelRatio","canvasSize","devicePixelRatio","clientWidth","clientHeight","projection","mesh","getMesh","renderVR","vr","eyeParams","eye","View360","_rootEl","_vr","_hotspot","plugins","_plugins","_projection","_initialized","initialized","_autoplay","autoInit","_autoInit","autoResize","_autoResize","canvasSelector","_canvasSelector","tabIndex","_tabIndex","_animator","updateCamera","root","renderFrame","autoPlayer","_emit","_renderFrameOnDemand","getTexture","_renderVRFrame","_delta","getElement","findCanvas","selector","_autoResizer","_addEventHandlers","releaseAllResources","plugin","animator","_bindComponentEvents","_resizeComponents","_loadTexture","_applyProjection","hasAttribute","addPlugins","push","removePlugins","pluginIdx","splice","eventName","params","evtParams","target","prevProjection","applyTexture","updateControl","contentLoader","events","evtName","VERSION","Object3D","LoadingSpinner","_startLoading","_container","_detachElements","parentElement","removeChild","_createElements","ring","RING","ControlBarItem","CONTROL_BAR_DEFAULT_CLASS","CONTROLS_ROOT","CONTROLS_BG","CONTROLS_MAIN","CONTROLS_TOP","CONTROLS_BOTTOM","CONTROLS_MID","CONTROLS_LEFT","CONTROLS_RIGHT","CONTROLS_FLOAT_LEFT","CONTROLS_FLOAT_RIGHT","CONTROLS_BUTTON","PROGRESS_ROOT","VOLUME_ROOT","RANGE_ROOT","RANGE_TRACK","RANGE_THUMB","RANGE_FILLER","PLAY_BUTTON","PAUSE_BUTTON","UNMUTED_BUTTON","MUTED_BUTTON","FULLSCREEN_BUTTON","FULLSCREEN_EXIT_BUTTON","VR_BUTTON","GYRO_ENABLED","GYRO_DISABLED","VIDEO_TIME_DISPLAY","PIEVIEW_ROOT","FIXED","UNAVAILABLE","HIDDEN","CONTROL_BAR_ITEM_POSITION","TOP_LEFT","TOP_RIGHT","MAIN_TOP","MAIN_BOTTOM","MAIN_LEFT","MAIN_RIGHT","RangeControl","_onHold","_bbox","elX","scrollX","pageXOffset","clamepdX","thumbEl","_fixedClass","_onRelease","track","thumb","filler","draggable","trackEl","fillerEl","left","right","bottom","top","updateStyle","clampedProgress","ProgressBar","_rangeControl","_onTimeUpdate","_video","_currentTime","_onDurationChange","controlBar","_controlBar","dispatchEvent","CustomEvent","detail","_wasPaused","_playPromise","_onControl","rangeControl","unavailableClass","PlayButton","_onClick","_paused","_onPlay","title","_onPause","VolumeControl","_updateDisplay","disabled","_onVolumeChange","_buttonEl","containerEl","buttonEl","FullscreenButton","_targetEl","_exitFullscreen","_requestFullscreen","_onFullscreenChange","_fullscreenAvailable","_addFullscreenHandlers","_removeFullscreenHandlers","some","request","call","VideoTime","_onCustomTimeChange","timeMinute","floor","timeSeconds","timeSecondsFormatted","durationMinute","durationSeconds","durationSecondsFormatted","innerText","PieView","resetCamera","_viewer","_updatePie","piePath","_piePathEl","rangeCircle","_rangeCircleEl","halfFov","pieRadius","pieDeg","pieOffset","isFinite","radius","rangeDiff","offset","_createPieElements","rootClass","pieSVG","createElementNS","VRButton","GyroButton","_updateStyle","enableButton","AutoHide","hidden","contains","_hiddenClass","initialDelay","idleDelay","activationDelay","_isCursorInside","show","_hideAfterDelay","_isFullscreen","showTemporaliy","_isGrabbing","pointerType","_onVideoPlay","_onVideoPause","_initialDelay","_idleDelay","_timer","hide","_clearHideTimer","VideoControl","videoEl","keyPressed","_changeVideoTime","_changeVideoVolume","_toggleVideo","forward","increase","ControlBar","backgroundEl","_bgEl","items","_items","customItems","_customItems","autoHide","showBackground","clickToPlay","keyboardControls","progressBar","playButton","volumeButton","fullscreenButton","videoTime","pieView","vrButton","gyroButton","_onStaticClick","autoHider","_autoHider","_onNewSrcLoad","_updateBackground","_updateAutoHide","_updateKeyboardHandler","item","_createPositionWrappers","POSITION","_videoControl","panoRoot","controlsRoot","defaultItems","_createDefaultItems","_addItem","_clearItemElements","category","wrapper","_wrapperEl","nextSiblingIndex","sibling","nextSibling","insertBefore","floatLeftEl","floatRightEl","topWrapper","bottomWrapper","midWrapper","leftControlsWrapper","rightControlsWrapper","firstChild","background","hiddenClass","_b","videoControl","Projection","_mesh","uTexture","Uniform","UniformTextureCube","cubemapOrder","_webglTexture","_cubemapOrder","deleteTexture","pixelStorei","UNPACK_FLIP_Y_WEBGL","uniform1i","activeTexture","TEXTURE0","texSubImage2D","TEXTURE_CUBE_MAP_POSITIVE_X","RGBA","UNSIGNED_BYTE","texImage2D","CubeTexturePainter","_size","_renderingOrder","undef","_calcRenderingSize","surfaceIdx","row","_row","column","_column","renderingFace","drawImage","UniformCanvasCube","_painter","TriangleMesh","ShaderProgram","VertexData","Geometry","Float32Array","Uint16Array","CubeGeometry","rotateUV","oneThird","coords","r","c","coord","degree","ZERO","newOrder","CW_90","CCW_90","newCoords","uvIdx","acc","concat","UniformTexture2D","CylinderGeometry","maxTheta","heightSegments","invRadialSegments","angleConst","yIdx","lngIdx","u","v","SphereGeometry","ANGLE_CORRECTION_FOR_CENTER_ALIGN","latIdx","sinTheta","cosTheta","phi","sinPhi","UniformFloat","PlaneGeometry","UniformVector4Array","uniform4fv","vector","StereoEquiProjection","_mode","mode","leftEye","rightEye","MODE","LEFT_RIGHT","uTexScaleOffset","TOP_BOTTOM","cubemapFlipX","_cubemapFlipX","partial","_partial","cylinderHeight","cylinderTheta","restrictedYaw","restrictedPitch","minZoom","REPEAT","uYaw","uPitch","uZoom","propsObj","props","propName","withMethods","attr","proto","getOwnPropertyNames","charAt","descriptor","getOwnPropertyDescriptor","value","defineProperty","args","getterDescriptor","get","set","merge","srcs","modules"],"mappings":";;;;;;;;;;;;;;gpNAUA,MAAMA,UAAqBC,MAczBC,YAAmBC,EAAiBC,GAClCC,MAAMF,GAENG,OAAOC,eAAeC,KAAMR,EAAaS,WAEzCD,KAAKE,KAAO,eACZF,KAAKJ,KAAOA,CACd,ECrBK,MAAMO,EAAc,CAMzBC,WAAY,EAMZC,aAAc,EAMdC,kBAAmB,EAMnBC,iBAAkB,EAMlBC,oBAAqB,EAMrBC,yBAA0B,EAM1BC,yBAA0B,EAM1BC,uBAAwB,EAMxBC,kBAAmB,GAeN,IAAAC,EACNV,EADMU,EAZS,CACtBT,WAAYA,CAACU,EAAUC,IAAuB,UAAOD,cAAgBC,EAAMC,KAAIC,GAAY,IAAAA,OAASC,KAAK,WACzGb,aAAcA,CAACS,EAAUK,IAA6C,sBAAAL,kBAAoBK,MAC1Fb,kBAAoBc,GAAkB,0BAA0BA,gBAChEb,iBAAkB,kEAClBC,oBAAqB,0CACrBC,yBAA0B,qCAC1BC,yBAA0B,yDAC1BC,uBAAwBA,CAACU,EAAoBC,IAAgE,mCAAAD,0BAA4BC,IACzIV,kBAAmBA,CAACE,EAAUZ,IAAmD,kCAAAY,WAAaZ,OCxEzF,MAAMqB,EACC,YADDA,EAEC,YAFDA,EAGD,UAHCA,EAIE,aAJFA,EAKC,YALDA,EAMA,WANAA,EAOJ,QAPIA,EAQH,SARGA,EASG,cATHA,EAUE,aAVFA,EAWE,aAXFA,EAkBD,UAlBCA,EAmBH,QAnBGA,EAsBJ,QAtBIA,EAwBW,4BAxBXA,GAyBG,mBAzBHA,GA0BO,uBA1BPA,GA2BS,oBA3BTA,GA4BI,eA5BJA,GA6BS,oBA7BTA,GA8BC,OA9BDA,GA+BE,QA/BFA,GAgCQ,aAhCRA,GAiCU,eAjCVA,GAkCQ,aAlCRA,GAmCY,iBAnCZA,GAoCY,iBApCZA,GAqCK,gBArCLA,GAsCH,MAGGC,GAAS,MACTC,GAAY,SAGzB,IAAYC,IAAZ,SAAYA,GACVA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,OAAA,GAAA,SACAA,EAAAA,EAAA,MAAA,GAAA,OACD,CAJD,CAAYA,KAAAA,GAIX,CAAA,IAEM,MAAMC,GACL,OADKA,GAED,WAFCA,GAGL,GAGKC,GAAgB,CAAC,OAAQ,KAAM,QAAS,QACrD,IAAYC,IAAZ,SAAYA,GACVA,EAAAA,EAAA,KAAA,IAAA,OACAA,EAAAA,EAAA,GAAA,IAAA,KACAA,EAAAA,EAAA,MAAA,IAAA,QACAA,EAAAA,EAAA,KAAA,IAAA,MACD,CALD,CAAYA,KAAAA,GAKX,CAAA,IACM,MAEMC,GAAqB,CAChCC,KAAM,YACNC,GAAI,UACJC,MAAO,aACPC,KAAM,aAIKC,GAAqB,CAChC,oBACA,0BACA,0BACA,yBACA,uBACA,uBAGWC,GAAqB,CAChC,oBACA,0BACA,iCACA,uBACA,uBAGWC,GAAkB,CAC7B,iBACA,uBACA,yBACA,sBACA,oBAGWC,GAAoB,CAC/B,mBACA,yBACA,sBACA,sBChGWC,GAAgB,CAC3BC,UAAW,oBACXC,OAAQ,iBACRC,SAAU,mBACVC,MAAO,wBACPC,kBAAmB,mBACnBC,QAAS,kBACTC,gBAAiB,0BACjBC,eAAgB,yBAChBC,eAAgB,0BAkBLzB,GAAS,CACpB0B,MAAO,QACPC,WAAY,YACZC,KAAM,OACNC,kBAAmB,mBACnBC,OAAQ,SACRC,cAAe,eACfC,OAAQ,SACRC,YAAa,aACbC,UAAW,WACXC,YAAa,aACbC,aAAc,cACdC,SAAU,UACVC,OAAQ,SAOGC,GAAS,CACpBC,OAASC,GAAcA,EACvBC,UAAYD,GAAcE,KAAKC,IAAIH,EAAIE,KAAKE,GAAK,GACjDC,eAAiBL,GAAc,EAAIE,KAAKI,IAAI,EAAIN,EAAG,GACnDO,gBAAkBP,IAChB,MAAMQ,EAAK,OACLC,EAAK,KAEX,OAAIT,EAAI,EAAIS,EACHD,EAAKR,EAAIA,EACPA,EAAI,EAAIS,EACVD,GAAMR,GAAK,IAAMS,GAAMT,EAAI,IACzBA,EAAI,IAAMS,EACZD,GAAMR,GAAK,KAAOS,GAAMT,EAAI,MAE5BQ,GAAMR,GAAK,MAAQS,GAAMT,EAAI,OACrC,UCnEE,MAAMU,GAEI,eAGJC,GACE,aADFA,GAEH,SAFGA,GAGA,WAHAA,GAIH,SAJGA,GAKF,UALEA,GAMG,cAGHC,GAAaV,KAAKE,GAAK,IACvBS,GAAa,IAAMX,KAAKE,GACxBU,GAAiBhB,GAAOO,eACxBU,GAA6B,IAC7BC,GAAkC,CAC7CC,KAAMC,IAAUC,IAAKD,KAEVE,GAAuC,CAClDH,KAAM,GAAIE,IAAK,IAEJE,GAAsC,CACjDJ,IAAK,GAAKE,IAAK,IAGjB,IAAYG,IAAZ,SAAYA,GACVA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,OAAA,GAAA,SACAA,EAAAA,EAAA,OAAA,GAAA,QACD,CALD,CAAYA,KAAAA,GAKX,CAAA,IAGM,MAAMC,GAA0B,yBAC1BC,GAAgB,6BAChBC,GAAa,eACbC,GAAqB,QAErBC,GAA4B,QAAlBC,GAAAC,OAAOF,eAAW,IAAAC,GAAAA,GAAA,qBCrC5BE,GAAYhF,GAA2C,iBAARA,EAG/CiF,GAAgBA,CAACC,EAAmBC,EAAMC,MACrD,MAAMC,EAAKC,SAASL,cAAcE,GAIlC,OAFAE,EAAGE,UAAUC,IAAIN,GAEVG,CAAE,EAGEI,GAAqBA,CAACJ,EAAiCK,KAClE,IAAIC,EAA+B,KAEnC,GAAIX,GAASK,GAAK,CAChB,MACMO,GADWF,GAAkBJ,UACNO,cAAcR,GAE3C,IAAKO,EACH,OAAO,KAGTD,EAAWC,CACZ,MAtBuB5F,EAsBHqF,IAtByCrF,EAAI8F,WAAaC,KAAKC,eAuBlFL,EAAWN,GAvBWrF,MA0BxB,OAAO2F,CAAQ,EAmCJM,GAAQA,CAAC/C,EAAWiB,EAAaE,IAAgBjB,KAAKiB,IAAIjB,KAAKe,IAAIjB,EAAGmB,GAAMF,GAG5E+B,GAAOA,CAACC,EAAWC,EAAWC,IAClCF,GAAK,EAAIE,GAAKD,EAAIC,EAGdC,GAAYA,CAACtG,EAAamE,EAAaE,KAClD,MAAMkC,EAAOnD,KAAKoD,IAAInC,EAAMF,GAE5B,GAAInE,EAAMmE,EAAK,CAEbnE,EAAMqE,GADUF,EAAMnE,GAAOuG,CAE9B,MAAM,GAAIvG,EAAMqE,EAAK,CAEpBrE,EAAMmE,GADUnE,EAAMqE,GAAOkC,CAE9B,CAED,OAAOvG,CAAG,EAmBCyG,GAAYA,CAAIC,EAAYC,KACvC,IAAK,IAAIC,EAAM,EAAGA,EAAMF,EAAMG,OAAQD,IACpC,GAAID,EAAQD,EAAME,IAChB,OAAOA,EAIX,OAAQ,CAAC,EAGEE,GAAwD9G,GAAyC,iBAARA,EAAmBA,EAAM,CAAA,EAClH+G,GAAgBA,CAACC,EAAmBC,IACQ,EAAhD7D,KAAK8D,KAAK9D,KAAK+D,IAAgB,GAAZH,GAAmBC,GAGlCG,GAAcA,CAAIC,EAAUC,EAAeC,EAAe,WAC9DA,EAAaC,MAAM,IACvBtH,KAAIuH,GAAQH,EAAMI,QAAQD,KAC1BvH,KAAIyH,GAASN,EAAIM,KAGTC,GAAeA,KAC1B,IAAKtC,SAAU,OAAO,EAEtB,IAAK,MAAMuC,KAAOzC,GAChB,GAAIE,SAASuC,GAAM,OAAO,EAG5B,OAAO,CAAK,EAGDC,GAAwBA,MAC1BC,mBAAqB,sBAAuBA,mBAAqBC,OAAOC,gBAUtEC,GAAcA,CAACC,EAAWC,EAAaC,EAAeC,KACjEC,EAAcJ,GAEd,MACMK,EAAevC,GAAMoC,GAAO,MAAsB,OAMxD,OAJAE,EAAaJ,EAAKA,EAAKC,EAAMtE,IAC7ByE,EAAaJ,EAAKA,EAAKK,EAAe1E,IACtCyE,EAAaJ,EAAKA,EAAKG,EAAOxE,IAEvBqE,CAAG,EAOCM,GAAeC,IAC1B,MAAMxF,EAAIwF,EAAW,GACfC,EAAID,EAAW,GACfE,EAAIF,EAAW,GACfG,EAAIH,EAAW,GAMfI,EALK5F,EAAIA,EACJyF,EAAIA,EACJC,EAAIA,EACJC,EAAIA,EAGTE,EAAO7F,EAAI2F,EAAIF,EAAIC,EAEzB,IAAIP,EAAeD,EAEnB,GAAIW,EAAO,QAAWD,EAEpBT,EAAQjF,KAAKE,GAAK,EAClB8E,EAAM,EAAIhF,KAAK4F,MAAML,EAAGzF,QACnB,GAAI6F,GAAQ,QAAWD,EAE5BT,GAASjF,KAAKE,GAAK,EACnB8E,GAAO,EAAIhF,KAAK4F,MAAML,EAAGzF,OACpB,CACL,MAAM+F,EAAOC,EAAgB,EAAG,EAAG,GAC7BC,EAAKD,EAAgB,EAAG,EAAG,GAEjCA,EAAmBD,EAAMA,EAAMP,GAC/BQ,EAAmBC,EAAIA,EAAIT,GAE3B,MAAMU,EAAShG,KAAKiG,KAAKJ,EAAK,GAAKA,EAAK,GAAKA,EAAK,GAAKA,EAAK,IAE5DZ,EAAQjF,KAAK4F,OAAOC,EAAK,GAAIG,GAC7BhB,EAAMhF,KAAK4F,MAAMC,EAAK,GAAIA,EAAK,GAChC,CAED,MAAO,CACLZ,MAAOpC,GAAMoC,EAAQtE,IAAa,GAAI,IACtCqE,IAAK9B,GAAU8B,EAAMrE,GAAY,EAAG,KACrC,EClMH,MAAMuF,GAmBOtJ,UAAQ,OAAOd,KAAKqK,IAAM,CAM1BC,YAAU,OAAOtK,KAAKuK,MAAQ,CAM9BC,UAAQ,OAAOxK,KAAKyK,IAAM,CAM1BC,eAAa,OAAO1K,KAAK2K,SAAW,CAMpCC,gBAAc,OAAO5K,KAAK6K,UAAY,CAOtCC,eAAa,OAAO9K,KAAK+K,SAAW,CACpCD,aAAShK,GAAed,KAAK+K,UAAYjK,CAAK,CAO9CkK,WAAS,OAAOhL,KAAKiL,KAAO,CAC5BD,SAAKlK,GAAgBd,KAAKiL,MAAQnK,CAAK,CAOvCoK,YAAU,OAAOlL,KAAKmL,MAAQ,CAO9BC,aAAW,OAAOpL,KAAKqL,OAAS,CAChCD,WAAOtK,GAA8Bd,KAAKqL,QAAUvK,CAAK,CAWpEpB,aAAmBoL,SACjBA,EAAW/F,IAA0BiG,KACrCA,GAAO,EAAKE,MACZA,EAAQ,CAAEjG,IAAK,EAAGE,IAAK,GAAGiG,OAC1BA,EAAStG,IACP,IACF9E,KAAK+K,UAAYD,EACjB9K,KAAKiL,MAAQD,EACbhL,KAAKmL,OAASD,EACdlL,KAAKqL,QAAUD,EACfpL,KAAK6K,YAAa,EAClB7K,KAAKsL,MAAM,EACb,CASOC,OAAOC,GACZ,IAAKxL,KAAK6K,WAER,OADA7K,KAAKqK,KAAOrK,KAAKyK,KACV,EAGT,MAAMH,EAAQtK,KAAKuK,OACbC,EAAMxK,KAAKyK,KACXK,EAAW9K,KAAK+K,UAChBU,EAAOzL,KAAKqK,KACZW,EAAOhL,KAAKiL,MAEZS,EAAe1L,KAAK2K,UAAYa,EAAYV,EAElD9K,KAAK2K,UAAYK,EACb5D,GAAUsE,EAAc,EAAG,GAC3B3E,GAAM2E,EAAc,EAAG,GAE3B,MAAMC,EAAgB3L,KAAKqL,QAAQrL,KAAK2K,WAOxC,OANA3K,KAAKqK,KAAOrD,GAAKsD,EAAOE,EAAKmB,IAExBX,GAAQhL,KAAK2K,WAAa,IAC7B3K,KAAK6K,YAAa,GAGb7K,KAAKqK,KAAOoB,CACrB,CAQOH,MAAMM,GACX,MAAMV,EAAQlL,KAAKmL,OACbrK,EAAMiG,GAAM6E,EAAYV,EAAMjG,IAAKiG,EAAM/F,KAC/CnF,KAAKuK,OAASzJ,EACdd,KAAKyK,KAAO3J,EACZd,KAAKqK,KAAOvJ,EACZd,KAAK2K,UAAY,EACjB3K,KAAK6K,YAAa,CACpB,CAOOvE,IAAIuF,GACT,MAAMX,EAAQlL,KAAKmL,OAEnBnL,KAAKuK,OAASxD,GAAM/G,KAAKuK,OAASsB,EAAOX,EAAMjG,IAAKiG,EAAM/F,KAC1DnF,KAAKyK,KAAO1D,GAAM/G,KAAKyK,KAAOoB,EAAOX,EAAMjG,IAAKiG,EAAM/F,KACtDnF,KAAKqK,KAAOtD,GAAM/G,KAAKqK,KAAOwB,EAAOX,EAAMjG,IAAKiG,EAAM/F,IACxD,CAOO2G,iBAAiBD,GACtB,MAAMX,EAAQlL,KAAKmL,OAEnBnL,KAAKuK,OAASvK,KAAKqK,KACnBrK,KAAKyK,KAAO1D,GAAM/G,KAAKyK,KAAOoB,EAAOX,EAAMjG,IAAKiG,EAAM/F,KACtDnF,KAAK2K,UAAY,EACjB3K,KAAK6K,YAAa,CACpB,CAQOkB,SAAS9G,EAAaE,GAC3BnF,KAAKuK,OAASxD,GAAM/G,KAAKuK,OAAQtF,EAAKE,GACtCnF,KAAKyK,KAAO1D,GAAM/G,KAAKyK,KAAMxF,EAAKE,GAClCnF,KAAKmL,OAAS,CAAElG,MAAKE,MACvB,ECpLF,MAAM6G,GAgBOlB,eAAa,OAAO9K,KAAKiM,QAAQnB,QAAU,CAC3CA,aAAShK,GAAed,KAAKiM,QAAQnB,SAAWhK,CAAK,CAMrDsK,aAAW,OAAOpL,KAAKiM,QAAQb,MAAQ,CACvCA,WAAOtK,GAA8Bd,KAAKiM,QAAQb,OAAStK,CAAK,CAY3EpB,YAAmBwM,EAAgBC,EAAkBC,GAAgBtB,SACnEA,EAAW/F,IAA0BqG,OACrCA,EAAStG,IACP,IACF9E,KAAKqM,QAAUH,EACflM,KAAKiM,QAAU,IAAI7B,GAAO,CAAEU,WAAUM,SAAQF,MAAO,CAAEjG,IAAK,EAAGE,IAAK,KACpEnF,KAAKsM,MAAQH,EACbnM,KAAKuM,IAAMH,EACXpM,KAAKwM,eAAiB,IAAIC,SAAQC,IAChC1M,KAAK2M,QAAUD,CAAqB,IAItC1M,KAAKiM,QAAQH,iBAAiB,EAChC,CAOOc,mBACL,OAAO5M,KAAKwM,cACd,CAQOjB,OAAOC,GACZ,MAAMU,EAASlM,KAAKqM,QACdF,EAAOnM,KAAKsM,MACZF,EAAKpM,KAAKuM,IACVM,EAAS7M,KAAKiM,QACpBY,EAAOtB,OAAOC,GAGd,MAAMd,EAAWmC,EAAO/L,IAClBgM,EAAWzD,IACX0D,EAAO/F,GAAKmF,EAAKY,KAAMX,EAAGW,KAAMrC,GAEtCrB,EAAWyD,EAAUX,EAAKW,SAAUV,EAAGU,SAAUpC,GACjDwB,EAAOc,OAAOF,EAAUC,GAEpBrC,GAAY,GACd1K,KAAK2M,SAET,ECrBF,MAAMM,WAAeC,EAmGRnF,aAAW,OAAO/H,KAAKmN,OAAS,CAMhCC,cAAY,OAAOpN,KAAKqN,QAAU,CAIlCC,eAAa,OAAOtN,KAAKuN,gBAAkB,CAC3CD,aAASxM,GAClBd,KAAKuN,iBAAmBzM,CAC1B,CAIW0M,iBAAe,OAAOxN,KAAKyN,kBAAoB,CAC/CD,eAAW1M,GACpBd,KAAKyN,mBAAqB3M,CAC5B,CAIW4M,gBAAc,OAAO1N,KAAK2N,iBAAmB,CAC7CD,cAAU5M,GACnBd,KAAK2N,kBAAoB7M,CAC3B,CAMApB,aAAmBkO,WACjBA,EAAUC,aACVA,EAAYC,YACZA,EAAWR,SACXA,EAAQE,WACRA,EAAUE,UACVA,EAASK,IACTA,IAEAlO,QAEAG,KAAKkJ,IAAM0E,EACX5N,KAAKmJ,MAAQ0E,EACb7N,KAAK+M,KAAOe,EACZ9N,KAAKgO,WAAa,EAElBhO,KAAK4N,WAAaA,EAClB5N,KAAK6N,aAAeA,EACpB7N,KAAK8N,YAAcA,EAEnB9N,KAAKiO,SAAWjE,IAChBhK,KAAKkO,UAAY,KAEjBlO,KAAKmO,IAAMnE,EAAgB,EAAG,EAAG,GACjChK,KAAKmN,QAAU,EAEfnN,KAAKuN,iBAAmBD,EACxBtN,KAAKyN,mBAAqBD,EAC1BxN,KAAK2N,kBAAoBD,EAEzB1N,KAAKoO,UAAYd,EACjBtN,KAAKqO,YAAcb,EACnBxN,KAAKsO,WAAaZ,EAElB1N,KAAKwJ,WAAaH,IAClBrJ,KAAKuO,oBAELvO,KAAKwO,WAAaC,IAClBzO,KAAK0O,iBAAmBD,IACxBzO,KAAK+N,IAAMA,EAEX/N,KAAK2O,kBAAoB,CAC3B,CAOOC,UACL5O,KAAK6O,KACP,CASOC,OAAOC,EAAeC,GAC3B,MAAMC,EAAajP,KAAKmN,QAExBnN,KAAKmN,QAAU4B,EAAQC,EAEnBhP,KAAKmN,UAAY8B,GACnBjP,KAAKkP,cAET,CAWOC,QAAOjG,IACZA,EAAMlJ,KAAKkJ,IAAGC,MACdA,EAAQnJ,KAAKmJ,MAAK4D,KAClBA,EAAO/M,KAAK+M,OAMZ,MAAMqC,EAAiB/F,EAAWrJ,KAAKwJ,YACjC6F,EAAWrP,KAAK+M,KAEtB/M,KAAKkJ,IAAM9B,GAAU8B,EAAK,EAAG,KAC7BlJ,KAAKmJ,MAAQpC,GAAMoC,GAAQ,GAAI,IAC/BnJ,KAAK+M,KAAOA,EAEZ/M,KAAKuO,oBAEL,MAAMe,EAAWpL,KAAKoD,IAAIyF,EAAOsC,KAG9BhG,EAAYrJ,KAAKwJ,WAAY4F,IAC3BE,GAAsB,GAAV3J,KAEf3F,KAAKkP,cAET,CASOlC,OAAOF,EAAgBC,EAAe/M,KAAK+M,MAChD,MAAMwC,EAAalG,EAAeA,IAAeyD,GAC3C0C,EAAiBnG,EAAYrJ,KAAKwJ,WAAY+F,GACpDlG,EAAUrJ,KAAKwJ,WAAY+F,GAE3B,MAAMF,EAAWrP,KAAK+M,MAChB7D,IAAEA,EAAGC,MAAEA,GAAUI,GAAYgG,GAEnCvP,KAAKkJ,IAAMA,EACXlJ,KAAKmJ,MAAQA,EACbnJ,KAAK+M,KAAOA,EAEZ,MAAMuC,EAAWpL,KAAKoD,IAAIyF,EAAOsC,KAE5BG,GAAkBF,GAAsB,GAAV3J,KACjC3F,KAAKkP,cAET,CAYaO,WAAUvG,IACrBA,EAAMlJ,KAAKkJ,IAAGC,MACdA,EAAQnJ,KAAKmJ,MAAK4D,KAClBA,EAAO/M,KAAK+M,KAAIjC,SAChBA,EAAW,EAACM,OACZA,EAAStG,IAON,6CACH,GACE9E,KAAKkJ,MAAQA,GACVlJ,KAAKmJ,QAAUA,GACfnJ,KAAK+M,OAASA,EACjB,OAEF,MAAMZ,EAAO,CACXW,SAAUzD,EAAWrJ,KAAKwJ,YAC1BuD,KAAM/M,KAAK+M,MAEPX,EAAK,CACTU,SAAU9D,GAAYK,IAAeH,EAAKC,EAAOnJ,KAAKgO,YACtDjB,QAGImB,EAAY,IAAIlC,GAAgBhM,KAAMmM,EAAMC,EAAI,CACpDtB,WACAM,WAEIsE,EAAgBxB,EAAUtB,mBAQhC,OANA5M,KAAKkO,UAAYA,EACjBwB,EAAcC,MAAK,KACjB3P,KAAKkO,UAAY,KACjBlO,KAAK4P,QAAQlL,GAA6B,CAAEwJ,aAAY,IAGnDwB,CACT,GAAC,CAKMG,iBAAiB5K,EAAaE,GACnCnF,KAAKoO,UAAY,CAAEnJ,MAAKE,MAC1B,CAKO2K,mBAAmB7K,EAAaE,GACrCnF,KAAKqO,YAAc,CAAEpJ,MAAKE,MAC5B,CAKO4K,kBAAkB9K,EAAaE,GACpCnF,KAAKsO,WAAa,CAAErJ,MAAKE,MAC3B,CAKO6K,qBAAqBhB,GAC1BhP,KAAK2O,iBAAmBK,CAC1B,CAKOiB,aACLjQ,KAAKoO,UAAYpO,KAAKuN,iBACtBvN,KAAKqO,YAAcrO,KAAKyN,mBACxBzN,KAAKsO,WAAatO,KAAK2N,kBACvB3N,KAAK2O,kBAAoB,CAC3B,CAOOuB,YAAYnD,GACjB,MAAMoD,EAAWnQ,KAAKoO,UAChBgC,EAAkBpQ,KAAK2O,iBAC7B,IAAKwB,EAAU,OAAOnL,GAEtB,MAAMqL,EAAyC,GAA9BrQ,KAAKsQ,iBAAiBvD,GACvC,IAAIwD,EAASJ,EAASlL,IAClBuL,EAASL,EAAShL,IAEtB,GAAIiL,EAAkB,EAAG,CACvB,MAAMK,EAAc5I,GAAcwI,EAAWzL,GAAY5E,KAAKmN,SACxDuD,EAAsB,GAAlBN,EACJjJ,EAAIjD,KAAK+D,IAAIwI,GACbE,EAAIzM,KAAKiG,MAAM,EAAIuG,EAAIA,IAAM,EAAIvJ,EAAIA,IACrCyJ,EAAQ1M,KAAK8D,KAAK9D,KAAK+D,IAAIoI,EAAWzL,IAAc+L,GAAK9L,GAE/D0L,EAASJ,EAASlL,IAAM2L,EACxBJ,EAASL,EAAShL,IAAMyL,CACzB,CAOD,OALIL,EAASC,IACXD,EAAS,EACTC,EAAS,GAGJ,CACLvL,IAAKsL,EACLpL,IAAKqL,EAET,CAOOK,cAAc9D,GACnB,MAAM+D,EAAa9Q,KAAKqO,YAClB+B,EAAkBpQ,KAAK2O,iBAE7B,IAAKmC,EAAY,OAAO1L,GAExB,IAAI2L,EAAWD,EAAW7L,IACtB+L,EAAWF,EAAW3L,IAE1B,GAAIiL,EAAkB,EAAG,CACvB,MAAMa,EAAuC,GAA5BjR,KAAKkR,eAAenE,GAErCgE,EAAWD,EAAW7L,IAAMgM,EAC5BD,EAAWF,EAAW3L,IAAM8L,CAC7B,CAOD,OALIF,EAAWC,IACbD,EAAW,EACXC,EAAW,GAGN,CACL/L,IAAKf,KAAKiB,IAAI4L,GAAW,IACzB5L,IAAKjB,KAAKe,IAAI+L,EAAU,IAE5B,CAOOG,qBACL,MAAMC,EAAuB,QAAfxL,EAAA5F,KAAKsO,kBAAU,IAAA1I,EAAAA,EAAIP,GAG3BgM,EAASrR,KAAKsQ,iBAAiBc,EAAMjM,KACrCmM,EAAStR,KAAKsQ,iBAAiBc,EAAMnM,KACrCsM,EAAavR,KAAKsQ,iBAAiBtQ,KAAK+M,MAE9C,MAAO,CACL9H,IAAKf,KAAKiB,IAAIkM,EAAQ,GACtBlM,IAAKjB,KAAKe,IAAIqM,EAAQ,KACtBE,QAASD,EAEb,CAQOjB,iBAAiBvD,EAAO/M,KAAK+M,MAClC,OAAO/M,KAAKyR,wBAAwB1E,GAAQlI,EAC9C,CAQOqM,eAAenE,EAAO/M,KAAK+M,MAChC,MAAMhF,EAAS/H,KAAKmN,QACduE,EAAO1R,KAAKyR,wBAAwB1E,GAG1C,OAFalF,GAAc6J,EAAM3J,GAEnBlD,EAChB,CAQO8M,UAAU5D,GACf,MAAM6D,EAAU5R,KAAK+N,IAIrB,OAHuB7J,KAAK+D,IAAIrD,GAAagN,EAAU,IACnC1N,KAAK+D,IAAIrD,GAAamJ,EAAM,GAGlD,CAQOmB,eACL,MAAMjF,EAAKjK,KAAKmO,IACVpG,EAAS/H,KAAKmN,QACdqB,EAAaxO,KAAKwO,WAClBqD,EAAa7R,KAAK0O,iBAClBT,EAAWjO,KAAKiO,SAChBnB,EAAW9M,KAAKwJ,WAEhBsI,EAAQ9H,IACR+H,EAAU/H,EAAgB,EAAG,GAAI,GACvCA,EAAmB+H,EAASA,EAASjF,GACrC9C,EAAmB8H,EAAO7H,EAAI6C,GAE9B,MAAM4E,EAAO1R,KAAKyR,0BACZO,EAAOnK,GAAc6J,EAAM3J,uqBAEjC0G,CAAYD,EAAYP,EAAU8D,EAASD,GAC3CrD,EAAiBoD,EAAYG,EAAMjK,EAAQ,GAAK,KAEhD/H,KAAKqN,UAAW,CAClB,CAKO4E,gBACLjS,KAAKqN,UAAW,CAClB,CAEQkB,oBACNvF,GAAYhJ,KAAKwJ,WAAYxJ,KAAKkJ,IAAKlJ,KAAKmJ,MAAOnJ,KAAKgO,WAC1D,CAMQyD,wBAAwB1E,EAAO/M,KAAK+M,MAC1C,OAAO,EAAI7I,KAAK8D,KAAK9D,KAAK+D,IAAIrD,GAAa5E,KAAK+N,IAAM,IAAOhB,EAC/D,EC3lBF,MAAMmF,WAAmBhF,EAIvBxN,cACEG,QAyBMG,KAAAmS,aAAgBC,IACtB,MAAMjM,EAAKnG,KAAKqS,IACXlM,GAAMiM,EAAIE,SAAWpM,GAAqBnE,OAE/CqQ,EAAIG,iBAEApM,EAAGqM,MACLrM,EAAGqM,QAEH1J,OAAO0J,QAGTxS,KAAKyS,SAAS,GAAKL,EAAIM,QACvB1S,KAAKyS,SAAS,GAAKL,EAAIO,QAEvB7J,OAAO8J,iBAAiB1M,EAA2BlG,KAAK6S,cAAc,GACtE/J,OAAO8J,iBAAiB1M,EAAyBlG,KAAK8S,YAAY,GAElE9S,KAAK4P,QAAQjL,GAA4B,CACvCoO,SAAUX,EACVY,SAAS,EACTC,YAAY,IACZ,EAGIjT,KAAA6S,aAAgBT,IACtBA,EAAIG,iBAEJ,MAAMvO,EAAIoO,EAAIM,QACRjJ,EAAI2I,EAAIO,QACRO,EAAUlT,KAAKyS,SACfU,EAASnP,EAAIkP,EAAQ,GACrBE,EAAS3J,EAAIyJ,EAAQ,GAE3BlT,KAAK4P,QAAQjL,GAAuB,CAClCkH,MAAO,CACL7H,EAAGmP,EACH1J,EAAG2J,GAELJ,SAAS,EACTC,YAAY,IAGdC,EAAQ,GAAKlP,EACbkP,EAAQ,GAAKzJ,CAAC,EAGRzJ,KAAU8S,WAAG,KACnB9S,KAAKyS,SAAS,GAAK,EACnBzS,KAAKyS,SAAS,GAAK,EAEnB3J,OAAOuK,oBAAoBnN,EAA2BlG,KAAK6S,cAAc,GACzE/J,OAAOuK,oBAAoBnN,EAAyBlG,KAAK8S,YAAY,GAErE9S,KAAK4P,QAAQjL,GAA0B,CACrCqO,SAAS,EACTC,YAAY,EACZK,WAAW,GACX,EAjFFtT,KAAKqS,IAAM,KACXrS,KAAKyS,SAAW,CAAC,EAAG,EACtB,CAEOc,OAAOC,GACRxT,KAAKqS,MAETmB,EAAQZ,iBAAiB1M,EAA2BlG,KAAKmS,cAEzDnS,KAAKqS,IAAMmB,EACb,CAEOC,UACL,MAAMD,EAAUxT,KAAKqS,IAChBmB,IAELA,EAAQH,oBAAoBnN,EAA2BlG,KAAKmS,cAC5DrJ,OAAOuK,oBAAoBnN,EAA2BlG,KAAK6S,cAAc,GACzE/J,OAAOuK,oBAAoBnN,EAAyBlG,KAAK8S,YAAY,GAErE9S,KAAKqS,IAAM,KACb,EC3BF,MAAMqB,WAAmBxG,EAOZyG,iBAAe,OAAO3T,KAAK4T,WAAa,CACxCD,eAAW7S,GAAgBd,KAAK4T,YAAc9S,CAAK,CAE9DpB,cACEG,QA8BMG,KAAA6T,cAAiBzB,IACvB,GAAIA,EAAI0B,QAAQnM,OAAS,GAAK3H,KAAK+T,WAAY,OAE/C,MAAMC,EAAQ5B,EAAI0B,QAAQ,GAE1B9T,KAAKiU,eAAgB,EACrBjU,KAAKyS,SAAS,GAAKuB,EAAMtB,QACzB1S,KAAKyS,SAAS,GAAKuB,EAAMrB,QAEzB3S,KAAK4P,QAAQjL,GAA4B,CACvCoO,SAAUX,EACVY,SAAS,EACTC,YAAY,GACZ,EAGIjT,KAAAkU,aAAgB9B,IAEtB,GAAIA,EAAI0B,QAAQnM,OAAS,GAAK3H,KAAK+T,WAAY,OAE/C,MAAMC,EAAQ5B,EAAI0B,QAAQ,GACpBH,EAAa3T,KAAK4T,YAClBV,EAAUlT,KAAKyS,SAEfzO,EAAIgQ,EAAMtB,QACVjJ,EAAIuK,EAAMrB,QACVQ,EAASnP,EAAIkP,EAAQ,GACrBE,EAAS3J,EAAIyJ,EAAQ,GAE3B,GAAIlT,KAAKiU,cAAe,CACtB,GAAIN,IAAejL,MACbxE,KAAKoD,IAAI8L,GAAUlP,KAAKoD,IAAI6L,GAG9B,YADAnT,KAAK+T,YAAa,GAKtB/T,KAAKiU,eAAgB,CACtB,EAEsB,IAAnB7B,EAAI+B,YACN/B,EAAIG,iBAGNvS,KAAK4P,QAAQjL,GAAuB,CAClCkH,MAAO,CACL7H,EAAGmP,EACH1J,EAAG2J,GAELJ,SAAS,EACTC,YAAY,IAGdC,EAAQ,GAAKlP,EACbkP,EAAQ,GAAKzJ,CAAC,EAGRzJ,KAAAoU,YAAehC,IACrB,GAA2B,IAAvBA,EAAI0B,QAAQnM,OAAc,OAE9B,MAAMqM,EAAQ5B,EAAI0B,QAAQ,GACpBZ,EAAUlT,KAAKyS,SAEjBuB,GACFd,EAAQ,GAAKc,EAAMtB,QACnBQ,EAAQ,GAAKc,EAAMrB,UAEnBO,EAAQ,GAAK,EACbA,EAAQ,GAAK,EAEblT,KAAK4P,QAAQjL,GAA0B,CACrCqO,SAAS,EACTC,YAAY,EACZK,UAAWtT,KAAK+T,eAIG,IAAnB3B,EAAI+B,YACN/B,EAAIG,iBAGNvS,KAAK+T,YAAa,CAAK,EA9GvB/T,KAAKqS,IAAM,KACXrS,KAAKyS,SAAW,CAAC,EAAG,GACpBzS,KAAKiU,eAAgB,EACrBjU,KAAK+T,YAAa,EAClB/T,KAAK4T,aAAc,CACrB,CAEOL,OAAOC,GACRxT,KAAKqS,MAETmB,EAAQZ,iBAAiB1M,EAA4BlG,KAAK6T,cAAe,CAAEQ,SAAS,IACpFb,EAAQZ,iBAAiB1M,EAA2BlG,KAAKkU,aAAc,CAAEG,SAAS,IAClFb,EAAQZ,iBAAiB1M,EAA0BlG,KAAKoU,aAExDpU,KAAKqS,IAAMmB,EACb,CAEOC,UACL,MAAMD,EAAUxT,KAAKqS,IAChBmB,IAELA,EAAQH,oBAAoBnN,EAA4BlG,KAAK6T,eAC7DL,EAAQH,oBAAoBnN,EAA2BlG,KAAKkU,cAC5DV,EAAQH,oBAAoBnN,EAA0BlG,KAAKoU,aAE3DpU,KAAKqS,IAAM,KACb,ECxCF,MAAMiC,WAAsBpH,EASfqH,aACT,MAAMC,EAAUxU,KAAKyU,SACrB,OAAOD,EAAQzS,MAAQyS,EAAQxS,IAAMwS,EAAQvS,OAASuS,EAAQtS,IAChE,CAEAxC,cACEG,QAyFMG,KAAA0U,WAActC,IAEpB,GAAIA,EAAIuC,WAAaC,cAAcC,0BAA2B,OAE9D7U,KAAK8U,gBAAgB1C,GAAK,GAE1B,MAAM2C,EAAe/U,KAAKgV,sBACtBD,GAAgB,IAEpB3C,EAAIG,iBACiB,IAAjBwC,GAAuB3C,EAAI6C,QAE7BjV,KAAK4P,QAAQjL,GAA4B,CACvCoO,SAAUX,EACVY,SAAS,EACTC,YAAY,IAEf,EAGKjT,KAAAkV,SAAY9C,IAElB,GAAIA,EAAIuC,WAAaC,cAAcC,0BAA2B,OAE9D7U,KAAK8U,gBAAgB1C,GAAK,GAELpS,KAAKgV,sBACP,GAEnBhV,KAAK4P,QAAQjL,GAA0B,CACrCqO,SAAS,EACTC,YAAY,EACZK,WAAW,GACX,EAxHFtT,KAAKqS,IAAM,KACXrS,KAAKmV,mBACP,CAEO5B,OAAOC,GACRxT,KAAKqS,MAETmB,EAAQZ,iBAAiB1M,EAAyBlG,KAAK0U,YACvDlB,EAAQZ,iBAAiB1M,EAAuBlG,KAAKkV,UAErDlV,KAAKqS,IAAMmB,EACXxT,KAAKmV,oBACP,CAEO1B,UACL,MAAMD,EAAUxT,KAAKqS,IAChBmB,IAELA,EAAQH,oBAAoBnN,EAAyBlG,KAAK0U,YAC1DlB,EAAQH,oBAAoBnN,EAAuBlG,KAAKkV,UAExDlV,KAAKqS,IAAM,KACXrS,KAAKmV,oBACP,CAEO5J,SACL,MAAMM,EAAQ7L,KAAKoV,yBAEH,IAAZvJ,EAAM7H,GAAuB,IAAZ6H,EAAMpC,GACzBzJ,KAAK4P,QAAQjL,GAAuB,CAClCkH,QACAmH,SAAS,EACTC,YAAY,GAGlB,CAEQkC,oBACNnV,KAAKyU,SAAWvO,GAAsBmP,QAAO,CAACC,EAAKC,IACjDzV,OAAA0V,OAAA1V,OAAA0V,OAAA,CAAA,EACKF,GACH,CAAAC,CAACA,IAAU,KAEZ,CAA+B,EACpC,CAEQT,gBAAgBW,EAAsBC,GAC5C,MAAMlB,EAAUxU,KAAKyU,SACfkB,EAA+B,MAAjBF,EAAMG,QACtB1P,GAA2BuP,EAAMG,SACjC1P,GAA2BuP,EAAM9M,KAEhCgN,IAELnB,EAAQmB,GAAeD,EACzB,CAEQV,sBACN,OAAO9O,GAAsB2P,QAAOlN,GAAO3I,KAAKyU,SAAS9L,KAAMhB,MACjE,CAEQyN,yBACN,MAAMZ,EAAUxU,KAAKyU,SACrB,IAAIzQ,EAAI,EACJyF,EAAI,EAkBR,OAhBI+K,EAAQzS,OACViC,GAAK,GAGHwQ,EAAQvS,QACV+B,GAAK,GAGHwQ,EAAQxS,KACVyH,GAAK,GAGH+K,EAAQtS,OACVuH,GAAK,GAGA,CACLzF,IAAGyF,IAEP,ECpDF,MAAMqM,WAAsB5I,EA0Bf6I,cAAY,OAAO/V,KAAKgW,QAAU,CAIlCC,oBAAkB,OAAOjW,KAAKkW,cAAgB,CAI9CC,gBACT,OAAOnW,KAAKoW,eAAe7B,QACtBvU,KAAKqW,SAASzL,WACd5K,KAAKsW,SAAS1L,SACrB,CAOW1B,UAAQ,OAAOlJ,KAAKqW,QAAU,CAO9BlN,YAAU,OAAOnJ,KAAKsW,QAAU,CAIhC3C,iBAAe,OAAO3T,KAAKuW,YAAY5C,UAAY,CACnDA,eAAW7S,GACpBd,KAAKuW,YAAY5C,WAAa7S,CAChC,CAQW0V,mBAAiB,OAAOxW,KAAKyW,aAAe,CAC5CD,iBAAa1V,GACtBd,KAAKyW,cAAgB3V,CACvB,CAQW4V,oBAAkB,OAAO1W,KAAK2W,cAAgB,CAC9CD,kBAAc5V,GACvBd,KAAK2W,eAAiB7V,CACxB,CAOWgK,eAAa,OAAO9K,KAAK+K,SAAW,CACpCD,aAAShK,GAClBd,KAAK+K,UAAYjK,EACjBd,KAAKqW,SAASvL,SAAWhK,EACzBd,KAAKsW,SAASxL,SAAWhK,CAC3B,CAQWsK,aAAW,OAAOpL,KAAKqL,OAAS,CAChCD,WAAOtK,GAChBd,KAAKqL,QAAUvK,EACfd,KAAKqW,SAASjL,OAAStK,EACvBd,KAAKsW,SAASlL,OAAStK,CACzB,CAOW8V,mBAAiB,OAAO5W,KAAK6W,aAAe,CAC5CD,iBAAa9V,GAA6Cd,KAAK6W,cAAgB/V,CAAK,CAOpFgW,iBAAe,OAAO9W,KAAK+W,WAAa,CACxCD,eAAWhW,GAA2Cd,KAAK+W,YAAcjW,CAAK,CAO9EkW,sBAAoB,OAAOhX,KAAKiX,gBAAkB,CAClDD,oBAAgBlW,GAAgDd,KAAKiX,iBAAmBnW,CAAK,CASxGpB,YAAmBwX,EAAwBjB,GAAwBnL,SACjEA,EAAW/F,IAA0BqG,OACrCA,EAAStG,GAAc0R,aACvBA,EAAe,CAAC,EAAG,GAAEE,cACrBA,EAAgB,CAAC,EAAG,GAAEE,aACtBA,GAAe,EAAKE,WACpBA,GAAa,EAAKE,gBAClBA,GAAkB,GACe,IACjCnX,QA6IMG,KAAAmX,cAAiB/E,IACvBpS,KAAKoX,uBAAwB,EAC7BpX,KAAK4P,QAAQjL,GACR7E,OAAA0V,OAAA1V,OAAA0V,OAAA,GAAApD,GACH,CAAAiF,UAAW,WACX,EAGIrX,KAAAsX,UAAalF,IACnB,MAAMvG,EAAQuG,EAAIvG,MACZ0L,EAAe,EAAIvX,KAAKwX,WACxBC,EAAczX,KAAK0X,aACnBhB,EAAgB1W,KAAK2W,eACrBH,EAAexW,KAAKyW,cAE1B,IAAIkB,EAGFA,EADEvF,EAAIa,WACE,CACNyD,EAAc,GAAKa,EACnBb,EAAc,GAAKa,GAGb,CACNf,EAAa,GAAKiB,EAAY,GAAKF,EACnCf,EAAa,GAAKiB,EAAY,GAAKF,GAIvC,MAAMK,EAAU/L,EAAM7H,EAAI2T,EAAM,GAC1BE,EAAUhM,EAAMpC,EAAIkO,EAAM,GAEhC3X,KAAKqW,SAASvK,iBAAiB8L,GAC/B5X,KAAKsW,SAASxK,iBAAiB+L,GAE/B7X,KAAKoX,uBAAwB,CAAI,EAG3BpX,KAAA8X,YAAe1F,IACrBpS,KAAK4P,QAAQjL,GACR7E,OAAA0V,OAAA1V,OAAA0V,OAAA,GAAApD,GACH,CAAAiF,UAAW,YAGRrX,KAAKoX,uBAA0BhF,EAAIa,YAAeb,EAAIkB,WACzDtT,KAAK4P,QAAQjL,GAA6B,CACxCqO,QAASZ,EAAIY,UAIjBhT,KAAKoX,uBAAwB,CAAK,EA7LlCpX,KAAK+X,WAAab,EAClBlX,KAAKyW,cAAgBD,EACrBxW,KAAK2W,eAAiBD,EACtB1W,KAAK+K,UAAYD,EACjB9K,KAAKqL,QAAUD,EACfpL,KAAK6W,cAAgBD,EACrB5W,KAAK+W,YAAcD,EACnB9W,KAAKiX,iBAAmBD,EAExBhX,KAAKkW,eAAiBD,EACtBjW,KAAKgY,YAAc,IAAI9F,GACvBlS,KAAKuW,YAAc,IAAI7C,GACvB1T,KAAKoW,eAAiB,IAAI9B,GAC1BtU,KAAKqW,SAAW,IAAIjM,GAAO,CAAEU,WAAUI,MAAOlG,GAAgBoG,WAC9DpL,KAAKsW,SAAW,IAAIlM,GAAO,CAAEU,WAAUI,MAAO9F,GAAqBgG,WACnEpL,KAAK0X,aAAe,CAAC,EAAG,GACxB1X,KAAKwX,WAAa,EAClBxX,KAAKgW,UAAW,EAChBhW,KAAKoX,uBAAwB,EAC7BpX,KAAKiY,aACP,CAEOrJ,UACL5O,KAAKyT,UACLzT,KAAKgY,YAAYnJ,MACjB7O,KAAKuW,YAAY1H,MACjB7O,KAAKoW,eAAevH,MACpB7O,KAAK6O,MACL7O,KAAKoX,uBAAwB,CAC/B,CAKO7L,OAAOM,GACZ,IAAK7L,KAAKgW,SAAU,OAEpB,MAAMkC,EAAUlY,KAAKqW,SACf8B,EAAUnY,KAAKsW,SACf8B,EAAgBpY,KAAKoW,eAEtBpW,KAAKiX,kBACRmB,EAAc7M,SAGXvL,KAAK6W,eACRsB,EAAQ5M,OAAOM,GAGZ7L,KAAK+W,aACRmB,EAAQ3M,OAAOM,EAEnB,CAKOwM,YAAYnM,EAAgBa,GACjC,MAAMO,EAAWpB,EAAOgE,YAAYnD,GAC9BS,EAAatB,EAAO2E,cAAc9D,GAExC/M,KAAKqW,SAAStK,SAASuB,EAASrI,IAAKqI,EAASnI,KAC9CnF,KAAKsW,SAASvK,SAASyB,EAAWvI,IAAKuI,EAAWrI,IACpD,CAKOmT,aAAaxX,GAClBd,KAAKwX,WAAa1W,CACpB,CAUOgO,OAAOyJ,EAAcxQ,EAAgBgH,EAAeC,GACzD,MAAMwJ,EAAO3Q,GAAc0Q,EAAO3T,GAAYmD,GAAUlD,GAExD7E,KAAK0X,aAAa,GAAKa,EAAOxJ,EAC9B/O,KAAK0X,aAAa,GAAKc,EAAOxJ,CAChC,CAEOuE,SACL,GAAIvT,KAAKgW,SAAU,OAEnB,MAAMxC,EAAUxT,KAAK+X,WAErB/X,KAAKgY,YAAYzE,OAAOC,GACxBxT,KAAKuW,YAAYhD,OAAOC,GACxBxT,KAAKoW,eAAe7C,OAAOC,GAE3BxT,KAAKgW,UAAW,EAChBhW,KAAKkW,gBAAiB,EAEtBlW,KAAK4P,QAAQjL,GAAuB,CAAE8T,QAASzY,KAAM0Y,cAAc,GACrE,CAEOjF,UACAzT,KAAKgW,WAEVhW,KAAKgY,YAAYvE,UACjBzT,KAAKuW,YAAY9C,UACjBzT,KAAKoW,eAAe3C,UAEpBzT,KAAKgW,UAAW,EAEhBhW,KAAK4P,QAAQjL,GAAwB,CAAE+T,cAAc,IACvD,CAEOC,KAAKzM,GACVlM,KAAKqY,YAAYnM,EAAQA,EAAOa,MAEhC/M,KAAKqW,SAAS/K,MAAMY,EAAOhD,KAC3BlJ,KAAKsW,SAAShL,MAAMY,EAAO/C,MAC7B,CAEQ8O,cACN,MAAMW,EAAa5Y,KAAKgY,YAClBa,EAAa7Y,KAAKuW,YAClB6B,EAAgBpY,KAAKoW,eAE3BwC,EAAWE,GAAGnU,GAA4B3E,KAAKmX,eAC/CyB,EAAWE,GAAGnU,GAAuB3E,KAAKsX,WAC1CsB,EAAWE,GAAGnU,GAA0B3E,KAAK8X,aAE7Ce,EAAWC,GAAGnU,GAA4B3E,KAAKmX,eAC/C0B,EAAWC,GAAGnU,GAAuB3E,KAAKsX,WAC1CuB,EAAWC,GAAGnU,GAA0B3E,KAAK8X,aAE7CM,EAAcU,GAAGnU,GAA4B3E,KAAKmX,eAClDiB,EAAcU,GAAGnU,GAAuB3E,KAAKsX,WAC7Cc,EAAcU,GAAGnU,GAA0B3E,KAAK8X,YAClD,ECjVF,MAAMiB,WAAmB7L,EAMZyG,iBAAe,OAAO3T,KAAK4T,WAAa,CACxCD,eAAW7S,GAAgBd,KAAK4T,YAAc9S,CAAK,CAE9DpB,cACEG,QA2BMG,KAAAgZ,SAAY5G,IAClB,MAAMuB,EAAa3T,KAAK4T,YAExB,GAAmB,IAAfxB,EAAIgB,QAAgBO,EAAY,OAEpCvB,EAAIG,iBACJH,EAAI6G,kBAEAjZ,KAAKkZ,YAAc,EACrBlZ,KAAK4P,QAAQjL,GAA4B,CACvCoO,SAAUX,EACVY,SAAS,EACTC,YAAY,IAGdjT,KAAKmZ,cAGP,MAAMtN,EAAQ7L,KAAKoZ,WAAahH,EAAIgB,OAEpCpT,KAAK4P,QAAQjL,GAAuB,CAClCkH,QACAmH,SAAS,EACTC,YAAY,IAGdjT,KAAKkZ,YAAcpQ,OAAOuQ,YAAW,KACnCrZ,KAAK4P,QAAQjL,GAA0B,CACrCqO,SAAS,EACTC,YAAY,EACZK,WAAW,IAEbtT,KAAKkZ,aAAe,CAAC,GACpBnU,GAA2B,EA1D9B/E,KAAKqS,IAAM,KACXrS,KAAKoZ,WAAa,IAClBpZ,KAAK4T,aAAc,EACnB5T,KAAKkZ,aAAe,CACtB,CAEO3F,OAAOC,GACRxT,KAAKqS,MAETmB,EAAQZ,iBAAiB1M,EAAsBlG,KAAKgZ,SAAU,CAAE3E,SAAS,EAAOiF,SAAS,IAEzFtZ,KAAKqS,IAAMmB,EACXxT,KAAKmZ,cACP,CAEO1F,UACL,MAAMD,EAAUxT,KAAKqS,IAChBmB,IAELA,EAAQH,oBAAoBnN,EAAsBlG,KAAKgZ,UAAU,GAEjEhZ,KAAKqS,IAAM,KACXrS,KAAKmZ,cACP,CAsCQA,cACNrQ,OAAOyQ,aAAavZ,KAAKkZ,aACzBlZ,KAAKkZ,aAAe,CACtB,EC5EF,MAAMM,WAAmBtM,EAMvBxN,cACEG,QA6BMG,KAAAkU,aAAgB9B,IACtB,MAAM0B,EAAU1B,EAAI0B,QACpB,GAAuB,IAAnBA,EAAQnM,OAAc,OAE1B,IAAKyK,EAAI+B,WAAY,OAErB/B,EAAIG,iBACJH,EAAI6G,kBAEJ,MAAMQ,EAAezZ,KAAK0Z,cAEpBC,EAAO,CACX7F,EAAQ,GAAG8F,MAAQ9F,EAAQ,GAAG8F,MAC9B9F,EAAQ,GAAG+F,MAAQ/F,EAAQ,GAAG+F,OAG1BC,EAAW5V,KAAKiG,KAAKwP,EAAK,GAAKA,EAAK,GAAKA,EAAK,GAAKA,EAAK,IAAM3Z,KAAKoZ,WACnEvN,EAAQ7L,KAAKiU,cACf,EACA6F,EAAWL,EAEXzZ,KAAKiU,eACPjU,KAAK4P,QAAQjL,GAA4B,CACvCoO,SAAUX,EACVY,SAAS,EACTC,YAAY,IAIhBjT,KAAK0Z,cAAgBI,EACrB9Z,KAAKiU,eAAgB,EAErBjU,KAAK4P,QAAQjL,GAAuB,CAClCkH,QACAmH,SAAS,EACTC,YAAY,GACZ,EAGIjT,KAAAoU,YAAehC,IACM,IAAvBA,EAAI0B,QAAQnM,SAEX3H,KAAKiU,eACRjU,KAAK4P,QAAQjL,GAA0B,CACrCqO,SAAS,EACTC,YAAY,EACZK,WAAW,IAIftT,KAAK0Z,eAAiB,EACtB1Z,KAAKiU,eAAgB,EAAI,EA9EzBjU,KAAKqS,IAAM,KACXrS,KAAKoZ,YAAc,GACnBpZ,KAAK0Z,eAAiB,EACtB1Z,KAAKiU,eAAgB,CACvB,CAEOV,OAAOC,GACRxT,KAAKqS,MAETmB,EAAQZ,iBAAiB1M,EAA2BlG,KAAKkU,aAAc,CAAEG,SAAS,EAAOiF,SAAS,IAClG9F,EAAQZ,iBAAiB1M,EAA0BlG,KAAKoU,aAExDpU,KAAKqS,IAAMmB,EACXxT,KAAK0Z,eAAiB,EACtB1Z,KAAKiU,eAAgB,EACvB,CAEOR,UACL,MAAMD,EAAUxT,KAAKqS,IAChBmB,IAELA,EAAQH,oBAAoBnN,EAA2BlG,KAAKkU,cAAc,GAC1EV,EAAQH,oBAAoBnN,EAA0BlG,KAAKoU,aAE3DpU,KAAKqS,IAAM,KACb,ECEF,MAAM0H,WAAoB7M,EAeb6I,cAAY,OAAO/V,KAAKgW,QAAU,CAIlCC,oBAAkB,OAAOjW,KAAKkW,cAAgB,CAI9CC,gBAAc,OAAOnW,KAAKiM,QAAQrB,SAAW,CAO7CmC,WAAS,OAAO/M,KAAKiM,QAAQnL,GAAK,CAIlC6S,iBAAe,OAAO3T,KAAKga,YAAYrG,UAAY,CACnDA,eAAW7S,GACpBd,KAAKga,YAAYrG,WAAa7S,CAChC,CAIWoK,YAAU,OAAOlL,KAAKiM,QAAQf,KAAO,CAQrCyM,YAAU,OAAO3X,KAAKia,MAAQ,CAC9BtC,UAAM7W,GAAoCd,KAAKia,OAASnZ,CAAK,CAQ7DgK,eAAa,OAAO9K,KAAKiM,QAAQnB,QAAU,CAS3CM,aAAW,OAAOpL,KAAKiM,QAAQb,MAAQ,CASlD1L,YAAmBwX,EAAwBjB,GAAwB0B,MACjEA,EAAQ,EAAC7M,SACTA,EAAW/F,IAA0BqG,OACrCA,EAAStG,IACsB,IAC/BjF,QAgFMG,KAAAmX,cAAiB/E,IACvBpS,KAAK4P,QAAQjL,GACR7E,OAAA0V,OAAA1V,OAAA0V,OAAA,GAAApD,GACH,CAAAiF,UAAW,SACX,EAGIrX,KAAAsX,UAAY,EAAGzL,YACrB,MACMqO,EAAcrO,EADN7L,KAAKia,OAGnBja,KAAKiM,QAAQH,iBAAiBoO,EAAY,EAGpCla,KAAA8X,YAAe1F,IACrBpS,KAAK4P,QAAQjL,GACR7E,OAAA0V,OAAA1V,OAAA0V,OAAA,GAAApD,GACH,CAAAiF,UAAW,SACX,EAhGFrX,KAAKia,OAAStC,EAEd3X,KAAK+X,WAAab,EAClBlX,KAAKkW,eAAiBD,EACtBjW,KAAKga,YAAc,IAAIjB,GACvB/Y,KAAKma,YAAc,IAAIX,GACvBxZ,KAAKiM,QAAU,IAAI7B,GAAO,CACxBU,WACAM,SACAF,MAAOlG,KAEThF,KAAKgW,UAAW,EAEhBhW,KAAKiY,aACP,CAEOrJ,UACL5O,KAAKyT,UACLzT,KAAKga,YAAYnL,MACjB7O,KAAKma,YAAYtL,MACjB7O,KAAK6O,KACP,CAKOtD,OAAOM,GACZ,IAAK7L,KAAKgW,SAAU,OAELhW,KAAKiM,QACbV,OAAOM,EAChB,CAEO0H,SACL,GAAIvT,KAAKgW,SAAU,OAEnB,MAAMxC,EAAUxT,KAAK+X,WACrB/X,KAAKga,YAAYzG,OAAOC,GACxBxT,KAAKma,YAAY5G,OAAOC,GAExBxT,KAAKgW,UAAW,EAChBhW,KAAKkW,gBAAiB,EAEtBlW,KAAK4P,QAAQjL,GAAuB,CAAE8T,QAASzY,KAAM0Y,cAAc,GACrE,CAEOjF,UACAzT,KAAKgW,WAEVhW,KAAKga,YAAYvG,UACjBzT,KAAKma,YAAY1G,UAEjBzT,KAAKgW,UAAW,EAEhBhW,KAAK4P,QAAQjL,GAAwB,CAAE+T,cAAc,IACvD,CAEOC,KAAKzM,GACV,MAAMW,EAAS7M,KAAKiM,QACdf,EAAQgB,EAAOiF,eAErBtE,EAAOd,SAASb,EAAMjG,IAAKiG,EAAM/F,KACjC0H,EAAOvB,MAAMJ,EAAMsG,QACrB,CAEQyG,cACN,MAAMmC,EAAapa,KAAKga,YAClBK,EAAara,KAAKma,YAExBC,EAAWtB,GAAGnU,GAA4B3E,KAAKmX,eAC/CiD,EAAWtB,GAAGnU,GAAuB3E,KAAKsX,WAC1C8C,EAAWtB,GAAGnU,GAA0B3E,KAAK8X,aAE7CuC,EAAWvB,GAAGnU,GAA4B3E,KAAKmX,eAC/CkD,EAAWvB,GAAGnU,GAAuB3E,KAAKsX,WAC1C+C,EAAWvB,GAAGnU,GAA0B3E,KAAK8X,YAC/C,ECjMK,MAAMwC,GAAkB,CAC7BC,YAAa,EACbC,kBAAmB,EACnBC,iBAAkB,GAGpBH,GAAgBA,GAAgBC,aAAe,CAC7CG,WAAY,CAAC,EAAG,EAAG,GACnBC,UAAW,CAAC,EAAG,EAAG,IAEpBL,GAAgBA,GAAgBE,mBAAqB,CACnDE,WAAY,CAAC,EAAG,EAAG,GACnBC,UAAW,CAAC,EAAG,EAAG,IAEpBL,GAAgBA,GAAgBG,kBAAoB,CAClDC,WAAY,CAAC,EAAG,EAAG,GACnBC,UAAW,CAAC,EAAG,EAAG,IAGpB,MAAMC,WAAkB1N,EAiBX6I,cAAY,OAAO/V,KAAKgW,QAAU,CAClC6E,yBAAuB,OAAO7a,KAAK8a,mBAAqB,CACxDC,iBAAe,OAAO/a,KAAKgb,WAAa,CACxCD,eAAWja,GAAgBd,KAAKgb,YAAcla,CAAK,CAE9DpB,cACEG,QA+DMG,KAAAib,qBAAwB7I,IAC9B,MAAM8I,EAAkBlb,KAAKmb,cACvBC,MAAEA,EAAKC,KAAEA,EAAIC,MAAEA,GAAUlJ,EAGpB,MAATgJ,GACW,MAARC,GACS,MAATC,IAGLJ,EAAgBE,MAAQA,EACxBF,EAAgBG,KAAOA,EACvBH,EAAgBI,MAAQA,EAExBtb,KAAK8a,qBAAsB,EAEvB9a,KAAKub,kBACPvb,KAAKub,iBAAkB,EACvBvb,KAAKwb,oBACN,EAqCKxb,KAAwByb,yBAAG,KAC7B3S,OAAO4S,QAAU5S,OAAO4S,OAAOC,kBAAmDC,IAApC9S,OAAO4S,OAAOC,YAAYE,MAC1E7b,KAAK8b,mBAAqBJ,OAAOC,YAAYE,WACbD,IAAvB9S,OAAO6S,YAChB3b,KAAK8b,mBAAqBhT,OAAO6S,aAAe,EAC9C7S,OAAO6S,YAAc,IAAM7S,OAAO6S,YAEpC3b,KAAK8b,mBAAqB,CAC3B,EA7HD9b,KAAKwJ,WAAaH,IAElBrJ,KAAKmb,aAAe,CAClBC,MAAO,EACPC,KAAM,GACNC,MAAO,GAETtb,KAAK+b,WAAa,EAClB/b,KAAKgc,WAAa,EAClBhc,KAAK8a,qBAAsB,EAC3B9a,KAAK8b,mBAAqB,EAC1B9b,KAAKub,iBAAkB,EACvBvb,KAAKgW,UAAW,CAClB,CAEOzC,SACDvT,KAAKgW,WAETlN,OAAO8J,iBAAiB1M,GAAmClG,KAAKib,sBAChEnS,OAAO8J,iBAAiB1M,GAAmClG,KAAKyb,0BAEhEzb,KAAKyb,2BACLzb,KAAK8a,qBAAsB,EAC3B9a,KAAKub,iBAAkB,EACvBvb,KAAKgW,UAAW,EAClB,CAEOvC,UACAzT,KAAKgW,WAEVlN,OAAOuK,oBAAoBnN,GAAmClG,KAAKib,sBACnEnS,OAAOuK,oBAAoBnN,GAAmClG,KAAKyb,0BAEnEzb,KAAKgW,UAAW,EAClB,CAEOzK,SACLvL,KAAKic,kBACLjc,KAAK8a,qBAAsB,CAC7B,CAEOoB,eACL,IAAKlc,KAAK8a,oBACR,MAAO,CACL3R,MAAO,EACPD,IAAK,GAIT,MAAMiT,EAAe9S,EAAWrJ,KAAKwJ,YAKrC,OAHAxJ,KAAKic,kBACLjc,KAAK8a,qBAAsB,EAEpB9a,KAAKoc,cAAcD,EAAcnc,KAAKwJ,WAC/C,CAEO6S,mBAAmBnT,GACxBlJ,KAAK+b,WAAa7S,CACpB,CAwBQsS,mBACN,MAAMc,EAAYtc,KAAK+b,WACjBjP,EAAW9M,KAAKwJ,WAEtBxJ,KAAKgc,WAAa,EAClBhc,KAAKic,kBAEL,MAAQ/S,IAAKqT,GAAchT,GAAYuD,GACvC9M,KAAKgc,WAAaO,EAAYD,EAC9Btc,KAAKic,kBAELjc,KAAKub,iBAAkB,CACzB,CAEQU,kBACN,MAAMnP,EAAW9M,KAAKwJ,YAChB4R,MAAEA,EAAKC,KAAEA,EAAIC,MAAEA,GAAUtb,KAAKmb,aAEpC9R,EAAcyD,GACdzD,EAAayD,EAAUA,GAAWsO,EAAQpb,KAAKgc,YAAcpX,IAC7DyE,EAAayD,EAAUA,EAAUuO,EAAOzW,IACxCyE,EAAayD,EAAUA,GAAWwO,EAAQ1W,IAE1C,MAAM8W,EAASrS,IACTmT,EAAyC,IAA1Bxc,KAAK8b,mBAA2BlX,GAC/C6X,EAAQpT,GAAiBnF,KAAKiG,KAAK,IAAM,EAAG,EAAGjG,KAAKiG,KAAK,KAE/Dd,EAASqS,EAAQ,EAAGxX,KAAKC,IAAIqY,GAAc,EAAGtY,KAAKwY,IAAIF,IACvDnT,EAAcyD,EAAUA,EAAU4O,GAClCrS,EAAcyD,EAAUA,EAAU2P,GAElCpT,EAAeyD,EAAUA,EAC3B,CAaQsP,cAAcO,EAAgBC,GACpC,MAAO,CACL1T,IAAKlJ,KAAK6c,aAAaF,EAAUC,GACjCzT,MAAOnJ,KAAK8c,eAAeH,EAAUC,GAEzC,CAEQC,aAAaE,EAAYC,GAC/B,MAAMC,EAAgBjd,KAAKkd,kBAAkBH,EAAMC,EAAM1C,GAAgBG,kBAIzE,OAHuBza,KAAKkd,kBAAkBH,EAAMC,EAAM1C,GAAgBE,mBACtEtW,KAAKC,IAAInE,KAAKmd,sBAAsBH,IAEhBC,CAC1B,CAEQH,eAAeC,EAAYC,GACjC,OAAOhd,KAAKkd,kBAAkBH,EAAMC,EAAM1C,GAAgBC,YAC5D,CAEQ2C,kBAAkBE,EAAaJ,EAAYK,GACjD,MAAM3C,EAAa1Q,EACjBsQ,GAAgB+C,GAAY3C,WAAW,GACvCJ,GAAgB+C,GAAY3C,WAAW,GACvCJ,GAAgB+C,GAAY3C,WAAW,IAEnCC,EAAYL,GAAgB+C,GAAY1C,UAExCvL,EAAiB/F,EAAW+T,GAC5BE,EAAgBjU,EAAW2T,GAEjC3T,EAAe+F,EAAgBA,GAC/B/F,EAAeiU,EAAeA,GAE9B,IAAIC,EAAYvT,EAAgB,EAAG,EAAG,GAClCwT,EAAWxT,EAAgB,EAAG,EAAG,GAErCA,EAAmBuT,EAAWA,EAAWnO,GACzCpF,EAAmBwT,EAAUA,EAAUF,GACvCtT,EAAmB0Q,EAAYA,EAAY4C,GAE3C,MACMG,EADiBzT,EAAS0Q,EAAY1Q,EAAWA,IAAeuT,EAAWC,IACxC,EAAI,GAAK,EAK5CE,EAAa1T,EAAgB2Q,EAAU,GAAIA,EAAU,GAAIA,EAAU,IAEzE,IAAIgD,EAGFA,EADEN,IAAe/C,GAAgBG,iBACpBzQ,EAAgB,EAAGyT,EAAiB,GAEpCzT,EAAgByT,EAAiB,EAAG,GAGnDzT,EAAmB0T,EAAYA,EAAYJ,GAC3CtT,EAAmB2T,EAAYA,EAAYL,GAE3C,MAAMM,EAAOF,EACPG,EAAOF,EACPG,EAAO9T,IAEbA,EAAW8T,EAAMF,EAAMC,GACvB7T,EAAe8T,EAAMA,GAErB,MAAMC,EAAeD,EAAK,GACpBE,EAAeF,EAAK,GACpBG,EAAeH,EAAK,GAG1BN,EAAWxT,EAAgB2Q,EAAU,GAAIA,EAAU,GAAIA,EAAU,IACjE3Q,EAAmBwT,EAAUA,EAAUF,GAGvCC,EAAYvT,EAAgB2Q,EAAU,GAAIA,EAAU,GAAIA,EAAU,IAClE3Q,EAAmBuT,EAAWA,EAAWnO,GAGzC,IAAI0K,EAAW5V,KAAKoD,IAClBiW,EAAU,GAAKQ,EACfR,EAAU,GAAKS,EACfT,EAAU,GAAKU,GAGjB,MAAMC,EAAqBlU,kEAE3BA,CAAckU,EAAoBX,+DAAWvT,CAAWA,IAAe8T,EAAMhE,IAE7E,IAAIqE,GACDD,EAAmB,GAAKV,EAAS,GAClCU,EAAmB,GAAKV,EAAS,GACjCU,EAAmB,GAAKV,EAAS,KAChCxT,EAAYkU,GAAsBlU,EAAYwT,IAG7CW,EAAqB,IACvBA,EAAqB,GAGvB,MAAMvN,EAAQ1M,KAAKka,KAAKD,GAElBE,EAAWrU,EAAWA,IAAewT,EAAUU,GAMrD,IAAII,EAJJxE,EAAWiE,EAAeM,EAAS,GAC/BL,EAAeK,EAAS,GACxBJ,EAAeI,EAAS,GAK1BC,EADEjB,IAAe/C,GAAgBG,iBAChBX,EAAW,EAAI,GAAK,EAEpBA,EAAW,EAAI,GAAK,EAKvC,OAFoBlJ,EAAQ0N,EAAiBb,EAExB5Y,EACvB,CAEQsY,sBAAsB3T,GAC5B,MAAM+U,EAAQvU,EAAgB,EAAG,EAAG,GAGpC,OAFAA,EAAmBuU,EAAOA,EAAO/U,IAEzB,EAAItF,KAAK4F,MACfyU,EAAM,GACNra,KAAKiG,KAAKjG,KAAKI,IAAIia,EAAM,GAAI,GAAKra,KAAKI,IAAIia,EAAM,GAAI,IACzD,ECtRF,MAAMC,WAAoBtR,EAWb6I,cAAY,OAAO/V,KAAKye,OAAO1I,OAAS,CAIxCE,oBAAkB,OAAOjW,KAAKkW,cAAgB,CAI9CC,gBACT,OAAOnW,KAAKye,OAAO1I,SAAW/V,KAAKye,OAAO5D,kBAC5C,CAgBWE,iBAAe,OAAO/a,KAAKgb,WAAa,CACxCD,eAAWja,GAAyCd,KAAKgb,YAAcla,CAAK,CAgBhF4d,8DACL,IAAK7V,kBACH,OAAO,EAGT,IAAI8V,EAcJ,OAAOlS,QAAQmS,KAAK,CAZa,IAAInS,SAAQoS,IAC3CF,EAAwBvM,IACtByM,EAAIzM,EAAI0M,cAA0C,MAA1B1M,EAAI0M,aAAa1D,MAAc,EAGzDtS,OAAO8J,iBAAiB1M,GAA8ByY,EAAqB,IAGvD,IAAIlS,SAAQoS,IAChCxF,YAAW,IAAMwF,GAAI,IAAQ,IAAK,MAIjClP,MAAMoP,IACLjW,OAAOuK,oBAAoBnN,GAA8ByY,GAElDI,IAEb,GAAC,CASML,0EAEL,OAAI9V,MACMC,kBAELmW,oBAAoBrP,MAAKsP,GACC,YAApBA,IACNC,OAAM,KAAM,GAInB,GAAC,CAQDxf,YAAmBuW,GAAwB8E,WACzCA,GAAa,GACkB,IAC/Blb,QAEAG,KAAKkW,eAAiBD,EACtBjW,KAAKgb,YAAcD,EACnB/a,KAAKye,OAAS,IAAI7D,EACpB,CAKOhM,UACL5O,KAAKyT,UACLzT,KAAKye,OAAO5P,MACZ7O,KAAK6O,KACP,CAKOtD,OAAOW,EAAgBhD,EAAaC,EAAe4D,GACnD/M,KAAKgb,YAGRhb,KAAKmf,gBAAgBjT,EAAQhD,EAAKC,EAAO4D,GAFzC/M,KAAKuO,kBAAkBrC,EAAQa,EAInC,CAKOwG,SACDvT,KAAKye,OAAO1I,UAEhB/V,KAAKye,OAAOlL,SACZvT,KAAKkW,gBAAiB,EACtBlW,KAAK4P,QAAQjL,GAAuB,CAAE8T,QAASzY,KAAM0Y,cAAc,IACrE,CAKOjF,UACAzT,KAAKye,OAAO1I,UAEjB/V,KAAKye,OAAOhL,UACZzT,KAAK4P,QAAQjL,GAAwB,CAAE+T,cAAc,IACvD,CAKOC,OAAe,CAEdwG,gBAAgBjT,EAAgBhD,EAAaC,EAAe4D,GAClE,MAAMqS,EAAQpf,KAAKye,OACnB,IAAKW,EAAMrJ,QAAS,OAEpB,MACE7M,IAAKmW,EACLlW,MAAOmW,GACLF,EAAMlD,eAEVhT,EAAI5C,IAAI+Y,GACRlW,EAAM7C,IAAIgZ,GAEVpT,EAAOiD,OAAO,CACZjG,IAAKA,EAAIpI,IACTqI,MAAOA,EAAMrI,IACbiM,QAEJ,CAEQwB,kBAAkBrC,EAAgBa,GACxC,MAAMqS,EAAQpf,KAAKye,OACdW,EAAMrJ,UAEXqJ,EAAM7T,SACNW,EAAOc,OAAOoS,EAAM5V,WAAYuD,GAClC,ECzJF,MAAMwS,GAiBOC,oBAAkB,OAAOxf,KAAKyf,cAAgB,CAC9CD,kBAAc1e,GACnBA,IAAQd,KAAKyf,iBAEjBzf,KAAKyf,eAAiB3e,EAElBA,GAAOd,KAAKgW,SACdhW,KAAK0f,WAAWxZ,IACNpF,GACVd,KAAK0f,WAAWxZ,IAEpB,CAKWyZ,yBAAuB,OAAO3f,KAAK4f,mBAAqB,CACxDD,uBAAmB7e,GACxBA,IAAQd,KAAK4f,sBAEjB5f,KAAK4f,oBAAsB9e,EAEvBA,GAAOd,KAAKgW,SACdhW,KAAK6f,oBACK/e,GACVd,KAAK8f,sBAET,CAKWnM,iBAAe,OAAO3T,KAAK+f,eAAepM,UAAY,CACtDA,eAAW7S,GAAyCd,KAAK+f,eAAepM,WAAa7S,CAAK,CAI1Fkf,sBAAoB,OAAOhgB,KAAKigB,aAAatM,UAAY,CACzDqM,oBAAgBlf,GAA8Cd,KAAKigB,aAAatM,WAAa7S,CAAK,CAMlGof,sBAAoB,OAAOlgB,KAAKmgB,gBAAkB,CAClDD,oBAAgBpf,GAAgBd,KAAKmgB,iBAAmBrf,CAAK,CAQ7DiV,cAAY,OAAO/V,KAAKgW,QAAU,CAIlChJ,aAAW,OAAOhN,KAAK+f,cAAgB,CAIvChT,WAAS,OAAO/M,KAAKigB,YAAc,CAInCG,WAAS,OAAOpgB,KAAKqgB,YAAc,CAQnClK,gBACT,OAAOnW,KAAK+f,eAAe5J,WACtBnW,KAAKigB,aAAa9J,WAClBnW,KAAKqgB,aAAalK,SACzB,CASAzW,YAAmB8T,EAAsBtH,GAAgBsT,cACvDA,EAAa7L,WACbA,EAAUqM,gBACVA,EAAeL,mBACfA,EAAkB3S,OAClBA,EAAMD,KACNA,EAAIqT,KACJA,IA6JMpgB,KAAAsgB,oBAAuBlO,IAC7BA,EAAIG,gBAAgB,EAuBdvS,KAAAmX,cAAiB/E,IACnBpS,KAAKyf,iBAAmBrN,EAAIa,YAC9BjT,KAAK0f,WAAWxZ,GACjB,EAGKlG,KAAA8X,YAAe1F,IACjBpS,KAAKyf,iBAAmBrN,EAAIa,YAC9BjT,KAAK0f,WAAWxZ,GACjB,EAGKlG,KAASugB,UAAG,EAClB9H,UACAC,mBAKIA,GAAgB1Y,KAAKyf,gBACvBzf,KAAK0f,WAAWxZ,IAGlBuS,EAAQE,KAAK3Y,KAAKqM,QAAQ,EAGpBrM,KAAAwgB,WAAa,EACnB9H,mBAIIA,GACF1Y,KAAK0f,WAAWxZ,GACjB,EAGKlG,KAAAygB,sBAAwB,EAAGvS,gBACjCA,EAAUtB,mBAAmB+C,MAAK,KAChC3P,KAAK2Y,MAAM,GACX,EAzNF3Y,KAAKyf,eAAiBD,EACtBxf,KAAK4f,oBAAsBD,EAG3B3f,KAAKqM,QAAUH,EACflM,KAAK+X,WAAavE,EAClBxT,KAAKmgB,kBAAmB,EACxBngB,KAAKgW,UAAW,EAEhBhW,KAAK+f,eAAiB,IAAIjK,GAActC,GAAUxG,EAAQpF,GAAgBoF,IAC1EhN,KAAKigB,aAAe,IAAIlG,GAAYvG,GAAUzG,EAAMnF,GAAgBmF,IACpE/M,KAAKqgB,aAAe,IAAI7B,IAAa4B,EAAMxY,GAAgBwY,IAE3DpgB,KAAK+f,eAAepM,WAAaA,EACjC3T,KAAKigB,aAAatM,WAAaqM,EAE/BhgB,KAAK0gB,aACP,CASO9R,UACL5O,KAAKyT,UACLzT,KAAK+f,eAAenR,UACpB5O,KAAKigB,aAAarR,UAClB5O,KAAK0f,WAAWxZ,GAClB,CASO4I,OAAOC,EAAeC,GAC3B,MAAM9C,EAASlM,KAAKqM,QAEpBrM,KAAK+f,eAAejR,OAAO5C,EAAO6B,IAAK7B,EAAOnE,OAAQgH,EAAOC,EAC/D,CAOauE,kDACPvT,KAAKgW,WAEJhW,KAAK+f,eAAe9J,eACvBjW,KAAK+f,eAAexM,SAGjBvT,KAAKigB,aAAahK,eACrBjW,KAAKigB,aAAa1M,SAGfvT,KAAKqgB,aAAapK,sBACXuI,GAAYmC,gBACpB3gB,KAAKqgB,aAAa9M,SAItBvT,KAAK2Y,OAED3Y,KAAK4f,qBACP5f,KAAK6f,oBAGP7f,KAAKgW,UAAW,EAClB,GAAC,CAOMvC,UACAzT,KAAKgW,WAEVhW,KAAK+f,eAAetM,UACpBzT,KAAKigB,aAAaxM,UAClBzT,KAAKqgB,aAAa5M,UAElBzT,KAAK8f,sBAEL9f,KAAKgW,UAAW,EAClB,CASOzK,OAAOM,GACZ,MAAMK,EAASlM,KAAKqM,QACduU,EAAgB5gB,KAAK+f,eACrBc,EAAc7gB,KAAKigB,aACnBa,EAAc9gB,KAAKqgB,aAEzBQ,EAAYtV,OAAOM,GACnB,MAAMkB,GbhJiB6E,EagJC1F,EAAO6B,IbhJSA,EagJJ8S,EAAY9T,Kb/I3B7I,KAAK+D,IAAIrD,GAAagN,EAAU,IACnC1N,KAAK+D,IAAIrD,GAAamJ,EAAM,KAFxBgT,IAACnP,EAAiB7D,EamJxC,MAAMiT,EAAYhhB,KAAKmgB,iBAAmB,EAAIjc,KAAKiB,IAAI4H,EAAM,GAC7D6T,EAActI,aAAa0I,GAC3BJ,EAAcvI,YAAYnM,EAAQa,GAClC6T,EAAcrV,OAAOM,GAErB,MAAM3C,EAAM0X,EAAc1X,IACpBC,EAAQyX,EAAczX,MAExB2X,EAAY/K,QACd+K,EAAYvV,OAAOW,EAAQhD,EAAKC,EAAO4D,GAEvCb,EAAOiD,OAAO,CACZjG,IAAKA,EAAIpI,IACTqI,MAAOA,EAAMrI,IACbiM,QAGN,CAOO4L,OACL,MAAMzM,EAASlM,KAAKqM,QAEpBrM,KAAKigB,aAAatH,KAAKzM,GACvBlM,KAAK+f,eAAepH,KAAKzM,EAC3B,CAEQ2T,oBACK7f,KAAK+X,WAEbnF,iBAAiB1M,EAA6BlG,KAAKsgB,oBACxD,CAEQR,sBACK9f,KAAK+X,WAEb1E,oBAAoBnN,EAA6BlG,KAAKsgB,oBAC3D,CAMQZ,WAAWuB,GACjB,IAAKjhB,KAAKyf,gBAAkBwB,IAAc/a,GAAqB,OAE9ClG,KAAK+X,WACbmJ,MAAMC,OAASF,CAC1B,CAEQP,cACN,MAAME,EAAgB5gB,KAAK+f,eACrBc,EAAc7gB,KAAKigB,aAEzBW,EAAc9H,GAAGnU,GAA4B3E,KAAKmX,eAClDyJ,EAAc9H,GAAGnU,GAA0B3E,KAAK8X,aAChD8I,EAAc9H,GAAGnU,GAAuB3E,KAAKugB,WAC7CK,EAAc9H,GAAGnU,GAAwB3E,KAAKwgB,YAC9CK,EAAY/H,GAAGnU,GAAuB3E,KAAKugB,WAC3CM,EAAY/H,GAAGnU,GAAwB3E,KAAKwgB,YAC5CxgB,KAAKqM,QAAQyM,GAAGpU,GAA6B1E,KAAKygB,sBACpD;;;;;;;;;;;;;;ulTC3VF,MAAeW,GAOb1hB,aAAmBqP,MACjBA,EAAKC,OACLA,EAAMqS,MACNA,IAMArhB,KAAK+O,MAAQA,EACb/O,KAAKgP,OAASA,EACdhP,KAAKqhB,MAAQA,EACbrhB,KAAKshB,MAAQC,sBAAsBC,cACnCxhB,KAAKyhB,MAAQF,sBAAsBC,aACrC,CAEO5S,UACL,CAGK8S,UACL,OAAO,CACT,CAEOC,SACL,OAAO,CACT,EClCF,MAAMC,WAAkBR,GAGtB1hB,aAAmBmiB,OACjBA,EAAM9S,MACNA,EAAKC,OACLA,EAAMqS,MACNA,IAOAxhB,MAAM,CACJkP,QACAC,SACAqS,UAGFrhB,KAAK6hB,OAASA,CAChB,ECrBF,MAAMC,WAAqBF,GAGlBhT,UACL,MAAMmT,EAAQ/hB,KAAK6hB,OAEnBE,EAAMC,QACND,EAAME,gBAAgB,OACtBF,EAAMG,MACR,CAEOR,UAAkC,OAAO,CAAM,CAE/CS,WACL,MAAMJ,EAAQ/hB,KAAK6hB,OAEnB,OAAOE,EAAMK,QAAUL,EAAMM,OAASN,EAAMO,YAAc,CAC5D,CAEOC,WACL,MAAMR,EAAQ/hB,KAAK6hB,OAEnB,OAAIE,EAAMS,YACDT,EAAMS,YAAY7a,OAAS,EAGK,MAArCoa,EAAMU,4BACDV,EAAMU,4BAA8B,EAGpB,MAArBV,EAAMW,aACDX,EAAMW,WAKjB,ECpCF,MAAMC,WAAoBvB,GAGxB1hB,aAAmBkjB,QACjBA,EAAO7T,MACPA,EAAKC,OACLA,EAAMqS,MACNA,IAOAxhB,MAAM,CACJkP,QACAC,SACAqS,UAGFrhB,KAAK4iB,QAAUA,CACjB,CAEOjB,SAAgC,OAAO,CAAM,EChBtD,MAAMkB,GAGJnjB,cACEM,KAAK8iB,aAAe,IAAIC,EAC1B,CAEab,KAAKc,EAA+BjB,4CAC/C,GAAIA,EACF,OAAO/hB,KAAKijB,UAAUD,EAAKpb,GAAgBma,IAE3C,GAAImB,MAAMC,QAAQH,IAAQA,EAAIrb,OAAS,EACrC,OAAO3H,KAAKojB,cAAcJ,GACrB,CACL,MAAMK,EAASH,MAAMC,QAAQH,GAAOA,EAAI,GAAKA,EAC7C,OAAOhjB,KAAKsjB,UAAUD,EACvB,CAEL,GAAC,CAEYC,UAAUN,4CACrB,MAAMO,EAASvjB,KAAKwjB,cAAcR,GAElC,OAAOhjB,KAAKyjB,MAAMF,GAAQ7W,IACxB,MAAMgX,EAAQH,EAAO,GAErB7W,EAAQ,IAAIkV,GAAU,CACpBC,OAAQ6B,EACR3U,MAAO2U,EAAMC,aACb3U,OAAQ0U,EAAME,cACdvC,OAAO,IACN,GAEP,GAAC,CAEY+B,cAAcJ,4CACzB,MAAMO,EAASvjB,KAAKwjB,cAAcR,GAElC,OAAOhjB,KAAKyjB,MAAMF,GAAQ7W,IACxBA,EAAQ,IAAIiW,GAAY,CACtBC,QAASW,EACTxU,MAAOwU,EAAO,GAAGI,aACjB3U,OAAQuU,EAAO,GAAGK,cAClBvC,OAAO,IACN,GAEP,GAAC,CAEY4B,UAAUD,EAA+Ba,4CACpD,MAAMC,iBACJC,UAAU,EACVC,OAAO,EACPhZ,MAAM,EACNiZ,OAAQ,GACLJ,GAEC9B,EAAQ/hB,KAAKkkB,gBAAgBlB,EAAKc,GAExC,OAAO9jB,KAAKyjB,MAAM,CAAC1B,IAAQrV,IACzB,MAAMqX,SAAEA,EAAQC,MAAEA,GAAUF,EAE5B/B,EAAMoC,YAAc,EAChBJ,GAAYC,GACdjC,EAAMqC,OAAOlF,OAAM,KAAY,IAGjCxS,EAAQ,IAAIoV,GAAa,CACvBD,OAAQE,EACRhT,MAAOgT,EAAMsC,WACbrV,OAAQ+S,EAAMuC,YACdjD,OAAO,IACN,GAEP,GAAC,CAEOoC,MAASc,EAAwBC,GACvC,MAAMC,EAASzkB,KAAK8iB,aAEpB,OAAO,IAAIrW,SAAQ,CAACC,EAASgY,KAC3BD,EAAOE,KAAK,SAASvS,IACfA,EAAIwS,WAAa,GAErBJ,EAAO9X,EAAQ,IAGjB+X,EAAOE,KAAK,QAASD,GACrBD,EAAOI,MAAMN,EAAQ,GAEzB,CAEQf,cAAcR,GAGpB,OAFaE,MAAMC,QAAQH,GAAOA,EAAM,CAACA,IAE7BhiB,KAAI6gB,IACd,GAAI/b,GAAS+b,GAAS,CACpB,MAAMiD,EAAQ,IAAIC,MAKlB,OAHAD,EAAME,YAAc,YACpBF,EAAM9B,IAAMnB,EAELiD,CACR,CACC,OAAOjD,CACR,GAEL,CAEQqC,gBAAgBlB,GAA+BgB,MACrDA,EAAKhZ,KACLA,EAAIiZ,OACJA,IAEA,GAAIjB,aAAeiC,iBACjB,OAAOjC,EAGT,MAAMjB,EAAQ3b,SAASL,cAAc,SAErCgc,EAAMiD,YAAc,YACpBjD,EAAMmD,aAAc,EACpBnD,EAAMoD,aAAa,qBAAsB,IACzCpD,EAAMiC,MAAQA,EACdjC,EAAMkC,OAASA,EACflC,EAAM/W,KAAOA,EAETkY,MAAMC,QAAQH,GAChBA,EAAIoC,SAAQvD,GAAU7hB,KAAKqlB,qBAAqBtD,EAAOF,KAEvD7hB,KAAKqlB,qBAAqBtD,EAAOiB,GAQnC,OALoBjB,EAAMuD,iBAAiB,UAAU3d,OACnC,GAAKoa,EAAMO,WAAa,GACxCP,EAAMG,OAGDH,CACT,CAEQsD,qBAAqBtD,EAAyBiB,GACpD,GAAIA,aAAeuC,kBACjB,OAAOvC,EAGT,MAAMwC,EAAWpf,SAASL,cAAc,UACxCyf,EAASxC,IAAMA,EACfjB,EAAM0D,YAAYD,EACpB,EC3JF,MAAME,GASJhmB,YAAmBimB,EAAsBC,EAA8B9c,QACrE9I,KAAK2lB,aAAeA,EAEpB3lB,KAAK6lB,SAAWD,EAChB5lB,KAAK8lB,QAAU,EACf9lB,KAAK+lB,WAAa,EAClB/lB,KAAKgmB,iBAAmB,CAC1B,CAEO1b,MAAM2b,GACX,MAAML,EAAU5lB,KAAK6lB,SAGrB,IAAKD,IAAYK,EAAU,OAG3B,GAAIjmB,KAAK8lB,QAAU,GAAK9lB,KAAK+lB,WAAa,EAAG,OAE7C,MAAM/a,EAAOA,CAACkb,EAAeC,KAC3B,MAAMC,EAAOC,KAAKC,MACZza,EAAQ3H,KAAKe,IAAImhB,EAAOpmB,KAAKgmB,gBAAqC,IAApBhmB,KAAK2lB,cAEzDM,EAASpa,EAAOsa,GAEhBnmB,KAAKgmB,gBAAkBI,EACvBpmB,KAAK8lB,OAASF,EAAQW,sBAAsBvb,EAAK,EAGnDhL,KAAKgmB,gBAAkBK,KAAKC,MAC5BtmB,KAAK8lB,OAASF,EAAQW,sBAAsBvb,EAC9C,CAEOwb,OACDxmB,KAAK8lB,QAAU,GACjB9lB,KAAK6lB,SAASY,qBAAqBzmB,KAAK8lB,QAGtC9lB,KAAK+lB,WAAa,GACpBxM,aAAavZ,KAAK+lB,WAGpB/lB,KAAK8lB,QAAU,EACf9lB,KAAK+lB,WAAa,CACpB,CAEOW,cAAcd,GACnB5lB,KAAKwmB,OACLxmB,KAAK6lB,SAAWD,CAClB,ECxDF,MAAMe,GAMOC,wBAAsB,OAAO5mB,KAAK6mB,kBAAoB,CAKtD9Q,cAAY,OAAO/V,KAAKgW,QAAU,CAG7CtW,YAAmBknB,EAA4BE,GAsDvC9mB,KAAgB+mB,iBAAG,MACzB,IAAIC,GAAgB,EAEpB,MAAQ,KACFA,EACFA,GAAgB,EAIlBhnB,KAAKinB,WAAW,CAEnB,EAX0B,GArDzBjnB,KAAK6mB,mBAAqBD,EAE1B5mB,KAAKgW,UAAW,EAChBhW,KAAKknB,gBAAkB,KACvBlnB,KAAKinB,UAAYH,CACnB,CAKOvT,OAAOC,GAKZ,GAJIxT,KAAKgW,UACPhW,KAAKyT,UAGHzT,KAAK6mB,oBAAwB/d,OAAOqe,eAAgB,CACtD,MAAMC,EAAO5T,EAAQ6T,wBACfC,EAAiC,IAAfF,EAAKrY,OAA+B,IAAhBqY,EAAKpY,OAE3CuY,EAAiB,IAAIJ,eAAeG,EAAkBtnB,KAAK+mB,iBAAmB/mB,KAAKinB,WAEzFM,EAAeC,QAAQhU,GAEvBxT,KAAKknB,gBAAkBK,CACxB,MACCze,OAAO8J,iBAAiB1M,EAAuBlG,KAAKinB,WAKtD,OAFAjnB,KAAKgW,UAAW,EAEThW,IACT,CAKOyT,UACL,IAAKzT,KAAKgW,SAAU,OAAOhW,KAE3B,MAAMunB,EAAiBvnB,KAAKknB,gBAU5B,OATIK,GACFA,EAAeE,aACfznB,KAAKknB,gBAAkB,MAEvBpe,OAAOuK,oBAAoBnN,EAAuBlG,KAAKinB,WAGzDjnB,KAAKgW,UAAW,EAEThW,IACT,EC1BF,MAAM0nB,GAyBO3R,cAAY,OAAO/V,KAAKgW,QAAU,CAIlCC,oBAAkB,OAAOjW,KAAKkW,cAAgB,CAO9CyR,cACT,OAAO3nB,KAAKgW,WAAahW,KAAK4nB,YAChC,CAQWC,YAAU,OAAO7nB,KAAK8nB,MAAQ,CAC9BD,UAAM/mB,GAAed,KAAK8nB,OAAShnB,CAAK,CAQxCinB,wBAAsB,OAAO/nB,KAAKgoB,kBAAoB,CACtDD,sBAAkBjnB,GAAed,KAAKgoB,mBAAqBlnB,CAAK,CAQhEmnB,YAAU,OAAOjoB,KAAKkoB,MAAQ,CAC9BD,UAAMnnB,GAAed,KAAKkoB,OAASpnB,CAAK,CAQxCqnB,mBAAiB,OAAOnoB,KAAKooB,aAAe,CAC5CD,iBAAarnB,GAAgBd,KAAKooB,cAAgBtnB,CAAK,CAQvDunB,mBAAiB,OAAOroB,KAAKsoB,aAAe,CAC5CD,iBAAavnB,GAAgBd,KAAKsoB,cAAgBxnB,CAAK,CAQvDynB,yBAAuB,OAAOvoB,KAAKwoB,mBAAqB,CACxDD,uBAAmBznB,GAAgBd,KAAKwoB,oBAAsB1nB,CAAK,CAS9EpB,YAAmB+oB,EAAiBjV,EAAsBkV,GA6HlD1oB,KAAamX,cAAG,KACjBnX,KAAKsoB,gBAEVtoB,KAAK4nB,cAAe,EACpB5nB,KAAK2oB,gBAAe,EAGd3oB,KAAW8X,YAAG,KACpB9X,KAAK4oB,4BAA4B5oB,KAAK8nB,OAAO,EAGvC9nB,KAAa6oB,cAAG,KACtB7oB,KAAKyT,SAAS,EAGRzT,KAAa8oB,cAAG,KACjB9oB,KAAKooB,gBACVpoB,KAAK4nB,cAAe,EACpB5nB,KAAK+oB,WAAY,EAAI,EAGf/oB,KAAagpB,cAAG,KACjBhpB,KAAKooB,gBACVpoB,KAAK+oB,WAAY,EACjB/oB,KAAK4oB,4BAA4B5oB,KAAKgoB,oBAAmB,EApJzDhoB,KAAKqM,QAAUoc,EAAOvc,OACtBlM,KAAKipB,SAAWR,EAAOhQ,QACvBzY,KAAKkpB,SAAW1V,EAEhBxT,KAAKgW,UAAW,EAChBhW,KAAK4nB,cAAe,EACpB5nB,KAAKmpB,oBAAsB,EAC3BnpB,KAAK+oB,WAAY,EAEjB,MAAMlB,MACJA,EAAQ,IAAIE,kBACZA,EAAoB,EAACE,MACrBA,EAAQ,EAACE,aACTA,GAAe,EAAKE,aACpBA,GAAe,EAAIE,mBACnBA,GAAqB,GACnB3gB,GAAgB8gB,GAEpB1oB,KAAKkW,gBAAkBwS,EACvB1oB,KAAK8nB,OAASD,EACd7nB,KAAKgoB,mBAAqBD,EAC1B/nB,KAAKkoB,OAASD,EACdjoB,KAAKooB,cAAgBD,EACrBnoB,KAAKsoB,cAAgBD,EACrBroB,KAAKwoB,oBAAsBD,CAC7B,CAOO3Z,UACL5O,KAAKyT,SACP,CAQOlI,OAAOC,GACZ,IAAKxL,KAAKgW,SAAU,OACpB,GAAIhW,KAAK4nB,aAKP,YAJI5nB,KAAKwoB,qBACPxoB,KAAKyT,WAMT,MAAMvH,EAASlM,KAAKqM,QACdR,GAAS7L,KAAKkoB,OAAS1c,EAAY,IAEzCU,EAAOhD,IAAM9B,GAAU8E,EAAOhD,IAAM2C,EAAO,EAAG,IAChD,CAOO0H,SACL,MAAMkF,EAAUzY,KAAKipB,SACfzV,EAAUxT,KAAKkpB,SAEjBlpB,KAAKgW,UAAYyC,EAAQ2H,KAAKrK,UAElC0C,EAAQzL,OAAO8L,GAAGnU,GAA4B3E,KAAKmX,eACnDsB,EAAQzL,OAAO8L,GAAGnU,GAA0B3E,KAAK8X,aAEjDW,EAAQ1L,KAAK+L,GAAGnU,GAA4B3E,KAAKmX,eACjDsB,EAAQ1L,KAAK+L,GAAGnU,GAA0B3E,KAAK8X,aAE/CW,EAAQ2H,KAAKtH,GAAGnU,GAAuB3E,KAAK6oB,eAE5CrV,EAAQZ,iBAAiB1M,EAA4BlG,KAAK8oB,eAAe,GACzEtV,EAAQZ,iBAAiB1M,EAA4BlG,KAAKgpB,eAAe,GAEzEhpB,KAAKgW,UAAW,EAChBhW,KAAKkW,gBAAiB,EACxB,CAOOkT,mBACLppB,KAAKuT,SACLvT,KAAK4nB,cAAe,EACpB5nB,KAAK4oB,4BAA4B5oB,KAAK8nB,OACxC,CAOOrU,UACL,IAAKzT,KAAKgW,SAAU,OAEpB,MAAMyC,EAAUzY,KAAKipB,SACfzV,EAAUxT,KAAKkpB,SAErBzQ,EAAQzL,OAAO6B,IAAIlK,GAA4B3E,KAAKmX,eACpDsB,EAAQzL,OAAO6B,IAAIlK,GAA0B3E,KAAK8X,aAElDW,EAAQ1L,KAAK8B,IAAIlK,GAA4B3E,KAAKmX,eAClDsB,EAAQ1L,KAAK8B,IAAIlK,GAA0B3E,KAAK8X,aAEhDW,EAAQ2H,KAAKvR,IAAIlK,GAAuB3E,KAAK6oB,eAE7CrV,EAAQH,oBAAoBnN,EAA4BlG,KAAK8oB,eAAe,GAC5EtV,EAAQH,oBAAoBnN,EAA4BlG,KAAKgpB,eAAe,GAE5EhpB,KAAKgW,UAAW,EAChBhW,KAAK4nB,cAAe,EACpB5nB,KAAK+oB,WAAY,EAEjB/oB,KAAK2oB,eACP,CA6BQC,4BAA4Bf,GAC9B7nB,KAAK+oB,YAET/oB,KAAK2oB,gBAEDd,EAAQ,EACV7nB,KAAKmpB,mBAAqBrgB,OAAOuQ,YAAW,KAC1CrZ,KAAK4nB,cAAe,EACpB5nB,KAAKmpB,oBAAsB,CAAC,GAC3BtB,IAEH7nB,KAAK4nB,cAAe,EACpB5nB,KAAKmpB,oBAAsB,GAE/B,CAEQR,gBACF3oB,KAAKmpB,oBAAsB,IAC7BrgB,OAAOyQ,aAAavZ,KAAKmpB,oBACzBnpB,KAAKmpB,oBAAsB,EAE/B,ECjTF,MAAME,WAAkBnc,EA+BtBxN,YAAmB4pB,EAAmBZ,EAA4B,IAChE7oB,QAaKG,KAAO4O,QAAG,KACf5O,KAAKupB,OACLvpB,KAAK6O,KAAK,EA0HJ7O,KAAawpB,cAAG,KACtBxpB,KAAKupB,OACLvpB,KAAK4P,QAAQrO,GAAOsC,OAAO,EAzI3B7D,KAAKypB,WAAa,KAClBzpB,KAAK0pB,YAAc,KACnB1pB,KAAK2pB,KAAOL,EACZtpB,KAAK4pB,SAAWlB,CAClB,CAiBa/H,uDAEX,MAAMkJ,EAAK/gB,OAAOghB,UAAUD,GAC5B,QAAKA,GAEEA,EAAGE,mBAAmBtkB,IAC1BkK,MAAKoP,GACGA,IACNG,OAAM,KACA,GAEb,GAAC,CAOY8K,iDACX,MAAMV,EAAMtpB,KAAK2pB,KAGXE,EAAK/gB,OAAOghB,UAAUD,GAC5B,IAAKA,EAAI,aAEHrL,GAAYyL,0BAElB,MAAMvB,EACD5oB,OAAA0V,OAAA,CACD0U,iBAAkB,CAACxkB,KAElB1F,KAAK4pB,gBAGJN,EAAIa,mBAEV,MAAMC,QAAgBP,EAAGQ,eAAe5kB,GAAYijB,GACpDY,EAAIgB,YAAYF,GAEhB,MAAMG,QAAiBH,EAAQI,sBAAsB9kB,IAErD1F,KAAKyqB,YAAYL,EAASG,GAE1BvqB,KAAK4P,QAAQrO,GAAOqC,SAAU,CAC5BwmB,WAEJ,GAAC,CAOMb,OACL,MAAMmB,EAAY1qB,KAAKypB,WAEnBiB,GACFA,EAAUlgB,MACP0U,OAAM,KAAY,IAGvBlf,KAAKypB,WAAa,KAClBzpB,KAAK0pB,YAAc,IACrB,CAKOiB,UAAUxE,GACf,MAAMoE,EAAWvqB,KAAK0pB,YAEtB,IAAKa,EAAU,OAAO,EAItB,QAFapE,EAAMyE,cAAcL,EAGnC,CAKOM,aAAa1E,GAKlB,MAAMiE,EAAUjE,EAAMiE,QAChBU,EAAO3E,EAAMyE,cAAc5qB,KAAK0pB,aAEtC,IAAKoB,EAAM,OAAO,KAElB,MAAMC,EAAUX,EAAQY,YAAYC,UAEpC,OAAKF,EAEED,EAAKI,MAAMlqB,KAAI+I,IAIb,CACLohB,SAJeJ,EAAQK,YAAYrhB,GAKnCshB,QAJcthB,EAAKuhB,UAAUC,QAAQC,OAKrCC,QAAS1hB,EAAK2E,qBATG,IAYvB,CAEQ+b,YAAYL,EAAoBG,GACtCvqB,KAAKypB,WAAaW,EAClBpqB,KAAK0pB,YAAca,EAEnBH,EAAQxX,iBAAiB1M,GAAuBlG,KAAKwpB,cACvD,EC7KF,MAAMkC,GAcJhsB,YAAmB8T,EAAsBvF,GACvCjO,KAAKwT,QAAUA,EACfxT,KAAKiO,SAAWA,CAClB,ECKF,MAAM0d,GAgBJjsB,YAAmBksB,EAAqBC,GAAyB9e,KAC/DA,GAAO,IAEP/M,KAAK8rB,aAAevlB,GAAmB,IAAIhE,GAAcK,oBAAqBgpB,GAC9E5rB,KAAK+rB,UAAYF,EACjB7rB,KAAKgsB,UAAY,GAEjBhsB,KAAKisB,MAAQlf,CACf,CAOOmf,UACL,MAAMC,EAAYnsB,KAAK8rB,aACvB,IAAKK,EAAW,OAEhB,MAAMC,EAAa,GAAGC,MAAMC,MAAMH,EAAU7G,qBAAqB/iB,GAAcM,YAC/E7C,KAAKgsB,UAAYI,EAAWprB,KAAImF,GAAMnG,KAAKusB,cAAcpmB,IAC3D,CAOOqmB,OAAOtgB,GACZ,MAAMugB,EAAWzsB,KAAKgsB,UAChBU,EAAmC,GAAvB1sB,KAAK+rB,UAAUhd,MAC3B4d,EAAqC,GAAxB3sB,KAAK+rB,UAAU/c,OAC5BjC,EAAOb,EAAOa,KACd6f,EAAkB,wBAClBC,EAAgB7sB,KAAKisB,MAAQ,SAASlf,KAAU,GAEtD0f,EAASrH,SAAQ0H,IACf,MAAM7e,EAAW6e,EAAQ7e,SACnB8e,EAAS/iB,IAMf,+CAJAA,CAAU+iB,EAAQ9e,GAClBjE,EAAmB+iB,EAAQA,EAAQ7gB,EAAOsC,YAC1CxE,EAAmB+iB,EAAQA,EAAQ7gB,EAAOwC,kBAEtCqe,EAAO,GAAK,GAAKA,EAAO,GAAK,EAE/B,YADAD,EAAQtZ,QAAQnN,UAAU2mB,OAAOzqB,GAAcO,iBAIjD,MAAMmqB,sDAAYC,CAChBH,EAAO,GAAKL,EAAYA,GACvBK,EAAO,GAAKJ,EAAaA,GAG5BG,EAAQtZ,QAAQnN,UAAUC,IAAI/D,GAAcO,iBAC5CgqB,EAAQtZ,QAAQ0N,MAAMoK,UAAY,CAChCsB,EACa,aAAAK,EAAU,SAASA,EAAU,QAC1CJ,GACA3rB,KAAK,IAAI,GAEf,CAEQqrB,cAAc/Y,GACpB,MAAM2Z,EAAS3Z,EAAQ4Z,QAAQlkB,IACzBmkB,EAAW7Z,EAAQ4Z,QAAQjkB,MAC3BmkB,EAAc9Z,EAAQ4Z,QAAQnf,SAEpC,GAAIkf,GAAUE,EAAU,CACtB,MAAMnkB,EAAMikB,EAASI,WAAWJ,GAAU,EACpChkB,EAAQkkB,EAAWE,WAAWF,GAAY,EAE1Cpf,EAAWjO,KAAKwtB,gBAAgBtkB,EAAKC,GAE3C,OAAO,IAAIuiB,GAAQlY,EAASvF,EAC7B,CAAM,GAAIqf,EAAa,CACtB,MAAMG,EAAgBH,EAAYhlB,MAAM,KAAKtH,KAAIF,GAAOysB,WAAWzsB,KACnE,GAAI2sB,EAAI9lB,OAAS,EACf,MAAM,IAAInI,EAAaqB,EAAeD,kBAAkB0sB,EAAa,qCAAwCzsB,EAAYD,mBAG3H,OAAO,IAAI8qB,GAAQlY,EAASxJ,EAAgByjB,EAAI,GAAIA,EAAI,GAAIA,EAAI,IACjE,CAAM,CAEL,MAAMC,EAAa1jB,EAAgB,EAAG,GAAI,GAE1C,OAAO,IAAI0hB,GAAQlY,EAASka,EAC7B,CACH,CAEQF,gBAAgBtkB,EAAaC,GACnC,MAAMwkB,EAASzkB,EAAMtE,GACfgpB,EAAWzkB,EAAQvE,GACnBqJ,EAAWjE,IAQjB,OANAiE,EAAS,GAAK/J,KAAKC,IAAIypB,GACvB3f,EAAS,GAAK/J,KAAKwY,IAAIkR,GAEvB3f,EAAS,GAAKA,EAAS,GAAK/J,KAAKC,KAAKwpB,GACtC1f,EAAS,IAAMA,EAAS,GAAK/J,KAAKwY,KAAKiR,GAEhC1f,CACT,EC7IF,MAAM4f,GASOC,YAAU,OAAO9tB,KAAK+tB,SAASC,SAASF,KAAO,CAE1DpuB,YAAY4V,EAAiByY,EAAoBE,GAC/CjuB,KAAKsV,IAAMA,EACXtV,KAAK+tB,SAAWA,EAChB/tB,KAAKiuB,QAAUA,CACjB,ECHF,MAAMC,GAYOC,aAAW,OAAOnuB,KAAKouB,OAAS,CAChCC,qBAAmB,OAAOruB,KAAKsuB,eAAiB,CAChDC,eAAa,OAAOvuB,KAAKwuB,SAAW,CACpCC,iBAAe,OAAOzuB,KAAKwuB,aAAexuB,KAAK0uB,YAAYC,GAAK,CAChEC,WAAS,OAAO5uB,KAAK6uB,YAAc,CACnCC,YAAU,OAAO9uB,KAAK+uB,MAAQ,CAEzCrvB,YAAmByuB,EAA2BW,GA4btC9uB,KAAcgvB,eAAG,KACRhvB,KAAKouB,QACb/nB,UAAUC,IAAI/D,GAAcG,UACnC1C,KAAK6uB,cAAe,CAAI,EAGlB7uB,KAAiBivB,kBAAG,KACXjvB,KAAKouB,QACb/nB,UAAU2mB,OAAOzqB,GAAcG,UACtC1C,KAAK6uB,cAAe,CAAK,EApczB7uB,KAAKouB,QAAUD,EACfnuB,KAAK6uB,cAAe,EACpB7uB,KAAK+uB,OAASD,EACd9uB,KAAK0uB,YAAc,CACjBC,IAAK,KACLO,YAAa,KAEjB,CAEOC,OACL,MAAMhB,EAASnuB,KAAKouB,SAEdgB,GAAEA,EAAEb,SAAEA,GAAavuB,KAAKqvB,YAAYlB,GAE1CnuB,KAAKsvB,IAAMF,EACXpvB,KAAKsuB,gBAAkBc,EAAGG,aAAaH,EAAGI,kBAC1CxvB,KAAKwuB,UAAYD,EAEZvuB,KAAKwuB,YACRxuB,KAAK0uB,YAAYC,IAAMS,EAAGK,aAAa,4BAGzCzvB,KAAK0uB,YAAYQ,YAAcE,EAAGK,aAAa,sBAE/CtB,EAAOvb,iBAAiB1M,GAA6BlG,KAAKgvB,gBAC1Db,EAAOvb,iBAAiB1M,GAAiClG,KAAKivB,kBAGhE,CAEOrgB,UACL,MAAMwgB,EAAKpvB,KAAKsvB,IACVnB,EAASnuB,KAAKouB,QAEhBgB,IAEFA,EAAGM,WAAWN,EAAGO,aAAc,MAC/BP,EAAGM,WAAWN,EAAGQ,qBAAsB,OAGzCzB,EAAO9a,oBAAoBnN,GAA6BlG,KAAKgvB,gBAC7Db,EAAO9a,oBAAoBnN,GAAiClG,KAAKivB,kBACnE,CAEOY,mBACL,MAAMC,EAAY9vB,KAAK0uB,YAAYQ,YAE9BY,GAELA,EAAUZ,aACZ,CAEOa,sBACL,MAAMD,EAAY9vB,KAAK0uB,YAAYQ,YAE9BY,GAELA,EAAUE,gBACZ,CAEOC,QACL,MAAMb,EAAKpvB,KAAKsvB,IAEhBF,EAAGa,MAAMb,EAAGc,iBACd,CAEOphB,SACL,MAAMsgB,EAAKpvB,KAAKsvB,IAEhBF,EAAGjE,SAAS,EAAG,EAAGiE,EAAGe,mBAAoBf,EAAGgB,oBAC9C,CAEOjF,SAASnnB,EAAWyF,EAAWsF,EAAeC,GACxChP,KAAKsvB,IAEbnE,SAASnnB,EAAGyF,EAAGsF,EAAOC,EAC3B,CAEOqhB,UAAUtC,EAAoBuC,GACnC,MAAMC,EAAYvwB,KAAKwwB,mBAEjB7B,EAAM,IAAId,GAAkB0C,EAAWxC,EAAU,CACrDC,SAAUhuB,KAAKywB,gBACfxiB,SAAUjO,KAAKywB,gBACfC,GAAI1wB,KAAKywB,kBAUX,OAPIF,IACFvwB,KAAK2wB,eAAeJ,GACpBvwB,KAAK4wB,oBAAoBjC,EAAK2B,GAC9BtwB,KAAK2wB,eAAe,MACpB3wB,KAAK6wB,kBAGAlC,CACT,CAEOmC,KAAKnC,EAAwB2B,GAClC,MAAMlB,EAAKpvB,KAAKsvB,IAEZX,EAAIrZ,IACNtV,KAAK2wB,eAAehC,EAAIrZ,KAExBtV,KAAK4wB,oBAAoBjC,EAAK2B,GAGhClB,EAAG2B,aAAa3B,EAAG4B,UAAWrC,EAAIb,MAAOsB,EAAG6B,eAAgB,GAExDtC,EAAIrZ,IACNtV,KAAK2wB,eAAe,MAEpB3wB,KAAK6wB,gBAET,CAEOK,WAAWvC,GACZA,EAAIrZ,KACNtV,KAAKmxB,iBAAiBxC,EAAIrZ,KAG5BtV,KAAKoxB,cAAczC,EAAIV,QAAQD,UAC/BhuB,KAAKoxB,cAAczC,EAAIV,QAAQhgB,UAC/BjO,KAAKoxB,cAAczC,EAAIV,QAAQyC,GACjC,CAEOW,oBAAuDC,EAAuBC,GACnF,MAAMnC,EAAKpvB,KAAKsvB,IAEVkC,EAAmB1xB,OAAO2xB,KAAKF,GAAUlc,QAAO,CAACqc,EAAW/oB,KAChE+oB,EAAU/oB,GAAkBymB,EAAGuC,mBAAmBL,EAAS3oB,GAEpD+oB,IACN,CAAyB,GAE5B,OACK5xB,OAAA0V,OAAA1V,OAAA0V,OAAA,CAAA,EAAAxV,KAAK4xB,2BAA2BN,IAChCE,EAEP,CAEOK,qBAAqBC,EAAkB5lB,EAAgBokB,GAC5D,MAAMlB,EAAKpvB,KAAKsvB,IAEVkC,EAAmBlB,EAAckB,iBAIjChG,EAASsG,EAAOtG,OAChBuG,EAAWtjB,IACjBA,EAAcsjB,EAAU7lB,EAAOsC,WAAYgd,GAE3C4D,EAAG4C,iBAAiBR,EAAiBS,WAAW,EAAOF,GACvD3C,EAAG4C,iBAAiBR,EAAiBU,UAAU,EAAOhmB,EAAOwC,iBAC/D,CAEOyjB,iBAAiB7B,EAA8ByB,EAAgBtG,EAAe2G,GACnF,MAAMhD,EAAKpvB,KAAKsvB,IAEVkC,EAAmBlB,EAAckB,iBAEvCpC,EAAG4C,iBAAiBR,EAAiBS,WAAW,EAAOF,GACvD3C,EAAG4C,iBAAiBR,EAAiBU,UAAU,EAAOzG,GAElD+F,EAAiBa,MACnBjD,EAAGkD,UAAUd,EAAiBa,KAAMD,EAExC,CAEOG,eAAejC,GACpB,MAAMlB,EAAKpvB,KAAKsvB,IAEViC,EAAWjB,EAAciB,SACzBC,EAAmBlB,EAAckB,iBAEvC,IAAK,MAAM7oB,KAAO4oB,EAAU,CAC1B,MAAMiB,EAAUjB,EAAS5oB,GACnBgM,EAAW6c,EAAiB7oB,GAE7B6pB,IAEDA,EAAQC,aACVD,EAAQjnB,OAAO6jB,EAAIza,EAAU3U,KAAKwuB,WAErC,CACH,CAEOkE,uBAAuBpC,GAC5B,MAAMlB,EAAKpvB,KAAKsvB,IAEViC,EAAWjB,EAAciB,SAE/B,IAAK,MAAM5oB,KAAO4oB,EAAU,CAC1B,MAAMiB,EAAUjB,EAAS5oB,GAEpB6pB,IAEDA,EAAQC,aACVD,EAAQ5jB,QAAQwgB,GAEnB,CAEDA,EAAGuD,cAAcrC,EAAcgB,QACjC,CAEOsB,WAAWtC,GACLtwB,KAAKsvB,IAEbsD,WAAWtC,EAAcgB,QAC9B,CAEOuB,cAAcC,EAAsBC,GACzC,MAAM3D,EAAKpvB,KAAKsvB,IACVgC,EAAUlC,EAAGyD,gBAEbG,EAAKhzB,KAAKizB,eAAe7D,EAAG8D,cAAeJ,GAC3CK,EAAKnzB,KAAKizB,eAAe7D,EAAGgE,gBAAiBL,GAQnD,GANA3D,EAAGiE,aAAa/B,EAAS0B,GACzB5D,EAAGiE,aAAa/B,EAAS6B,GACzB/D,EAAGkE,mBAAmBhC,EAAS,EAAG,YAClClC,EAAGkE,mBAAmBhC,EAAS,EAAG,MAClClC,EAAGmE,YAAYjC,GAEXtxB,KAAK+uB,SAAWK,EAAGoE,oBAAoBlC,EAASlC,EAAGqE,aAAc,CACnE,IAAInyB,EAA2B,KAQ/B,MANK8tB,EAAGsE,mBAAmBV,EAAI5D,EAAGuE,gBAEtBvE,EAAGsE,mBAAmBP,EAAI/D,EAAGuE,kBACvCryB,EAAY8tB,EAAGwE,iBAAiBT,IAFhC7xB,EAAY8tB,EAAGwE,iBAAiBZ,GAK5B,IAAIxzB,EAAaqB,EAAeF,uBAAuByuB,EAAGyE,kBAAkBvC,GAAUhwB,GAAYT,EAAYF,uBACrH,CAKD,OAHAyuB,EAAG0E,aAAad,GAChB5D,EAAG0E,aAAaX,GAET7B,CACT,CAEOyC,mBAAmBC,GACxB,MAAM5E,EAAKpvB,KAAKsvB,IACV2E,EAAU7E,EAAG8E,gBAQnB,GANA9E,EAAG+E,YAAY/E,EAAGgF,WAAYH,GAC9B7E,EAAGiF,cAAcjF,EAAGgF,WAAYhF,EAAGkF,mBAAoBlF,EAAGrrB,QAC1DqrB,EAAGiF,cAAcjF,EAAGgF,WAAYhF,EAAGmF,mBAAoBnF,EAAGrrB,QAC1DqrB,EAAGiF,cAAcjF,EAAGgF,WAAYhF,EAAGoF,eAAgBR,EAAQ1S,OAC3D8N,EAAGiF,cAAcjF,EAAGgF,WAAYhF,EAAGqF,eAAgBT,EAAQvS,QAEtDuS,EAAQtS,WAAa1hB,KAAKwuB,UAAW,CACxC,MAAMkG,EAAMtF,EAEZsF,EAAIC,aAAaD,EAAIN,WAAY,EAAGM,EAAIE,MAAOZ,EAAQjlB,MAAOilB,EAAQhlB,OACvE,CAED,OAAOilB,CACT,CAEOY,uBAAuBb,EAAkB3sB,GAC9C,MAAM+nB,EAAKpvB,KAAKsvB,IACV2E,EAAU7E,EAAG8E,gBAQnB,GANA9E,EAAG+E,YAAY/E,EAAG0F,iBAAkBb,GACpC7E,EAAGiF,cAAcjF,EAAG0F,iBAAkB1F,EAAGkF,mBAAoBlF,EAAGrrB,QAChEqrB,EAAGiF,cAAcjF,EAAG0F,iBAAkB1F,EAAGmF,mBAAoBnF,EAAGrrB,QAChEqrB,EAAGiF,cAAcjF,EAAG0F,iBAAkB1F,EAAGoF,eAAgBR,EAAQ1S,OACjE8N,EAAGiF,cAAcjF,EAAG0F,iBAAkB1F,EAAGqF,eAAgBT,EAAQvS,OAE7DzhB,KAAKwuB,UAAW,CAClB,MAAMkG,EAAMtF,EAEZsF,EAAIC,aAAaD,EAAII,iBAAkB,EAAGJ,EAAIE,MAAOvtB,EAAMA,EAC5D,CAED,OAAO4sB,CACT,CAEa9J,4DACX,MAAMiF,EAAKpvB,KAAKsvB,IACVyF,EAAa3F,EAAG4F,uBAElBD,IAA0C,IAA5BA,EAAWE,qBACrB7F,EAAGjF,mBAEb,GAAC,CAEMG,YAAYF,GACjB,MAAMgF,EAAKpvB,KAAKsvB,IACV4F,EAAU,IAAIC,aAAa/K,EAASgF,GAC1ChF,EAAQgL,kBAAkB,CAAEnK,UAAWiK,GACzC,CAEOG,YAAYlP,GACjB,MAAMiJ,EAAKpvB,KAAKsvB,IAEVrE,EADU9E,EAAMiE,QACIY,YAAYC,UAEtCmE,EAAGkG,gBAAgBlG,EAAGmG,YAAatK,EAAUuK,YAC/C,CAEOC,wBACL,MAAMrG,EAAKpvB,KAAKsvB,IAChBF,EAAGkG,gBAAgBlG,EAAGmG,YAAa,KACrC,CAEQ9E,gBACN,OAAOzwB,KAAKsvB,IAAIoG,cAClB,CAEQtE,cAAcuE,GACpB,OAAO31B,KAAKsvB,IAAIsG,aAAaD,EAC/B,CAEQnF,mBACN,MAAMpB,EAAKpvB,KAAKsvB,IAEhB,GAAItvB,KAAKwuB,UACP,OAAQY,EAA8ByG,oBACjC,CACL,MAAMC,EAAM91B,KAAK0uB,YAAYC,IAE7B,OAAOmH,aAAG,EAAHA,EAAKC,yBAA0B,IACvC,CACH,CAEQpF,eAAehC,GACrB,MAAMS,EAAKpvB,KAAKsvB,IAEhB,GAAItvB,KAAKwuB,UACNY,EAA8B4G,gBAAgBrH,OAC1C,CACL,MAAMmH,EAAM91B,KAAK0uB,YAAYC,IAE7BmH,SAAAA,EAAKG,mBAAmBtH,EACzB,CACH,CAEQwC,iBAAiBxC,GACvB,MAAMS,EAAKpvB,KAAKsvB,IAEhB,GAAItvB,KAAKwuB,UACNY,EAA8B8G,kBAAkBvH,OAC5C,CACL,MAAMmH,EAAM91B,KAAK0uB,YAAYC,IAE7BmH,SAAAA,EAAKK,qBAAqBxH,EAC3B,CACH,CAEQiC,oBAAoBjC,EAAwB2B,GAClD,MAAMvC,EAAWY,EAAIZ,SAErB/tB,KAAKo2B,oBAAoBrI,EAASC,SAAUW,EAAIV,QAAQD,UACxDhuB,KAAKq2B,qBAAqBtI,EAASuI,SAAUhG,EAAcgB,QAAS,WAAY3C,EAAIV,QAAQhgB,UAC5FjO,KAAKq2B,qBAAqBtI,EAASwI,IAAKjG,EAAcgB,QAAS,KAAM3C,EAAIV,QAAQyC,GACnF,CAEQG,iBACN,MAAMzB,EAAKpvB,KAAKsvB,IAEhBF,EAAGM,WAAWN,EAAGQ,qBAAsB,MACvCR,EAAGM,WAAWN,EAAGO,aAAc,KACjC,CAEQyG,oBAAoBpI,EAAmC2H,GAC7D,MAAMvG,EAAKpvB,KAAKsvB,IAEhBF,EAAGM,WAAWN,EAAGQ,qBAAsB+F,GACvCvG,EAAGoH,WAAWpH,EAAGQ,qBAAsB5B,EAASyI,KAAMrH,EAAGsH,YAC3D,CAEQL,qBAAqBM,EAAqCrF,EAAuBpxB,EAAcy1B,GACrG,MAAMvG,EAAKpvB,KAAKsvB,IACVsH,EAAiBxH,EAAGyH,kBAAkBvF,EAASpxB,GAGjD02B,EAAiB,IAErBxH,EAAGM,WAAWN,EAAGO,aAAcgG,GAC/BvG,EAAGoH,WAAWpH,EAAGO,aAAcgH,EAAUF,KAAMrH,EAAGsH,aAClDtH,EAAG0H,oBAAoBF,EAAgBD,EAAUI,SAAU3H,EAAG4H,OAAO,EAAO,EAAG,GAC/E5H,EAAG6H,wBAAwBL,GAC7B,CAEQ3D,eAAehyB,EAAc+hB,GACnC,MAAMoM,EAAKpvB,KAAKsvB,IACV4H,EAAS9H,EAAG+H,aAAal2B,GAK/B,OAHAmuB,EAAGgI,aAAaF,EAAQlU,GACxBoM,EAAGiI,cAAcH,GAEVA,CACT,CAEQtF,2BAA2BN,GACjC,MAAMlC,EAAKpvB,KAAKsvB,IAEhB,MAAO,CACL2C,UAAW7C,EAAGuC,mBAAmBL,EAAS,aAC1CY,SAAU9C,EAAGuC,mBAAmBL,EAAS,YAE7C,CAEQjC,YAAYlB,GAIlB,MAAMmJ,EAAmB,CAAC,SAAU,QAAS,qBAAsB,YAAa,aAChF,IAAI1R,EAAwC,KACxC2I,GAAW,EACf,MAAMgJ,EAAoB,CACxBC,uBAAuB,EACvBC,WAAW,GAGPC,EAA8BC,GAAKA,EAAEC,cAE3CzJ,EAAOvb,iBAAiB1M,EAAqCwxB,GAE7D,IAAK,MAAMG,KAAcP,EAAkB,CACzC,IACE1R,EAAUuI,EAAO2J,WAAWD,EAAYN,GACxChJ,EAA0B,WAAfsJ,CACZ,CAAC,MAAO1wB,GAAK,CACd,GAAIye,EACF,KAEH,CAID,GAFAuI,EAAO9a,oBAAoBnN,EAAqCwxB,IAE3D9R,EACH,MAAM,IAAIpmB,EAAaqB,EAAeL,oBAAqBK,EAAYL,qBAGzE,MAAO,CACL4uB,GAAIxJ,EACJ2I,WAEJ,ECpdF,MAAMwJ,GAYO5J,aAAW,OAAOnuB,KAAKouB,OAAS,CAMhCrf,YAAU,OAAO/O,KAAKg4B,aAAah0B,CAAG,CAMtCgL,aAAW,OAAOhP,KAAKg4B,aAAavuB,CAAG,CAUvCwuB,iBAAe,OAAOj4B,KAAKk4B,WAAa,CAWxCnwB,aAAW,OAAO/H,KAAKg4B,aAAah0B,EAAIhE,KAAKg4B,aAAavuB,CAAG,CAQxE/J,YAAmByuB,EAA2BW,GAC5C9uB,KAAKouB,QAAUD,EACfnuB,KAAKg4B,aAAe,CAAEh0B,EAAG,EAAGyF,EAAG,GAC/BzJ,KAAKk4B,YAAc,EACnBl4B,KAAKspB,IAAM,IAAI4E,GAAaC,EAAQW,EACtC,CAOOlgB,UACL,MAAMuf,EAASnuB,KAAKouB,QAEpBpuB,KAAKspB,IAAI1a,UACTuf,EAAOpf,MAAQ,EACfof,EAAOnf,OAAS,CAClB,CAOOF,SACL,MAAMqf,EAASnuB,KAAKouB,QACd+J,EAAan4B,KAAKg4B,aAClBI,EAAmBtvB,OAAOsvB,iBAEhCD,EAAWn0B,EAAImqB,EAAOkK,YACtBF,EAAW1uB,EAAI0kB,EAAOmK,aAEtBnK,EAAOpf,MAAQopB,EAAWn0B,EAAIo0B,EAC9BjK,EAAOnf,OAASmpB,EAAW1uB,EAAI2uB,EAE/Bp4B,KAAKk4B,YAAcE,EACnBp4B,KAAKspB,IAAIxa,QACX,CASO0d,OAAO+L,EAAwBrsB,GACpC,MAAMod,EAAMtpB,KAAKspB,IACXkP,EAAOD,EAAWE,WACpBnP,EAAIsF,MAAS4J,IAEjBlP,EAAI2G,QACJ3G,EAAIsJ,WAAW4F,EAAKlH,SACpBhI,EAAIuI,qBAAqB2G,EAAMtsB,EAAQssB,EAAKlH,SAC5CiH,EAAWhtB,OAAOW,GAClBod,EAAIiJ,eAAeiG,EAAKlH,SACxBhI,EAAIwH,KAAK0H,EAAK7J,IAAK6J,EAAKlH,SAC1B,CAWOoH,SAASH,EAAwBI,EAAexS,GACrD,MAAMmD,EAAMtpB,KAAKspB,IACXkP,EAAOD,EAAWE,UAClBG,EAAYD,EAAG9N,aAAa1E,GAE7ByS,GAAcJ,IAEnBlP,EAAI+L,YAAYlP,GAChBmD,EAAIsJ,WAAW4F,EAAKlH,SACpBhI,EAAIiJ,eAAeiG,EAAKlH,SAExBsH,EAAUxT,SAAQ,CAACyT,EAAKzG,KACtB,MAAMjH,EAAW0N,EAAI1N,SAGf4G,EAAWtjB,EAAcA,IAAeoqB,EAAIxN,QAASmN,EAAKhN,QAEhElC,EAAI6B,SAASA,EAASnnB,EAAGmnB,EAAS1hB,EAAG0hB,EAASpc,MAAOoc,EAASnc,QAC9Dsa,EAAI6I,iBAAiBqG,EAAKlH,QAASS,EAAU8G,EAAIpN,QAAS2G,GAC1D9I,EAAIwH,KAAK0H,EAAK7J,IAAK6J,EAAKlH,QAAQ,IAEpC,ECnFF,MAAMwH,WAAgB5rB,EAoDT0e,aAAW,OAAO5rB,KAAK+4B,OAAS,CAOhClN,eAAa,OAAO7rB,KAAK+rB,SAAW,CAOpC7f,aAAW,OAAOlM,KAAKqM,OAAS,CAOhCoM,cAAY,OAAOzY,KAAKipB,QAAU,CAalC0P,SAAO,OAAO34B,KAAKg5B,GAAK,CASxBlM,cAAY,OAAO9sB,KAAKi5B,QAAU,CAiBlCC,cAAY,OAAOl5B,KAAKm5B,QAAU,CAalCZ,iBAAe,OAAOv4B,KAAKo5B,WAAa,CACxCb,eAAWz3B,GAChBd,KAAKq5B,cAAgBv4B,EACvBd,KAAKkiB,KAAKphB,GAEVd,KAAKo5B,YAAct4B,CAEvB,CAiBWw4B,kBAAgB,OAAOt5B,KAAKq5B,YAAc,CAc1CtV,eAAa,OAAO/jB,KAAKu5B,SAAW,CAwBpCC,eAAa,OAAOx5B,KAAKy5B,SAAW,CAkBpCC,iBAAe,OAAO15B,KAAK25B,WAAa,CAuBxCC,qBAAmB,OAAO55B,KAAK65B,eAAiB,CAOhDjT,wBAAsB,OAAO5mB,KAAK6mB,kBAAoB,CAyBtDiT,eAAa,OAAO95B,KAAK+5B,SAAW,CACpCD,aAASh5B,GAClB,MAAMqtB,EAASnuB,KAAK+rB,UAAUoC,OAC9BnuB,KAAK+5B,UAAYj5B,EAEN,MAAPA,EACFqtB,EAAO2L,SAAWh5B,EAElBqtB,EAAOlM,gBAAgB,WAE3B,CASW0D,mBAAiB,OAAO3lB,KAAKg6B,UAAUrU,YAAc,CACrDA,iBAAa7kB,GAAuCd,KAAKg6B,UAAUrU,aAAe7kB,CAAK,CAQvFguB,YAAU,OAAO9uB,KAAK+uB,MAAQ,CAC9BD,UAAMhuB,GAAgCd,KAAK+uB,OAASjuB,CAAK,CAqBzD8M,iBAAe,OAAO5N,KAAKqM,QAAQuB,UAAY,CAC/CA,eAAW9M,GAAqCd,KAAKqM,QAAQuB,WAAa9M,CAAK,CAmB/E+M,mBAAiB,OAAO7N,KAAKqM,QAAQwB,YAAc,CACnDA,iBAAa/M,GAAuCd,KAAKqM,QAAQwB,aAAe/M,CAAK,CAmBrFgN,kBAAgB,OAAO9N,KAAKqM,QAAQyB,WAAa,CACjDA,gBAAYhN,GAAsCd,KAAKqM,QAAQyB,YAAchN,CAAK,CAkBlFwM,eAAa,OAAOtN,KAAKqM,QAAQiB,QAAU,CAC3CA,aAASxM,GAClBd,KAAKqM,QAAQiB,SAAWxM,EACpBd,KAAKo5B,aAAap5B,KAAKo5B,YAAYa,aAAaj6B,KAAKqM,QAC3D,CAmBWmB,iBAAe,OAAOxN,KAAKqM,QAAQmB,UAAY,CAC/CA,eAAW1M,GACpBd,KAAKqM,QAAQmB,WAAa1M,EACtBd,KAAKo5B,aAAap5B,KAAKo5B,YAAYa,aAAaj6B,KAAKqM,QAC3D,CAqBWqB,gBAAc,OAAO1N,KAAKqM,QAAQqB,SAAW,CAC7CA,cAAU5M,GACnBd,KAAKqM,QAAQqB,UAAY5M,EACrBd,KAAKo5B,aAAap5B,KAAKo5B,YAAYa,aAAaj6B,KAAKqM,QAC3D,CAeW0B,UAAQ,OAAO/N,KAAKqM,QAAQ0B,GAAK,CACjCA,QAAIjN,GACb,MAAMoL,EAASlM,KAAKqM,QACdoM,EAAUzY,KAAKipB,SAErB/c,EAAO6B,IAAMjN,EACboL,EAAOgD,eACPuJ,EAAQE,MACV,CAWW3L,aAAW,OAAOhN,KAAKipB,SAASjc,MAAQ,CASxCD,WAAS,OAAO/M,KAAKipB,SAASlc,IAAM,CASpCqT,WAAS,OAAOpgB,KAAKipB,SAAS7I,IAAM,CASpCZ,oBAAkB,OAAOxf,KAAKipB,SAASzJ,aAAe,CACtDA,kBAAc1e,GAAwCd,KAAKipB,SAASzJ,cAAgB1e,CAAK,CAOzF6e,yBAAuB,OAAO3f,KAAKipB,SAAStJ,kBAAoB,CAChEA,uBAAmB7e,GAA6Cd,KAAKipB,SAAStJ,mBAAqB7e,CAAK,CAaxG6S,iBAAe,OAAO3T,KAAKipB,SAAStV,UAAY,CAChDA,eAAW7S,GAAqCd,KAAKipB,SAAStV,WAAa7S,CAAK,CAahFkf,sBAAoB,OAAOhgB,KAAKipB,SAASjJ,eAAiB,CAC1DA,oBAAgBlf,GAA0Cd,KAAKipB,SAASjJ,gBAAkBlf,CAAK,CAsB1GpB,YAAmBw6B,GAA4B3B,WAC7CA,EAAa,KAAI3qB,WACjBA,EAAa,EAACC,aACdA,EAAe,EAACC,YAChBA,EAAc,EAACR,SACfA,EAAW,KAAIE,WACfA,EAAa,KAAIE,UACjBA,EAAY,KAAIK,IAChBA,EAAM,GAAEyR,cACRA,GAAgB,EAAIG,mBACpBA,GAAqB,EAAK3S,OAC1BA,GAAS,EAAID,KACbA,GAAO,EAAIqT,KACXA,GAAO,EAAKzM,WACZA,GAAa,EAAIqM,gBACjBA,GAAkB,EAAK+D,SACvBA,GAAW,EAAK+I,QAChBA,EAAU,CAAE,EAAA0M,SACZA,GAAW,EAAIE,WACfA,GAAa,EAAIE,eACjBA,EAAiB,SAAQhT,kBACzBA,GAAoB,EAAI9N,GACxBA,EAAK,CAAE,EAAAogB,QACPA,EAAU,GAAEvT,aACZA,EAAe,EAAI,GAAEmU,SACrBA,EAAW,EAAChL,MACZA,GAAQ,GACmB,IAC3BjvB,QA0OKG,KAAAm6B,YAAetuB,IACpB,MAAMK,EAASlM,KAAKqM,QACdwf,EAAW7rB,KAAK+rB,UAChBtT,EAAUzY,KAAKipB,SACf6D,EAAU9sB,KAAKi5B,SACfmB,EAAap6B,KAAKu5B,UAClBhB,EAAav4B,KAAKo5B,YAEnBb,IAELv4B,KAAKq6B,MAAM94B,GAAO+B,eAEd82B,EAAWzS,UACbyS,EAAW7uB,OAAOM,GAClB4M,EAAQE,QAGNzM,EAAOgC,UACThC,EAAOgC,UAAU3C,OAAOM,GAExB4M,EAAQlN,OAAOM,GAGjBggB,EAASW,OAAO+L,EAAYrsB,GAC5B4gB,EAAQN,OAAOtgB,GAEXA,EAAOkB,SACTpN,KAAKq6B,MAAM94B,GAAOmC,YAAa,CAC7BwF,IAAKgD,EAAOhD,IACZC,MAAO+C,EAAO/C,MACd4D,KAAMb,EAAOa,KACbvD,WAAY,CACV0C,EAAO1C,WAAW,GAClB0C,EAAO1C,WAAW,GAClB0C,EAAO1C,WAAW,GAClB0C,EAAO1C,WAAW,MAIxB0C,EAAO+F,gBAEPjS,KAAKq6B,MAAM94B,GAAOgC,QAAO,EAanBvD,KAAAs6B,qBAAwBzuB,UAC9B,MAAMK,EAASlM,KAAKqM,QACdoM,EAAUzY,KAAKipB,SACflF,EAAW/jB,KAAKu5B,UAChBtF,EAA0B,QAAhBruB,EAAA5F,KAAKo5B,mBAAW,IAAAxzB,OAAA,EAAAA,EAAE20B,aAE7Bv6B,KAAKq5B,cAAiBpF,IAExB/nB,EAAOgC,WACJuK,EAAQtC,WACR4N,EAAS4D,SACTsM,EAAQvS,YAGd1hB,KAAKm6B,YAAYtuB,EAAM,EAGjB7L,KAAAw6B,eAAiB,CAACC,EAAgBtU,KACxC,MAAMwS,EAAK34B,KAAKg5B,IACVT,EAAav4B,KAAKo5B,YAClBvN,EAAW7rB,KAAK+rB,UAEjBwM,IAELv4B,KAAKq6B,MAAM94B,GAAO+B,eAElBuoB,EAAS6M,SAASH,EAAYI,EAAIxS,GAElCnmB,KAAKq6B,MAAM94B,GAAOgC,QAAO,EA1TzBvD,KAAK+4B,Q5B7lBiB2B,EAACv0B,EAA0BK,KACnD,MAAMC,EAAWF,GAAmBJ,EAAIK,GAExC,IAAKC,EACH,MAAIX,GAASK,GACL,IAAI3G,EAAaqB,EAAeP,kBAAkB6F,GAAKtF,EAAYP,mBAEnE,IAAId,EAAaqB,EAAeT,WAAW+F,EAAI,CAAC,cAAe,WAAYtF,EAAYT,YAIjG,OAAOqG,CAAQ,E4BklBEi0B,CAAWR,GAC1Bl6B,KAAKm5B,SAAWD,EAChBl5B,KAAKq5B,cAAe,EAGpBr5B,KAAKy5B,UAAYD,EACjBx5B,KAAK25B,YAAcD,EACnB15B,KAAK65B,gBAAkBD,EACvB55B,KAAK6mB,mBAAqBD,EAC1B5mB,KAAK+5B,UAAYD,EACjB95B,KAAK+uB,OAASD,EAGd,MAAMX,E5B5lBgBwM,EAACT,EAAmBU,KAC5C,MAAMzM,EAAS+L,EAAKvzB,cAAci0B,GAElC,IAAKzM,EACH,MAAM,IAAI3uB,EAAaqB,EAAeN,iBAAkBM,EAAYN,kBAGtE,OAAO4tB,CAAM,E4BqlBIwM,CAAW36B,KAAK+4B,QAASa,GACxC55B,KAAK+rB,UAAY,IAAIgM,GAAc5J,EAAQW,GAC3C9uB,KAAKqM,QAAU,IAAIY,GAAO,CACxBW,aACAC,eACAC,cACAC,MACAT,WACAE,aACAE,cAEF1N,KAAKipB,SAAW,IAAI1J,GAAY4O,EAAQnuB,KAAKqM,QAAS,CACpDmT,gBACA7L,aACAqM,kBACAL,qBACA3S,SACAD,OACAqT,SAEFpgB,KAAKg6B,UAAY,IAAItU,GAAcC,GACnC3lB,KAAKu5B,UAAY,IAAI7R,GAAS1nB,KAAMmuB,EAAQpK,GAC5C/jB,KAAKo5B,YAAcb,EACnBv4B,KAAK66B,aAAe,IAAIlU,GAAYC,GAAmB,IAAM5mB,KAAK8O,WAClE9O,KAAKg5B,IAAM,IAAI3P,GAAUrpB,KAAK+rB,UAAUzC,KACxCtpB,KAAKi5B,SAAW,IAAItN,GAAgB3rB,KAAK+4B,QAAS/4B,KAAK+rB,UAAWe,GAElE9sB,KAAK86B,kBAAkBhiB,GAEnByf,GAAciB,GAChBx5B,KAAKmvB,MAET,CAOOvgB,UACL5O,KAAKqM,QAAQuC,UACb5O,KAAKg6B,UAAUxT,OACfxmB,KAAK+rB,UAAUnd,UACf5O,KAAKipB,SAASra,UACd5O,KAAK66B,aAAapnB,UAEdzT,KAAKo5B,cACPp5B,KAAKo5B,YAAY2B,oBAAoB/6B,KAAK+rB,UAAUzC,KACpDtpB,KAAKo5B,YAAc,MAGrBp5B,KAAKm5B,SAAS/T,SAAQ4V,GAAUA,EAAOpsB,QAAQ5O,QAE/CA,KAAKq5B,cAAe,CACtB,CAOalK,gDACX,IAAKnvB,KAAKo5B,YACR,MAAM,IAAI55B,EAAaqB,EAAeH,yBAA0BG,EAAYH,0BAG9E,MAAMmrB,EAAW7rB,KAAK+rB,UAChB7f,EAASlM,KAAKqM,QACdoM,EAAUzY,KAAKipB,SACfgS,EAAWj7B,KAAKg6B,UAChBlN,EAAU9sB,KAAKi5B,SACfV,EAAav4B,KAAKo5B,YAClBjL,EAAStC,EAASsC,OAExBnuB,KAAKk7B,uBACLrP,EAASvC,IAAI6F,OACbnvB,KAAKm7B,oBACLjvB,EAAOgD,eAEHlP,KAAK25B,aACP35B,KAAK66B,aAAatnB,OAAO4a,GAGtBnuB,KAAKu5B,UAAUtjB,eAClBjW,KAAKu5B,UAAUhmB,SAGjBvT,KAAKm5B,SAAS/T,SAAQ4V,IACpBA,EAAO7L,KAAKnvB,KAAK,IAGnB,MAAMi0B,QAAgBj0B,KAAKo7B,aAAa7C,GACxCv4B,KAAKq7B,iBAAiB9C,EAAYtE,EAAS,MAC3CnH,EAAQZ,UACR+O,EAAS3wB,MAAMtK,KAAKs6B,4BACd7hB,EAAQlF,SAEQ,MAAlBvT,KAAK+5B,WAAsB5L,EAAOmN,aAAa,cACjDnN,EAAO2L,SAAW95B,KAAK+5B,WAGzB/5B,KAAKq5B,cAAe,EACpBr5B,KAAKm6B,YAAY,GAEjBn6B,KAAKq6B,MAAM94B,GAAO0B,MACpB,GAAC,CAmBYif,KAAKqW,4CAChB,IAAKA,EAAY,OAAO,EAExB,GAAIv4B,KAAKq5B,aAAc,CACrB,MAAMpF,QAAgBj0B,KAAKo7B,aAAa7C,GACxCv4B,KAAKq7B,iBAAiB9C,EAAYtE,EAASj0B,KAAKo5B,aAChDp5B,KAAKm6B,YAAY,EAClB,MAECn6B,KAAKo5B,YAAcb,EACnBv4B,KAAKmvB,OAGP,OAAO,CACT,GAAC,CAOMrgB,SACL,IAAK9O,KAAKq5B,aAAc,OAExBr5B,KAAKm7B,oBAGLn7B,KAAKm6B,YAAY,GAEjB,MAAMprB,MAAEA,EAAKC,OAAEA,GAAWhP,KAAK+rB,UAE/B/rB,KAAKq6B,MAAM94B,GAAO8B,OAAQ,CACxB0L,QACAC,UAEJ,CAiBOusB,cAAcrC,GACfl5B,KAAKq5B,cACPH,EAAQ9T,SAAQ4V,IAAYA,EAAO7L,KAAKnvB,KAAK,IAG/CA,KAAKm5B,SAASqC,QAAQtC,EACxB,CAgBOuC,iBAAiBvC,GACtBA,EAAQ9T,SAAQ4V,IACd,MAAMU,EAAY17B,KAAKm5B,SAAS3wB,QAAQwyB,GAEpCU,EAAY,IAEhBV,EAAOpsB,QAAQ5O,MACfA,KAAKm5B,SAASwC,OAAOD,EAAW,GAAE,GAEtC,CAwDQrB,MAAqCuB,KAAiBC,GAC5D,MAAMC,EAAYD,EAASA,EAAO,GAAK,CAAA,EAEvC77B,KAAK4P,QAAQgsB,iBACX36B,KAAM26B,EACNG,OAAQ/7B,MACL87B,GAEP,CAiCQT,iBAAiB9C,EAAwBtE,EAAkB+H,GACjE,MAAM9vB,EAASlM,KAAKqM,QACdoM,EAAUzY,KAAKipB,SACf4C,EAAW7rB,KAAK+rB,UAGlBiQ,GACFA,EAAejB,oBAAoB/6B,KAAK+rB,UAAUzC,KAGpDiP,EAAW0D,aAAapQ,EAASvC,IAAK2K,GACtCsE,EAAW0B,aAAa/tB,GACxBqsB,EAAW2D,cAAczjB,GAEzBzY,KAAKo5B,YAAcb,EACnBv4B,KAAKq6B,MAAM94B,GAAO6B,kBAAmB,CACnCm1B,cAEJ,CAEc6C,aAAa7C,4CACzB,MAAM4D,EAAgB,IAAItZ,IACpBG,IAAEA,EAAGjB,MAAEA,GAAUwW,EAEvBv4B,KAAKq6B,MAAM94B,GAAO2B,WAAY,CAC5B8f,MACAjB,UAGF,MAAMkS,QAAgBkI,EAAcja,KAAKc,EAAKjB,GAO9C,OALA/hB,KAAKq6B,MAAM94B,GAAO4B,KAAM,CACtB6f,MACAjB,UAGKkS,CACT,GAAC,CAEOkH,oBACN,MAAMtP,EAAW7rB,KAAK+rB,UAChB7f,EAASlM,KAAKqM,QACdoM,EAAUzY,KAAKipB,SAErB4C,EAAS/c,SACT5C,EAAO4C,OAAO+c,EAAS9c,MAAO8c,EAAS7c,QACvCyJ,EAAQ3J,OAAO+c,EAAS9c,MAAO8c,EAAS7c,OAC1C,CAEQ8rB,kBAAkBsB,GAExBt8B,OAAO2xB,KAAK2K,GAAQhX,SAASiX,IAC3Br8B,KAAK8Y,GAAGujB,EAASD,EAAOC,GAAS,GAErC,CAEQnB,uBAEN,MAAMhB,EAAOl6B,KAAK+4B,QACZtgB,EAAUzY,KAAKipB,SACfgS,EAAWj7B,KAAKg6B,UAChBnO,EAAW7rB,KAAK+rB,UAChB4M,EAAK34B,KAAKg5B,IAEiB,CAC/Br0B,GACAA,GACAA,IAGuBygB,SAAQiX,IAC/B5jB,EAAQzL,OAAO8L,GAAGujB,GAASjqB,IACzBpS,KAAKq6B,MAAMgC,EAASjqB,EAAI,IAG1BqG,EAAQ1L,KAAK+L,GAAGujB,GAASjqB,IACvBpS,KAAKq6B,MAAMgC,EAASjqB,EAAI,GACxB,IAGJumB,EAAG7f,GAAGvX,GAAOqC,UAAUwO,IACrB8nB,EAAK7zB,UAAUC,IAAI/D,GAAcI,OAEjCs4B,EAASvU,cAActU,EAAIgY,SAC3B6Q,EAAS3wB,MAAMtK,KAAKw6B,gBAEpBx6B,KAAKq6B,MAAM94B,GAAOqC,SAAS,IAG7B+0B,EAAG7f,GAAGvX,GAAOsC,QAAQ,KACnBq2B,EAAK7zB,UAAU2mB,OAAOzqB,GAAcI,OAEpCkpB,EAASvC,IAAImM,wBACbwF,EAASvU,cAAc5d,QACvBmyB,EAAS3wB,MAAMtK,KAAKs6B,sBAEpBt6B,KAAK8O,SAEL9O,KAAKq6B,MAAM94B,GAAOsC,OAAO,GAE7B,EAh9BuBi1B,GAAOwD,QAAG,eC3EnC,MAAMC,GA8BJ78B,cACEM,KAAKwrB,OAAS/c,IACdzO,KAAK8M,SAAWzD,IAChBrJ,KAAKiO,SAAWjE,EAAgB,EAAG,EAAG,GACtChK,KAAK2X,MAAQ3N,EAAgB,EAAG,EAAG,EACrC,CAOOkF,gWACLT,CAAkCzO,KAAKwrB,OAAQxrB,KAAK8M,SAAU9M,KAAKiO,SAAUjO,KAAK2X,MACpF,ECzBF,MAAM6kB,GAkCJ98B,aAAmBsG,UACjBA,EAAY,CAAA,GACsB,IAc5BhG,KAAay8B,cAAG,EAAGV,OAAQtT,MACjCA,EAAOmD,OAAOnG,YAAYzlB,KAAK08B,YAE3BjU,EAAO6Q,YACT7Q,EAAO9D,KAAKpjB,GAAO4B,KAAMnD,KAAK28B,iBAE9BlU,EAAO9D,KAAKpjB,GAAO0B,MAAOjD,KAAK28B,gBAChC,EAGK38B,KAAe28B,gBAAG,EAAGZ,OAAQtT,MACnC,MAAM0D,EAAYnsB,KAAK08B,WAClBvQ,GAEDA,EAAUyQ,gBAAkBnU,EAAOmD,QACrCnD,EAAOmD,OAAOiR,YAAY1Q,EAC3B,EA7BDnsB,KAAKgG,UAAYA,EACjBhG,KAAK08B,WAAa18B,KAAK88B,iBACzB,CAEO3N,KAAK1G,GACVA,EAAO3P,GAAGvX,GAAO2B,WAAYlD,KAAKy8B,cACpC,CAEO7tB,QAAQ6Z,GACbA,EAAO5Z,IAAItN,GAAO2B,WAAYlD,KAAKy8B,eACnCz8B,KAAK28B,gBAAgB,CAAEZ,OAAQtT,GACjC,CAqBQqU,kBACN,MAAM92B,EACDlG,OAAA0V,OAAA1V,OAAA0V,OAAA,GAAAxV,KAAKgG,WACLw2B,GAAej6B,eAGd4pB,EAAYpmB,GAAcC,EAAUxD,WACpCu6B,EAAOh3B,GAAcC,EAAUg3B,MAIrC,OAFA7Q,EAAU1G,YAAYsX,GAEf5Q,CACT,EA3EuBqQ,GAAAj6B,cAAgB,CAMrCC,UAAW,kBAMXw6B,KAAM,wBChBV,MAAeC,GA2Bbv9B,YAAmBgpB,GACjB1oB,KAAKiO,SAAWya,EAAQza,SACxBjO,KAAKoI,MAAQsgB,EAAQtgB,KACvB,EC/DK,MAAM80B,GAA4B,CACvCC,cAAe,mBACfC,YAAa,8BACbC,cAAe,wBACfC,aAAc,uBACdC,gBAAiB,0BACjBC,aAAc,uBACdC,cAAe,wBACfC,eAAgB,yBAChBC,oBAAqB,8BACrBC,qBAAsB,+BACtBC,gBAAiB,0BACjBC,cAAe,4BACfC,YAAa,0BACbC,WAAY,gBACZC,YAAa,sBACbC,YAAa,sBACbC,aAAc,uBACdC,YAAa,wBACbC,aAAc,yBACdC,eAAgB,2BAChBC,aAAc,yBACdC,kBAAmB,8BACnBC,uBAAwB,mCACxBC,UAAW,sBACXC,aAAc,gCACdC,cAAe,iCACfC,mBAAoB,wBACpBC,aAAc,uBACdC,MAAO,yBACPC,YAAa,+BACbC,OAAQ,2BAGGC,GAA4B,CAMvCC,SAAU,WAMVC,UAAW,YAMXC,SAAU,WAMVC,YAAa,cAMbC,UAAW,YAMXC,WAAY,cCvDd,MAAMC,WAAqBvyB,EAmBzBxN,cACEG,QAsFMG,KAAO0/B,QAAG,EAAG3sB,WAAUC,oBAC7B,MAAMoU,EAAOpnB,KAAK2/B,MAClB,IAAKvY,EAAM,OAEX,MAAMpjB,EAAIgP,EACLD,EAAwBe,QAAQ,GAAG8F,MACnC7G,EAAwB6G,MACvBgmB,EAAMxY,EAAKpjB,GAAuB,QAAlB4B,EAAAkD,OAAO+2B,eAAW,IAAAj6B,EAAAA,EAAAkD,OAAOg3B,aAEzCC,EAAWh5B,GAAM/C,EAAG47B,EAAKA,EAAMxY,EAAKrY,OACpCrE,GAAYq1B,EAAWH,GAAOxY,EAAKrY,MAEzC/O,KAAKiM,QAAQX,MAAMy0B,GACnB//B,KAAKggC,QAAQ35B,UAAUC,IAAItG,KAAKigC,aAEhCjgC,KAAK4P,QAAQjL,GAA4B+F,EAAS,EAG5C1K,KAAAsX,UAAY,EAAGzL,kBACrB,MAAMgB,EAAS7M,KAAKiM,QACdmb,EAAOpnB,KAAK2/B,MAClB,IAAKvY,EAAM,OAEXva,EAAOf,iBAAiBD,EAAM7H,GAC9B6I,EAAOtB,OAAO,GAEd,MAAMq0B,EAAMxY,EAAKpjB,GAAuB,QAAlB4B,EAAAkD,OAAO+2B,eAAW,IAAAj6B,EAAAA,EAAAkD,OAAOg3B,aAEzCp1B,GADW3D,GAAM8F,EAAO/L,IAAK8+B,EAAKA,EAAMxY,EAAKrY,OACtB6wB,GAAOxY,EAAKrY,MAEzC/O,KAAK4P,QAAQjL,GAAuB+F,EAAS,EAGvC1K,KAAUkgC,WAAG,KACNlgC,KAAK2/B,QAGlB3/B,KAAKggC,QAAQ35B,UAAU2mB,OAAOhtB,KAAKigC,aAEnCjgC,KAAK4P,QAAQjL,IAAyB,EA3HtC,MAAMu1B,EAAO9zB,SAASL,cAAcvE,IAC9B2+B,EAAQ/5B,SAASL,cAAcvE,IAC/B4+B,EAAQh6B,SAASL,cAAcvE,IAC/B6+B,EAASj6B,SAASL,cAAcvE,IAEtC04B,EAAKoG,WAAY,EAEjBH,EAAM1a,YAAY4a,GAClBF,EAAM1a,YAAY2a,GAClBlG,EAAKzU,YAAY0a,GAEjBngC,KAAK4rB,OAASsO,EACdl6B,KAAKugC,QAAUJ,EACfngC,KAAKggC,QAAUI,EACfpgC,KAAKwgC,SAAWH,EAEhBrgC,KAAKgY,YAAc,IAAI9F,GACvBlS,KAAKuW,YAAc,IAAI7C,GACvB1T,KAAKiM,QAAU,IAAI7B,GAAO,CAAEU,SAAU,EAAGI,MAAOlG,GAAgBoG,OAAQpH,GAAKA,IAC7EhE,KAAK2/B,MAAQ,CACX37B,EAAG,EACHyF,EAAG,EACHsF,MAAO,EACPC,OAAQ,EACRyxB,KAAM,EACNC,MAAO,EACPC,OAAQ,EACRC,IAAK,GAEP5gC,KAAKigC,YAAc/C,GAA0B6B,KAC/C,CAEO5P,KAAKnpB,GACV,MAAM4S,EAAa5Y,KAAKgY,YAClBa,EAAa7Y,KAAKuW,YAExBvW,KAAK4rB,OAAOvlB,UAAUC,IAAIN,EAAUg4B,YACpCh+B,KAAKugC,QAAQl6B,UAAUC,IAAIN,EAAUi4B,aACrCj+B,KAAKggC,QAAQ35B,UAAUC,IAAIN,EAAUk4B,aACrCl+B,KAAKwgC,SAASn6B,UAAUC,IAAIN,EAAUm4B,cACtCn+B,KAAKigC,YAAcj6B,EAAU+4B,MAE7BnmB,EAAWE,GAAGnU,GAA4B3E,KAAK0/B,SAC/C7mB,EAAWC,GAAGnU,GAA4B3E,KAAK0/B,SAE/C9mB,EAAWE,GAAGnU,GAA0B3E,KAAKkgC,YAC7CrnB,EAAWC,GAAGnU,GAA0B3E,KAAKkgC,YAE7CtnB,EAAWE,GAAGnU,GAAuB3E,KAAKsX,WAC1CuB,EAAWC,GAAGnU,GAAuB3E,KAAKsX,WAE1CsB,EAAWrF,OAAOvT,KAAK4rB,QACvB/S,EAAWtF,OAAOvT,KAAK4rB,QAEvB5rB,KAAK8O,QACP,CAEOF,UACL,MAAMgK,EAAa5Y,KAAKgY,YAClBa,EAAa7Y,KAAKuW,YAExBvW,KAAK4rB,OAAO5lB,UAAY,GACxBhG,KAAKugC,QAAQv6B,UAAY,GACzBhG,KAAKggC,QAAQh6B,UAAY,GACzBhG,KAAKwgC,SAASx6B,UAAY,GAE1B4S,EAAW/J,MACXgK,EAAWhK,MACX+J,EAAWnF,UACXoF,EAAWpF,SACb,CAEO3E,SACL9O,KAAK2/B,MAAQ3/B,KAAKugC,QAAQlZ,uBAC5B,CAEOwZ,YAAYn2B,GACjB,MAAMqE,EAAQ/O,KAAK2/B,MAAM5wB,MACnB+xB,EAAkB/5B,GAAM2D,EAAU,EAAG,GAE3C1K,KAAKwgC,SAAStf,MAAMnS,MAA6B,IAAlB+xB,EAAH,IAC5B9gC,KAAKggC,QAAQ9e,MAAMoK,UAAY,cAAcwV,EAAkB/xB,MACjE,EClGF,MAAMgyB,WAAoB9D,GACbzpB,cAAY,OAAOxT,KAAKghC,cAAcpV,MAAQ,CAgBzDlsB,aAAmBuO,SACjBA,EAAWixB,GAA0BG,SAAQj3B,MAC7CA,EAAQ,MAC0B,IAClCvI,MAAM,CACJoO,WACA7F,UA8DIpI,KAASinB,UAAG,KAClBjnB,KAAKghC,cAAclyB,QAAQ,EAGrB9O,KAAaihC,cAAG,KACtB,MAAMlf,EAAQ/hB,KAAKkhC,OACdnf,IAEL/hB,KAAKmhC,aAAepf,EAAMF,OAAOsC,YACjCnkB,KAAKghC,cAAcH,YAAY7gC,KAAKmhC,aAAenhC,KAAK+K,WAAU,EAG5D/K,KAAiBohC,kBAAG,KAC1B,MAAMrf,EAAQ/hB,KAAKkhC,OACdnf,IAEL/hB,KAAK+K,UAAYgX,EAAMF,OAAO/W,SAC9B9K,KAAKghC,cAAcH,YAAY7gC,KAAKmhC,aAAenhC,KAAK+K,WAAU,EAG5D/K,KAAA0/B,QAAWh1B,IACjB,MAAMqX,EAAQ/hB,KAAKkhC,OACbG,EAAarhC,KAAKshC,YACxB,IAAKvf,IAAUsf,EAAY,OAE3B,MAAMjf,EAASL,EAAMI,WAErBJ,EAAMF,OAAOG,QAEb,MAAMoE,EAAOrE,EAAMF,OAAO/W,SAAWJ,EACrCqX,EAAMF,OAAOsC,YAAciC,EAC3BrE,EAAMF,OAAO0f,cAAc,IAAIC,YAAYj8B,GAAyB,CAAEk8B,OAAQ,CAAErb,WAEhFib,EAAWzV,OAAOvlB,UAAUC,IAAI+6B,EAAWr7B,UAAU+4B,OACrD/+B,KAAK0hC,YAAc1hC,KAAK2hC,cAAgBvf,CAAM,EAGxCpiB,KAAA4hC,WAAcl3B,IACpB,MAAMqX,EAAQ/hB,KAAKkhC,OACnB,IAAKnf,EAAO,OAEZ,MAAMqE,EAAOrE,EAAMF,OAAO/W,SAAWJ,EACrCqX,EAAMF,OAAOsC,YAAciC,EAC3BrE,EAAMF,OAAO0f,cAAc,IAAIC,YAAYj8B,GAAyB,CAAEk8B,OAAQ,CAAErb,UAAS,EAGnFpmB,KAAUkgC,WAAG,KACnB,MAAMne,EAAQ/hB,KAAKkhC,OACbG,EAAarhC,KAAKshC,YAEpBvf,GAASsf,IACNrhC,KAAK0hC,YAAe1hC,KAAK2hC,eAC5B3hC,KAAK2hC,aAAe5f,EAAMF,OAAOuC,OAC9BlF,OAAM,KAAY,IAGrBlf,KAAK2hC,aAAahyB,MAAK,KACrB3P,KAAK2hC,aAAe,IAAI,IAG1BN,EAAWzV,OAAOvlB,UAAU2mB,OAAOqU,EAAWr7B,UAAU+4B,SAI5D/+B,KAAK0hC,YAAa,CAAK,EA3HvB1hC,KAAKiO,SAAWA,EAChBjO,KAAKoI,MAAQA,EAEbpI,KAAKshC,YAAc,KACnBthC,KAAKghC,cAAgB,IAAIvB,GAEzBz/B,KAAKkhC,OAAS,KACdlhC,KAAK0hC,YAAa,EAClB1hC,KAAKmhC,aAAe,EACpBnhC,KAAK+K,UAAY,EACjB/K,KAAK2hC,aAAe,IACtB,CAEOxS,KAAK1G,EAAiB4Y,SAC3B,MAAMtf,EAAyB,QAAjBnc,EAAA6iB,EAAO8P,kBAAU,IAAA3yB,OAAA,EAAAA,EAAE20B,aAC3B/mB,EAAUxT,KAAKwT,QACfquB,EAAe7hC,KAAKghC,cACpBc,EAAmBT,EAAWr7B,UAAUg5B,YAEzCjd,GAAUA,EAAML,WAKrBlO,EAAQnN,UAAU2mB,OAAO8U,GACzBtuB,EAAQnN,UAAUC,IAAI+6B,EAAWr7B,UAAU83B,eAC3CrV,EAAO3P,GAAGvX,GAAO8B,OAAQrD,KAAKinB,WAC9BlF,EAAMF,OAAOjP,iBAAiB1M,GAAkClG,KAAKihC,eACrElf,EAAMF,OAAOjP,iBAAiB1M,GAAsClG,KAAKohC,mBACzErf,EAAMF,OAAOjP,iBAAiBrN,GAAyBvF,KAAKihC,eAC5DY,EAAa1S,KAAKkS,EAAWr7B,WAC7B67B,EAAa/oB,GAAGnU,GAA4B3E,KAAK0/B,SACjDmC,EAAa/oB,GAAGnU,GAAuB3E,KAAK4hC,YAC5CC,EAAa/oB,GAAGnU,GAA0B3E,KAAKkgC,YAE/ClgC,KAAKkhC,OAASnf,EACd/hB,KAAKmhC,aAAepf,EAAMF,OAAOsC,YACjCnkB,KAAK+K,UAAYgX,EAAMF,OAAO/W,SAC9B9K,KAAKshC,YAAcD,EAEnBQ,EAAahB,YAAY7gC,KAAKmhC,aAAenhC,KAAK+K,YApBhDyI,EAAQnN,UAAUC,IAAIw7B,EAqB1B,CAEOlzB,QAAQ6Z,GACb,MAAM1G,EAAQ/hB,KAAKkhC,OAEnBzY,EAAO5Z,IAAItN,GAAO8B,OAAQrD,KAAKinB,WAE3BlF,IACFA,EAAMF,OAAOxO,oBAAoBnN,GAAkClG,KAAKihC,eACxElf,EAAMF,OAAOxO,oBAAoBnN,GAAsClG,KAAKohC,mBAC5Erf,EAAMF,OAAOxO,oBAAoB9N,GAAyBvF,KAAKihC,gBAGjEjhC,KAAKghC,cAAcpyB,UACnB5O,KAAKkhC,OAAS,KACdlhC,KAAK2hC,aAAe,IACtB,ECtFF,MAAMI,WAAmB9E,GAWvBv9B,aAAmBuO,SACjBA,EAAWixB,GAA0BK,UAASn3B,MAC9CA,EAAQ,MAC0B,IAClCvI,MAAM,CACJoO,WACA7F,UAwDIpI,KAAQgiC,SAAG,KACjB,MAAMjgB,EAAQ/hB,KAAKkhC,OACdnf,IAED/hB,KAAKiiC,QACPlgB,EAAMF,OAAOuC,OAEbrC,EAAMF,OAAOG,QACd,EAGKhiB,KAAOkiC,QAAG,KAChB,IAAKliC,KAAKshC,YAAa,OAEvB,MAAM9tB,EAAUxT,KAAKwT,QACfxN,EAAYhG,KAAKshC,YAAYt7B,UAEnCwN,EAAQnN,UAAUC,IAAIN,EAAUq4B,cAChC7qB,EAAQnN,UAAU2mB,OAAOhnB,EAAUo4B,aACnC5qB,EAAQ2uB,MAAQ,cAEhBniC,KAAKiiC,SAAU,CAAK,EAGdjiC,KAAQoiC,SAAG,KACjB,IAAKpiC,KAAKshC,YAAa,OAEvB,MAAM9tB,EAAUxT,KAAKwT,QACfxN,EAAYhG,KAAKshC,YAAYt7B,UAEnCwN,EAAQnN,UAAUC,IAAIN,EAAUo4B,aAChC5qB,EAAQnN,UAAU2mB,OAAOhnB,EAAUq4B,cACnC7qB,EAAQ2uB,MAAQ,aAEhBniC,KAAKiiC,SAAU,CAAI,EAvFnBjiC,KAAKwT,QAAUpN,SAASL,cAAcG,IAEtClG,KAAKkhC,OAAS,KACdlhC,KAAKiiC,SAAU,EACfjiC,KAAKshC,YAAc,IACrB,CAEOnS,KAAK1G,EAAiB4Y,SAC3B,MAAM7tB,EAAUxT,KAAKwT,QACfuO,EAAyB,QAAjBnc,EAAA6iB,EAAO8P,kBAAU,IAAA3yB,OAAA,EAAAA,EAAE20B,aAC3Bv0B,EAAYq7B,EAAWr7B,UACvB87B,EAAmB97B,EAAUg5B,YAEnC,IAAKjd,IAAUA,EAAML,UAEnB,YADAlO,EAAQnN,UAAUC,IAAIw7B,GAIxBtuB,EAAQnN,UAAUC,IAAIN,EAAU63B,iBAChCrqB,EAAQnN,UAAU2mB,OAAO8U,GAEzB,MAAM1f,EAASL,EAAMI,WACrBniB,KAAKkhC,OAASnf,EACd/hB,KAAKiiC,QAAU7f,EACfpiB,KAAKshC,YAAcD,EAEfjf,EACFpiB,KAAKoiC,WAELpiC,KAAKkiC,UAGP1uB,EAAQZ,iBAAiB1M,EAAsBlG,KAAKgiC,UACpDjgB,EAAMF,OAAOjP,iBAAiB1M,GAA2BlG,KAAKkiC,SAC9DngB,EAAMF,OAAOjP,iBAAiB1M,GAA4BlG,KAAKoiC,SACjE,CAEOxzB,UACL,MAAMmT,EAAQ/hB,KAAKkhC,OACb1tB,EAAUxT,KAAKwT,QAEhBuO,IAELvO,EAAQxN,UAAY,GACpBwN,EAAQH,oBAAoBnN,EAAsBlG,KAAKgiC,UACvDjgB,EAAMF,OAAOxO,oBAAoBnN,GAA2BlG,KAAKkiC,SACjEngB,EAAMF,OAAOxO,oBAAoBnN,GAA4BlG,KAAKoiC,UAElEpiC,KAAKkhC,OAAS,KACdlhC,KAAKiiC,SAAU,EACfjiC,KAAKshC,YAAc,KACrB,ECpEF,MAAMe,WAAsBpF,GACfzpB,cAAY,OAAOxT,KAAK+4B,OAAS,CAa5Cr5B,aAAmBuO,SACjBA,EAAWixB,GAA0BM,WAAUp3B,MAC/CA,EAAQ,MAC0B,IAClCvI,MAAM,CACJoO,WACA7F,UA4EIpI,KAASinB,UAAG,KAClBjnB,KAAKghC,cAAclyB,SACnB9O,KAAKsiC,gBAAgB,EAGftiC,KAAQgiC,SAAG,KACjB,MAAMjgB,EAAQ/hB,KAAKkhC,OACdnf,IAAS/hB,KAAK+4B,QAAQwJ,WAE3BxgB,EAAMF,OAAOmC,OAASjC,EAAMF,OAAOmC,MAAK,EAGlChkB,KAAewiC,gBAAG,KACxB,MAAMlwB,EAAStS,KAAKyiC,UACd1gB,EAAQ/hB,KAAKkhC,OACbG,EAAarhC,KAAKshC,YAExB,IAAKvf,IAAUsf,EAAY,OAE3B,MAAMr7B,EAAYq7B,EAAWr7B,UAEzB+b,EAAMF,OAAOmC,OAAiC,IAAxBjC,EAAMF,OAAOoC,QACrC3R,EAAOjM,UAAUC,IAAIN,EAAUu4B,cAC/BjsB,EAAOjM,UAAU2mB,OAAOhnB,EAAUs4B,kBAElChsB,EAAOjM,UAAUC,IAAIN,EAAUs4B,gBAC/BhsB,EAAOjM,UAAU2mB,OAAOhnB,EAAUu4B,eAGpCv+B,KAAKsiC,gBAAgB,EAeftiC,KAAA0/B,QAAWh1B,IACjB,MAAMqX,EAAQ/hB,KAAKkhC,OACbG,EAAarhC,KAAKshC,YAExB,IAAKvf,IAAUsf,EAAY,OAE3B,MAAMr7B,EAAYq7B,EAAWr7B,UAE7B+b,EAAMF,OAAOoC,OAASvZ,EAEtB1K,KAAK+4B,QAAQ1yB,UAAUC,IAAIN,EAAU+4B,OACrCsC,EAAWqB,YAAYr8B,UAAUC,IAAIN,EAAU+4B,OAE/C/+B,KAAKsiC,gBAAgB,EAGftiC,KAAAsX,UAAa5M,IACnB,MAAMqX,EAAQ/hB,KAAKkhC,OACdnf,IAELA,EAAMF,OAAOoC,OAASvZ,EAEpBqX,EAAMF,OAAOmC,QADXtZ,EAAW,GAMf1K,KAAKsiC,iBAAgB,EAGftiC,KAAUkgC,WAAG,KACnB,MAAMmB,EAAarhC,KAAKshC,YACxB,IAAKD,EAAY,OAEjB,MAAMr7B,EAAYq7B,EAAWr7B,UAE7BhG,KAAK+4B,QAAQ1yB,UAAU2mB,OAAOhnB,EAAU+4B,OACxCsC,EAAWqB,YAAYr8B,UAAU2mB,OAAOhnB,EAAU+4B,MAAM,EAGlD/+B,KAAcsiC,eAAG,KACvB,MAAMvgB,EAAQ/hB,KAAKkhC,OACbhH,EAAOl6B,KAAK+4B,QAClB,IAAKhX,EAAO,OAEZ,IAAKA,EAAMQ,WAET,YADA2X,EAAKqI,UAAW,GAIlBrI,EAAKqI,UAAW,EAEhB,MAAMte,EAASlC,EAAMF,OAAOmC,MAAQ,EAAIjC,EAAMF,OAAOoC,OAErDjkB,KAAKghC,cAAcH,YAAY5c,EAAO,EA3KtCjkB,KAAKshC,YAAc,KACnBthC,KAAKghC,cAAgB,IAAIvB,GACzBz/B,KAAK88B,kBAEL98B,KAAKkhC,OAAS,IAChB,CAEO/R,KAAK1G,EAAiB4Y,SAC3B,MAAMtf,EAAyB,QAAjBnc,EAAA6iB,EAAO8P,kBAAU,IAAA3yB,OAAA,EAAAA,EAAE20B,aAC3BL,EAAOl6B,KAAK+4B,QACZzmB,EAAStS,KAAKyiC,UACdZ,EAAe7hC,KAAKghC,cACpBh7B,EAAYq7B,EAAWr7B,UACvB87B,EAAmB97B,EAAUg5B,YAE9Bjd,GAAUA,EAAML,WAKrBwY,EAAK7zB,UAAU2mB,OAAO8U,GACtB5H,EAAK7zB,UAAUC,IAAIN,EAAU63B,iBAC7B3D,EAAK7zB,UAAUC,IAAIN,EAAU+3B,aAC7BzrB,EAAOjM,UAAUC,IAAIN,EAAU63B,iBAE3B9b,EAAMF,OAAOmC,MACf1R,EAAOjM,UAAUC,IAAIN,EAAUu4B,cAE/BjsB,EAAOjM,UAAUC,IAAIN,EAAUs4B,gBAGjC7V,EAAO3P,GAAGvX,GAAO8B,OAAQrD,KAAKinB,WAC9BiT,EAAKtnB,iBAAiB1M,GAA+BlG,KAAKinB,WAC1D3U,EAAOM,iBAAiB1M,EAAsBlG,KAAKgiC,UAEnDjgB,EAAMF,OAAOjP,iBAAiB1M,GAAoClG,KAAKwiC,iBACvEzgB,EAAMF,OAAOjP,iBAAiB1M,GAAkClG,KAAKsiC,gBACrEvgB,EAAMF,OAAOjP,iBAAiB1M,GAAsClG,KAAKsiC,gBAEzET,EAAa1S,KAAKnpB,GAClB67B,EAAa/oB,GAAGnU,GAA4B3E,KAAK0/B,SACjDmC,EAAa/oB,GAAGnU,GAAuB3E,KAAKsX,WAC5CuqB,EAAa/oB,GAAGnU,GAA0B3E,KAAKkgC,YAE/ClgC,KAAKshC,YAAcD,EACnBrhC,KAAKkhC,OAASnf,EAEd/hB,KAAKsiC,kBA/BHpI,EAAK7zB,UAAUC,IAAIw7B,EAgCvB,CAEOlzB,QAAQ6Z,GACb,MAAM1G,EAAQ/hB,KAAKkhC,OACb5uB,EAAStS,KAAKyiC,UACdvI,EAAOl6B,KAAK+4B,QAElBmB,EAAKl0B,UAAY,GACjBsM,EAAOtM,UAAY,GAEnByiB,EAAO5Z,IAAItN,GAAO8B,OAAQrD,KAAKinB,WAC/BiT,EAAK7mB,oBAAoBnN,GAA+BlG,KAAKinB,WAC7D3U,EAAOe,oBAAoBnN,EAAsBlG,KAAKgiC,UAElDjgB,IACFA,EAAMF,OAAOxO,oBAAoBnN,GAAoClG,KAAKwiC,iBAC1EzgB,EAAMF,OAAOxO,oBAAoBnN,GAAkClG,KAAKsiC,gBACxEvgB,EAAMF,OAAOxO,oBAAoBnN,GAAsClG,KAAKsiC,iBAG9EtiC,KAAKshC,YAAc,KACnBthC,KAAKghC,cAAcpyB,UACnB5O,KAAKkhC,OAAS,IAChB,CAkCQpE,kBACN,MAAM5C,EAAO9zB,SAASL,cAAcG,IAC9By8B,EAAWv8B,SAASL,cAAcG,IAExCg0B,EAAKzU,YAAYzlB,KAAKghC,cAAcpV,QACpCsO,EAAKzU,YAAYkd,GACjBzI,EAAKiI,MAAQ,cAEbniC,KAAK+4B,QAAUmB,EACfl6B,KAAKyiC,UAAYE,CACnB,EC7IF,MAAMC,WAAyB3F,GAU7Bv9B,aAAmBuO,SACjBA,EAAWixB,GAA0BM,WAAUp3B,MAC/CA,EAAQ,MAC0B,IAClCvI,MAAM,CACJoO,WACA7F,UA4CIpI,KAAQgiC,SAAG,KACjB,MAAMjG,EAAS/7B,KAAK6iC,UACf9G,IAEDrzB,KACF1I,KAAK8iC,kBAEL9iC,KAAK+iC,mBAAmBhH,GACzB,EAwCK/7B,KAAmBgjC,oBAAG,KAC5B,MAAMxvB,EAAUxT,KAAKwT,QACf6tB,EAAarhC,KAAKshC,YAExB,IAAKD,EAAY,OAEjB,MAAMr7B,EAAYq7B,EAAWr7B,UAEzB0C,MACF8K,EAAQnN,UAAUC,IAAIN,EAAUy4B,wBAChCjrB,EAAQnN,UAAU2mB,OAAOhnB,EAAUw4B,qBAEnChrB,EAAQnN,UAAUC,IAAIN,EAAUw4B,mBAChChrB,EAAQnN,UAAU2mB,OAAOhnB,EAAUy4B,wBACpC,EAvGDz+B,KAAKwT,QAAUpN,SAASL,cAAcG,IACtClG,KAAKwT,QAAQ2uB,MAAQ,oBACrBniC,KAAKshC,YAAc,KACnBthC,KAAK6iC,UAAY,IACnB,CAEO1T,KAAK1G,EAAiB4Y,GAC3B,MAAM7tB,EAAUxT,KAAKwT,QACfxN,EAAYq7B,EAAWr7B,UAExBhG,KAAKijC,wBAKVzvB,EAAQnN,UAAUC,IAAIN,EAAU63B,iBAChCrqB,EAAQnN,UAAU2mB,OAAOhnB,EAAUg5B,aACnCxrB,EAAQZ,iBAAiB1M,EAAsBlG,KAAKgiC,UACpDhiC,KAAKkjC,yBAEDx6B,KACF8K,EAAQnN,UAAUC,IAAIN,EAAUy4B,wBAEhCjrB,EAAQnN,UAAUC,IAAIN,EAAUw4B,mBAGlCx+B,KAAKshC,YAAcD,EACnBrhC,KAAK6iC,UAAYpa,EAAOmD,QAhBtBpY,EAAQnN,UAAUC,IAAIN,EAAUg5B,YAiBpC,CAEOpwB,UACL,MAAM4E,EAAUxT,KAAKwT,QAErBA,EAAQxN,UAAY,GACpBwN,EAAQH,oBAAoBnN,EAAsBlG,KAAKgiC,UACvDhiC,KAAKmjC,4BAELnjC,KAAKshC,YAAc,KACnBthC,KAAK6iC,UAAY,IACnB,CAaQI,uBACN,OAAO/8B,GAA2Bk9B,MAAKz6B,KAASvC,SAASuC,IAC3D,CAEQo6B,mBAAmB58B,GACzB,IAAK,MAAMwC,KAAOzC,GAA4B,CAC5C,MAAMm9B,EAAUl9B,EAAGwC,GACnB,GAAI06B,EAEF,YADAA,EAAQC,KAAKn9B,EAGhB,CACH,CAEQ28B,kBACN,IAAK,MAAMn6B,KAAOzC,GAAyB,CACzC,MAAMqjB,EAAOnjB,SAASuC,GAEtB,GAAI4gB,EAEF,YADAA,EAAK+Z,KAAKl9B,SAGb,CACH,CAEQ88B,yBACNh9B,GAA0Bkf,SAAQiX,IAChCj2B,SAASwM,iBAAiBypB,EAASr8B,KAAKgjC,oBAAoB,GAEhE,CAEQG,4BACNj9B,GAA0Bkf,SAAQiX,IAChCj2B,SAASiN,oBAAoBgpB,EAASr8B,KAAKgjC,oBAAoB,GAEnE,ECzGF,MAAMO,WAAkBtG,GAWtBv9B,aAAmBuO,SACjBA,EAAWixB,GAA0BK,UAASn3B,MAC9CA,EAAQ,MAC0B,IAClCvI,MAAM,CACJoO,WACA7F,UA+CIpI,KAAaihC,cAAG,KACtB,MAAMlf,EAAQ/hB,KAAKkhC,OACdnf,IAEL/hB,KAAKmhC,aAAepf,EAAMF,OAAOsC,YACjCnkB,KAAKsiC,iBAAgB,EAGftiC,KAAiBohC,kBAAG,KAC1B,MAAMrf,EAAQ/hB,KAAKkhC,OACdnf,IAEL/hB,KAAK+K,UAAYgX,EAAMF,OAAO/W,SAC9B9K,KAAKsiC,iBAAgB,EAGftiC,KAAAwjC,oBAAuBpxB,IAC7BpS,KAAKmhC,aAAe/uB,EAAIqvB,OAAOrb,KAC/BpmB,KAAKsiC,gBAAgB,EA9DrBtiC,KAAKwT,QAAUpN,SAASL,cAAcG,IAEtClG,KAAKkhC,OAAS,KACdlhC,KAAKmhC,aAAe,EACpBnhC,KAAK+K,UAAY,CACnB,CAEOokB,KAAK1G,EAAiB4Y,SAC3B,MAAMtf,EAAyB,QAAjBnc,EAAA6iB,EAAO8P,kBAAU,IAAA3yB,OAAA,EAAAA,EAAE20B,aAC3B/mB,EAAUxT,KAAKwT,QACfxN,EAAYq7B,EAAWr7B,UAExB+b,GAAUA,EAAML,WAKrBlO,EAAQnN,UAAUC,IAAIN,EAAU64B,oBAChCrrB,EAAQnN,UAAU2mB,OAAOhnB,EAAUg5B,aAEnCjd,EAAMF,OAAOjP,iBAAiB1M,GAAkClG,KAAKihC,eACrElf,EAAMF,OAAOjP,iBAAiB1M,GAAsClG,KAAKohC,mBACzErf,EAAMF,OAAOjP,iBAAiBrN,GAAyBvF,KAAKwjC,qBAE5DxjC,KAAKkhC,OAASnf,EACd/hB,KAAKmhC,aAAepf,EAAMF,OAAOsC,YACjCnkB,KAAK+K,UAAYgX,EAAMF,OAAO/W,SAE9B9K,KAAKsiC,kBAfH9uB,EAAQnN,UAAUC,IAAIN,EAAUg5B,YAgBpC,CAEOpwB,UACL,MAAMmT,EAAQ/hB,KAAKkhC,OAEdnf,IAEL/hB,KAAKwT,QAAQxN,UAAY,GACzB+b,EAAMF,OAAOxO,oBAAoBnN,GAAkClG,KAAKihC,eACxElf,EAAMF,OAAOxO,oBAAoBnN,GAAsClG,KAAKohC,mBAC5Erf,EAAMF,OAAOxO,oBAAoB9N,GAAyBvF,KAAKwjC,qBAE/DxjC,KAAKkhC,OAAS,KAChB,CAuBQoB,iBACN,MAAMlc,EAAOpmB,KAAKmhC,aACZsC,EAAav/B,KAAKw/B,MAAMtd,EAAO,IAC/Bud,EAAcz/B,KAAKw/B,MAAMtd,EAAoB,GAAbqd,GAChCG,EAAuBD,EAAc,GAAK,IAAIA,IAAgBA,EAE9D74B,EAAW9K,KAAK+K,UAChB84B,EAAiB3/B,KAAKw/B,MAAM54B,EAAW,IACvCg5B,EAAkB5/B,KAAKw/B,MAAM54B,EAA4B,GAAjB+4B,GACxCE,EAA2BD,EAAkB,GAAK,IAAIA,IAAoBA,EAEhF9jC,KAAKwT,QAAQwwB,UAAe,GAAAP,KAAcG,OAA0BC,KAAkBE,GACxF,EC9EF,MAAME,WAAgBhH,GAqBpBv9B,aAAmBwkC,YACjBA,GAAc,EAAIj2B,SAClBA,EAAWixB,GAA0BE,UAASh3B,MAC9CA,EAAQ,MACmB,IAC3BvI,MAAM,CACJoO,WACA7F,UA0CIpI,KAAQgiC,SAAG,KACjB,MAAMvZ,EAASzoB,KAAKmkC,QACdD,EAAclkC,KAAKkkC,YAEzB,IAAKzb,IAAWyb,EAAa,OAE7B,MAAMh7B,IACJA,EAAMuf,EAAO7a,WAAUzE,MACvBA,EAAQsf,EAAO5a,aAAYd,KAC3BA,EAAO0b,EAAO3a,YAAWhD,SACzBA,EAAW,KACTlD,GAAgBs8B,GAEpBzb,EAAOvc,OAAOuD,UAAU,CACtBvG,MACAC,QACA4D,OACAjC,YACA,EAoCI9K,KAAUokC,WAAG,EAAGrI,OAAQtT,MAC9B,MAAM4b,EAAUrkC,KAAKskC,WACfC,EAAcvkC,KAAKwkC,eACnBt4B,EAASuc,EAAOvc,OAChB6B,EAAM7B,EAAOoE,mBACbhD,EAAWpB,EAAOgE,YAAYhE,EAAOa,MACrC03B,EAAgB,GAAN12B,EAEV22B,EAAY,GAAKxgC,KAAKE,GACtBugC,EAASD,EAAY32B,EAAM,IAC3B62B,EAAYF,GAAax4B,EAAOhD,IAAMu7B,EAAU,IAAM,IAK5D,GAHAJ,EAAQlf,aAAa,mBAAoB,GAAGwf,KAAUD,EAAYC,KAClEN,EAAQlf,aAAa,oBAAwB,GAAAyf,KAEzCC,SAASv3B,EAASrI,MAAQ4/B,SAASv3B,EAASnI,KAAM,CACpD,MAAM2/B,EAAS,GAAK5gC,KAAKE,GACnBa,GAAOmC,GAAUkG,EAASrI,KAAM,IAAK,KAAOw/B,GAAW,IACvDt/B,GAAOiC,GAAUkG,EAASnI,KAAM,IAAK,KAAOs/B,GAAW,IAEvDM,EAAYD,EAAS5gC,KAAKoD,IAAInC,EAAMF,GACpC+/B,GAAUF,GAAU7/B,EAAM,KAEhCs/B,EAAYpf,aAAa,mBAAoB,GAAG4f,KAAaD,EAASC,KACtER,EAAYpf,aAAa,oBAAwB,GAAA6f,IAClD,MACCT,EAAYpf,aAAa,mBAAoB,IAC7Cof,EAAYpf,aAAa,oBAAqB,GAC/C,EAzHDnlB,KAAKwT,QAAUpN,SAASL,cAAcG,IACtClG,KAAKwT,QAAQ2uB,MAAQ,aACrBniC,KAAKkkC,YAAcA,EACnBlkC,KAAKilC,qBACLjlC,KAAKmkC,QAAU,IACjB,CAEOhV,KAAK1G,EAAiB4Y,GAC3B,MAAM7tB,EAAUxT,KAAKwT,QAEhBiV,EAAO6Q,YAGVt5B,KAAKokC,WAAW,CAAErI,OAAQtT,IAF1BA,EAAO9D,KAAKpjB,GAAO0B,MAAOjD,KAAKokC,YAKjC,MAAMc,EAAY7D,EAAWr7B,UAAU84B,aACvCtrB,EAAQnN,UAAUC,IAAI4+B,GAElBllC,KAAKkkC,aACP1wB,EAAQZ,iBAAiB1M,EAAsBlG,KAAKgiC,UAGtDvZ,EAAO3P,GAAGvX,GAAOmC,YAAa1D,KAAKokC,YAEnCpkC,KAAKmkC,QAAU1b,CACjB,CAEO7Z,QAAQ6Z,GACb,MAAMjV,EAAUxT,KAAKwT,QAErBA,EAAQH,oBAAoBnN,EAAsBlG,KAAKgiC,UACvDxuB,EAAQxN,UAAY,GACpByiB,EAAO5Z,IAAItN,GAAO0B,MAAOjD,KAAKokC,YAC9B3b,EAAO5Z,IAAItN,GAAOmC,YAAa1D,KAAKokC,YAEpCpkC,KAAKmkC,QAAU,IACjB,CAuBQc,qBACN,MAAM/K,EAAOl6B,KAAKwT,QACZ2xB,EAAS/+B,SAASg/B,gBAAgB5/B,GAAe,OACvD2/B,EAAOhgB,aAAa,UAAW,aAC/BggB,EAAOhgB,aAAa,QAAS,QAC7BggB,EAAOhgB,aAAa,SAAU,QAE9B,MAAMkf,EAAUj+B,SAASg/B,gBAAgB5/B,GAAe,UAExD6+B,EAAQlf,aAAa,SAAU,gBAC/Bkf,EAAQlf,aAAa,OAAQ,eAC7Bkf,EAAQlf,aAAa,KAAM,MAC3Bkf,EAAQlf,aAAa,KAAM,MAC3Bkf,EAAQlf,aAAa,IAAK,MAC1Bkf,EAAQlf,aAAa,eAAgB,MACrCggB,EAAO1f,YAAY4e,GAEnB,MAAME,EAAcn+B,SAASg/B,gBAAgB5/B,GAAe,UAE5D++B,EAAYpf,aAAa,SAAU,gBACnCof,EAAYpf,aAAa,OAAQ,eACjCof,EAAYpf,aAAa,KAAM,MAC/Bof,EAAYpf,aAAa,KAAM,MAC/Bof,EAAYpf,aAAa,IAAK,QAC9Bof,EAAYpf,aAAa,eAAgB,KACzCggB,EAAO1f,YAAY8e,GAEnBrK,EAAKzU,YAAY0f,GAEjBnlC,KAAKskC,WAAaD,EAClBrkC,KAAKwkC,eAAiBD,CACxB,EC/IF,MAAMc,WAAiBpI,GAUrBv9B,aAAmBuO,SACjBA,EAAWixB,GAA0BM,WAAUp3B,MAC/CA,EAAQ,MAC0B,IAClCvI,MAAM,CACJoO,WACA7F,UAoCIpI,KAAQgiC,SAAG,KACjB,MAAMvZ,EAASzoB,KAAKmkC,QACf1b,GAELA,EAAOkQ,GAAG3O,OAAO,EArCjBhqB,KAAKwT,QAAUpN,SAASL,cAAcG,IACtClG,KAAKwT,QAAQ2uB,MAAQ,WACrBniC,KAAKmkC,QAAU,IACjB,CAEOhV,KAAK1G,EAAiB4Y,GAC3B,MAAM7tB,EAAUxT,KAAKwT,QACfxN,EAAYq7B,EAAWr7B,UAE7BwN,EAAQnN,UAAUC,IAAIN,EAAUg5B,aAChCxrB,EAAQnN,UAAUC,IAAIN,EAAU04B,WAChClrB,EAAQnN,UAAUC,IAAIN,EAAU63B,iBAEhCpV,EAAOkQ,GAAGhY,cACPhR,MAAKoP,IACAA,GACFvL,EAAQnN,UAAU2mB,OAAOhnB,EAAUg5B,YACpC,IAGLxrB,EAAQZ,iBAAiB1M,EAAsBlG,KAAKgiC,UACpDhiC,KAAKmkC,QAAU1b,CACjB,CAEO7Z,UACL,MAAM4E,EAAUxT,KAAKwT,QAErBA,EAAQxN,UAAY,GACpBwN,EAAQH,oBAAoBnN,EAAsBlG,KAAKgiC,UAEvDhiC,KAAKmkC,QAAU,IACjB,EC/CF,MAAMmB,WAAmBrI,GAUvBv9B,aAAmBuO,SACjBA,EAAWixB,GAA0BM,WAAUp3B,MAC/CA,EAAQ,MAC0B,IAClCvI,MAAM,CACJoO,WACA7F,UA+CIpI,KAAQgiC,SAAG,KACjB,MAAMvZ,EAASzoB,KAAKmkC,QACd9C,EAAarhC,KAAKshC,YAExB,IAAK7Y,IAAW4Y,EAAY,OAE5B,MAAMvgB,EAAc2H,EAAOhQ,QAAQ2H,KAC/BU,EAAY/K,QACd+K,EAAYrN,UAEZ+K,GAAYyL,0BAA0Bta,MAAKoP,IACrCA,EACF+B,EAAYvN,SAEZvT,KAAKwT,QAAQnN,UAAUC,IAAI+6B,EAAWr7B,UAAUg5B,YACjD,GAEJ,EAGKh/B,KAAYulC,aAAG,KACrB,MAAM/xB,EAAUxT,KAAKwT,QACfiV,EAASzoB,KAAKmkC,QACd9C,EAAarhC,KAAKshC,YAExB,IAAK7Y,IAAW4Y,EAAY,OAE5B,MAAMvgB,EAAc2H,EAAOhQ,QAAQ2H,KAC7Bpa,EAAYq7B,EAAWr7B,UAEzB8a,EAAY/K,SACdvC,EAAQnN,UAAUC,IAAIN,EAAU24B,cAChCnrB,EAAQnN,UAAU2mB,OAAOhnB,EAAU44B,iBAEnCprB,EAAQnN,UAAUC,IAAIN,EAAU44B,eAChCprB,EAAQnN,UAAU2mB,OAAOhnB,EAAU24B,cACpC,EAhFD3+B,KAAKwT,QAAUpN,SAASL,cAAcG,IACtClG,KAAKwT,QAAQ2uB,MAAQ,0BACvB,CAEOhT,KAAK1G,EAAiB4Y,GAC3B,MAAM7tB,EAAUxT,KAAKwT,QACfxN,EAAYq7B,EAAWr7B,UAE7BwN,EAAQZ,iBAAiB1M,EAAsBlG,KAAKgiC,UACpDxuB,EAAQnN,UAAUC,IAAIN,EAAU63B,iBAChCrqB,EAAQnN,UAAUC,IAAIN,EAAUg5B,aAEhC,MAAMwG,EAAeA,KACnBhyB,EAAQnN,UAAU2mB,OAAOhnB,EAAUg5B,aACnCvW,EAAOhQ,QAAQ2H,KAAKtH,GAAGnU,GAAuB3E,KAAKulC,cACnD9c,EAAOhQ,QAAQ2H,KAAKtH,GAAGnU,GAAwB3E,KAAKulC,aAAa,EAG/D38B,KACF48B,IAEAhnB,GAAYmC,cAAchR,MAAKoP,IACxBA,GACLymB,GAAc,IAIlBxlC,KAAKshC,YAAcD,EACnBrhC,KAAKmkC,QAAU1b,EACfzoB,KAAKulC,cACP,CAEO32B,QAAQ6Z,GACb,MAAMjV,EAAUxT,KAAKwT,QAErBiV,EAAOhQ,QAAQ2H,KAAKvR,IAAIlK,GAAuB3E,KAAKulC,cACpD9c,EAAOhQ,QAAQ2H,KAAKvR,IAAIlK,GAAwB3E,KAAKulC,cACrD/xB,EAAQH,oBAAoBnN,EAAsBlG,KAAKgiC,UACvDxuB,EAAQxN,UAAY,GAEpBhG,KAAKshC,YAAc,KACnBthC,KAAKmkC,QAAU,IACjB,ECxCF,MAAMsB,GAaO1vB,cAAY,QAAS/V,KAAK6iC,SAAW,CACrC6C,aAAW,OAAO1lC,KAAKshC,YAAYoB,YAAYr8B,UAAUs/B,SAAS3lC,KAAK4lC,aAAe,CAErFA,mBAAiB,OAAO5lC,KAAKshC,YAAYt7B,UAAUi5B,MAAQ,CAC3DgB,kBAAgB,OAAOjgC,KAAKshC,YAAYt7B,UAAU+4B,KAAO,CAErEr/B,YAAmB2hC,GAAwBwE,aACzCA,EAAe,IAAIhe,MACnBA,EAAQ,EACRie,UAAWC,EAAkB,MA+GvB/lC,KAAa8oB,cAAG,KACtB9oB,KAAKgmC,iBAAkB,EACvBhmC,KAAKimC,MAAM,EAGLjmC,KAAagpB,cAAG,KACtBhpB,KAAKgmC,iBAAkB,EACvBhmC,KAAKkmC,iBAAiB,EAGhBlmC,KAAY6S,aAAG,KAChB7S,KAAKmmC,eAEVnmC,KAAKomC,gBAAgB,EAGfpmC,KAAA0/B,QAAWttB,IACjBpS,KAAKqmC,aAAc,EAEK,UAApBj0B,EAAIk0B,cACNtmC,KAAKgmC,iBAAkB,GAGzBl9B,OAAO8J,iBAAiB1M,EAAyBlG,KAAKkgC,YAEtDlgC,KAAKimC,MAAM,EAGLjmC,KAAUkgC,WAAG,KACnBlgC,KAAKqmC,aAAc,EAEnBv9B,OAAOuK,oBAAoBnN,EAAyBlG,KAAKkgC,YAEzDlgC,KAAKkmC,iBAAiB,EAGhBlmC,KAAYumC,aAAG,KACRvmC,KAAK6iC,WAGlB7iC,KAAKshC,YAAYoB,YAAYr8B,UAAU2mB,OAAOhtB,KAAKigC,YAAY,EAGzDjgC,KAAawmC,cAAG,KACTxmC,KAAK6iC,WAGlB7iC,KAAKshC,YAAYoB,YAAYr8B,UAAUC,IAAItG,KAAKigC,YAAY,EAetDjgC,KAAmBgjC,oBAAG,KAC5BhjC,KAAKmmC,cAAgBz9B,KAEjB1I,KAAKmmC,eACPnmC,KAAKkmC,iBACN,EAhLDlmC,KAAKshC,YAAcD,EACnBrhC,KAAKymC,cAAgBZ,EACrB7lC,KAAK8nB,OAASD,EACd7nB,KAAK0mC,WAAaX,EAClB/lC,KAAK2mC,QAAU,EACf3mC,KAAKgmC,iBAAkB,EACvBhmC,KAAKqmC,aAAc,EACnBrmC,KAAKmmC,eAAgB,EACrBnmC,KAAKkhC,OAAS,KACdlhC,KAAK6iC,UAAY,IACnB,CAEOtvB,OAAOkV,SACRzoB,KAAK6iC,WACP7iC,KAAKyT,QAAQgV,GAGf,MAAMod,EAAe7lC,KAAKymC,cACpBvM,EAAOzR,EAAOmD,OAEpB5rB,KAAK6iC,UAAYpa,EAAOmD,OACxB5rB,KAAK2mC,OAAS79B,OAAOuQ,YAAW,KAC9BrZ,KAAK4mC,MAAM,GACVf,GAEH3L,EAAKtnB,iBAAiB1M,EAA2BlG,KAAK0/B,SACtDxF,EAAKtnB,iBAAiB1M,EAA4BlG,KAAK8oB,eACvDoR,EAAKtnB,iBAAiB1M,EAA2BlG,KAAK6S,cACtDqnB,EAAKtnB,iBAAiB1M,EAA4BlG,KAAKgpB,eACvDhpB,KAAKkjC,yBAEL,MAAMnhB,EAAyB,QAAjBnc,EAAA6iB,EAAO8P,kBAAU,IAAA3yB,OAAA,EAAAA,EAAE20B,aAC5BxY,GAAUA,EAAML,YAIjBK,EAAMI,YACRniB,KAAKshC,YAAYoB,YAAYr8B,UAAUC,IAAItG,KAAKigC,aAGlDle,EAAMF,OAAOjP,iBAAiB1M,GAA2BlG,KAAKumC,cAC9DxkB,EAAMF,OAAOjP,iBAAiB1M,GAA4BlG,KAAKwmC,eAE/DxmC,KAAKkhC,OAASnf,EAChB,CAEOtO,QAAQgV,GACb,IAAKzoB,KAAK6iC,UAAW,OAErB,MAAMxB,EAAarhC,KAAKshC,YAClBpH,EAAOzR,EAAOmD,OACd7J,EAAQ/hB,KAAKkhC,OAEnBhH,EAAK7mB,oBAAoBnN,EAA2BlG,KAAK0/B,SACzD52B,OAAOuK,oBAAoBnN,EAAyBlG,KAAKkgC,YACzDhG,EAAK7mB,oBAAoBnN,EAA4BlG,KAAK8oB,eAC1DoR,EAAK7mB,oBAAoBnN,EAA2BlG,KAAK6S,cACzDqnB,EAAK7mB,oBAAoBnN,EAA4BlG,KAAKgpB,eAC1DhpB,KAAKmjC,4BAELr6B,OAAOyQ,aAAavZ,KAAK2mC,QACzBtF,EAAWqB,YAAYr8B,UAAU2mB,OAAOhtB,KAAKigC,aAEzCle,IACFA,EAAMF,OAAOxO,oBAAoBnN,GAA2BlG,KAAKumC,cACjExkB,EAAMF,OAAOxO,oBAAoBnN,GAA4BlG,KAAKwmC,gBAGpExmC,KAAKgmC,iBAAkB,EACvBhmC,KAAKqmC,aAAc,EACnBrmC,KAAKkhC,OAAS,KACdlhC,KAAK6iC,UAAY,IACnB,CAEOoD,OACLjmC,KAAK6mC,kBACL7mC,KAAKshC,YAAYoB,YAAYr8B,UAAU2mB,OAAOhtB,KAAK4lC,aACrD,CAEOQ,iBACLpmC,KAAKimC,OACLjmC,KAAKkmC,gBAAgBlmC,KAAK0mC,WAC5B,CAEOE,OACL5mC,KAAK6mC,kBACL7mC,KAAKshC,YAAYoB,YAAYr8B,UAAUC,IAAItG,KAAK4lC,aAClD,CAEQiB,kBACF7mC,KAAK2mC,SACP79B,OAAOyQ,aAAavZ,KAAK2mC,QACzB3mC,KAAK2mC,QAAU,EAEnB,CAEQT,gBAAgBre,EAAQ7nB,KAAK8nB,QAC/B9nB,KAAKqmC,cAAiBrmC,KAAKmmC,eAAiBnmC,KAAKgmC,kBAErDhmC,KAAK6mC,kBACDhf,GAAS,EACX7nB,KAAK4mC,OAEL5mC,KAAK2mC,OAAS79B,OAAOuQ,YAAW,KAC9BrZ,KAAK4mC,MAAM,GACV/e,GAEP,CAoDQqb,yBACN5gC,GAAkB8iB,SAAQiX,IACxBj2B,SAASwM,iBAAiBypB,EAASr8B,KAAKgjC,oBAAoB,GAEhE,CAEQG,4BACN7gC,GAAkB8iB,SAAQiX,IACxBj2B,SAASiN,oBAAoBgpB,EAASr8B,KAAKgjC,oBAAoB,GAEnE,ECrOF,MAAM8D,GAANpnC,cAcUM,KAAA0U,WAAce,IACpB,MAAMsM,EAAQ/hB,KAAKkhC,OACnB,IAAKnf,EAAO,OAEZtM,EAAMlD,iBACNkD,EAAMwD,kBAEN,MAAM8tB,EAAUhlB,EAAMF,OAChBmlB,EAA8B,MAAjBvxB,EAAMG,QACrB1P,GAA2BuP,EAAMG,SACjC1P,GAA2BuP,EAAM9M,KAErC,OAAQq+B,GACN,IAAK,OACL,IAAK,QACH,OAAOhnC,KAAKinC,iBAAiBF,EAAwB,UAAfC,GACxC,IAAK,KACL,IAAK,OACH,OAAOhnC,KAAKknC,mBAAmBH,EAAwB,OAAfC,I9C+BlB,K8C5BLvxB,EAAMG,S9CoCD,M8CpCuCH,EAAM9M,MAErE3I,KAAKmnC,aAAaplB,EACnB,CAiCL,CApESxO,OAAO2mB,EAAmBnY,GAC/B/hB,KAAKkhC,OAASnf,EAEdmY,EAAKtnB,iBAAiB1M,EAAyBlG,KAAK0U,YAAY,EAClE,CAEOjB,QAAQymB,GACbl6B,KAAKkhC,OAAS,KACdhH,EAAK7mB,oBAAoBnN,EAAyBlG,KAAK0U,YAAY,EACrE,CA6BQuyB,iBAAiBllB,EAAyBqlB,GAChD,MAAMv7B,EAAQu7B,EAAU,GAAK,EAE7BrlB,EAAMoC,aAAetY,EACrBkW,EAAMwf,cAAc,IAAIC,YAAYj8B,GAAyB,CAAEk8B,OAAQ,CAAErb,KAAMrE,EAAMoC,eACvF,CAEQ+iB,mBAAmBnlB,EAAyBslB,GAClD,MAAMx7B,EAAQw7B,EAAW,IAAO,GAE5BtlB,EAAMiC,MACRjC,EAAMkC,OAASld,GAAM8E,EAAO,EAAG,GAE/BkW,EAAMkC,OAASld,GAAMgb,EAAMkC,OAASpY,EAAO,EAAG,GAG5CkW,EAAMkC,OAAS,EACjBlC,EAAMiC,OAAQ,EAEdjC,EAAMiC,OAAQ,CAElB,CAEQmjB,aAAaplB,GACfA,EAAMI,WACRJ,EAAMF,OAAOuC,OAEbrC,EAAMF,OAAOG,OAEjB,ECmBF,MAAMslB,GAsHO1b,aAAW,OAAO5rB,KAAK+4B,OAAS,CAMhC2J,kBAAgB,OAAO1iC,KAAK8rB,YAAc,CAM1Cyb,mBAAiB,OAAOvnC,KAAKwnC,KAAO,CAMpCC,YAAU,OAAOznC,KAAK0nC,MAAQ,CAM9BC,kBAAgB,OAAO3nC,KAAK4nC,YAAc,CAgBrDloC,aAAmBmoC,SACjBA,EAAQC,eACRA,EAAcC,YACdA,GAAc,EAAIC,iBAClBA,GAAmB,EAAIC,YACvBA,GAAc,EAAIC,WAClBA,GAAa,EAAIC,aACjBA,GAAe,EAAIC,iBACnBA,GAAmB,EAAIC,UACvBA,GAAY,EAAIC,QAChBA,GAAU,EAAIC,SACdA,GAAW,EAAIC,WACfA,GAAa,EAAIxiC,UACjBA,EAAY,CAAE,EAAA2hC,YACdA,EAAc,IACgB,UA0JxB3nC,KAAcyoC,eAAG,EAAG1M,OAAQtT,EAAQzV,oBAC1C,MAAM01B,EAAY1oC,KAAK2oC,WAEvB,GAAI31B,EAAS,CACX,IAAK01B,EAAU3yB,QAAS,OAEpB2yB,EAAUhD,OACZgD,EAAUtC,iBAEVsC,EAAU9B,MAEb,KAAM,CACL,IAAK5mC,KAAK+nC,YAAa,OAEvB,MAAMhmB,EAAyB,QAAjBnc,EAAA6iB,EAAO8P,kBAAU,IAAA3yB,OAAA,EAAAA,EAAE20B,aACjC,IAAKxY,IAAUA,EAAML,UAAW,OAE5BK,EAAMI,WACRJ,EAAMF,OAAOuC,OAEbrC,EAAMF,OAAOG,OAEhB,GAGKhiB,KAAa4oC,cAAG,EAAG7M,OAAQtT,MACjC,MAAMgf,EAAQznC,KAAK0nC,OAEnB1nC,KAAK6oC,kBAAkBpgB,GACvBzoB,KAAK8oC,gBAAgBrgB,GACrBzoB,KAAK+oC,uBAAuBtgB,GAE5B3oB,OAAO2xB,KAAKgW,GAAOriB,SAASzc,IACT8+B,EAAM9+B,GAEdyc,SAAQ4jB,IACfA,EAAKp6B,QAAQ6Z,EAAQzoB,MACrBgpC,EAAK7Z,KAAK1G,EAAQzoB,KAAK,GACvB,GACF,EAhMFA,KAAK6nC,SAAWA,EAChB7nC,KAAK8nC,eAAiBA,EACtB9nC,KAAK+nC,YAAcA,EACnB/nC,KAAKgoC,iBAAmBA,EACxBhoC,KAAKioC,YAAcA,EACnBjoC,KAAKkoC,WAAaA,EAClBloC,KAAKmoC,aAAeA,EACpBnoC,KAAKooC,iBAAmBA,EACxBpoC,KAAKqoC,UAAYA,EACjBroC,KAAKsoC,QAAUA,EACftoC,KAAKuoC,SAAWA,EAChBvoC,KAAKwoC,WAAaA,EAClBxoC,KAAKgG,UACAlG,OAAA0V,OAAA1V,OAAA0V,OAAA,CAAA,EAAA8xB,GAAW/kC,eACXyD,GAGL,MAAMk/B,EAAuC,QAA3Bt/B,EAAAI,EAAUm3B,qBAAiB,IAAAv3B,EAAAA,EAAA0hC,GAAW/kC,cAAc46B,cAEtEn9B,KAAK+4B,QAAUhzB,GAAcm/B,GAC7BllC,KAAKipC,0BACLjpC,KAAK0nC,OAAS5nC,OAAO2xB,KAAK6V,GAAW4B,UAAU7zB,QAAO,CAACoyB,EAAO9+B,KAC5D8+B,EAAMH,GAAW4B,SAASvgC,IAAQ,GAC3B8+B,IACN,CAAE,GACLznC,KAAK4nC,aAAeD,EACpB3nC,KAAK2oC,WAAa,IAAIlD,GAASzlC,KAAM4H,GAAgBigC,IACrD7nC,KAAKmpC,cAAgB,IAAIrC,GAEzBa,EAAYviB,SAAQ4jB,IAClBhpC,KAAK0nC,OAAOsB,EAAK/6B,UAAUutB,KAAKwN,EAAK,GAEzC,CAEO7Z,KAAK1G,GACV,MAAM2gB,EAAW3gB,EAAOmD,OAClByd,EAAerpC,KAAK+4B,QACpBuQ,EAAetpC,KAAKupC,sBAE1BvpC,KAAK6oC,kBAAkBpgB,GACvBzoB,KAAK8oC,gBAAgBrgB,GACrBzoB,KAAK+oC,uBAAuBtgB,GAE5B2gB,EAAS3jB,YAAY4jB,GACrBrpC,KAAKwpC,SAAS/gB,EAAQ6gB,GACtBtpC,KAAKwpC,SAAS/gB,EAAQzoB,KAAK4nC,cAE3Bnf,EAAO3P,GAAGvX,GAAO6B,kBAAmBpD,KAAK4oC,eACzCngB,EAAO3P,GAAGvX,GAAOoC,aAAc3D,KAAKyoC,eACtC,CAEO75B,QAAQ6Z,GAEb,MAAM2gB,EAAW3gB,EAAOmD,OAClByd,EAAerpC,KAAK+4B,QACpB0O,EAAQznC,KAAK0nC,OAEf2B,EAAazM,gBAAkBwM,GACjCA,EAASvM,YAAYwM,GAGvBvpC,OAAO2xB,KAAKgW,GAAOriB,SAASzc,IACT8+B,EAAM9+B,GAEdyc,SAAQ4jB,IACfA,EAAKp6B,QAAQ6Z,EAAQzoB,KAAK,IAG5BynC,EAAM9+B,GAAO,EAAE,IAGjB3I,KAAKypC,qBACLzpC,KAAK2oC,WAAWl1B,QAAQgV,GACxBzoB,KAAKmpC,cAAc11B,QAAQ21B,GAE3B3gB,EAAO5Z,IAAItN,GAAO6B,kBAAmBpD,KAAK4oC,eAC1CngB,EAAO5Z,IAAItN,GAAOoC,aAAc3D,KAAKyoC,eACvC,CAEQe,SAAS/gB,EAAiBgf,GAChC,IAAK,MAAMuB,KAAQvB,EAAO,CACxB,MAAMiC,EAAW1pC,KAAK0nC,OAAOsB,EAAK/6B,UAC5B07B,EAAU3pC,KAAK4pC,WAAWZ,EAAK/6B,UAE/B47B,EAAmBtiC,GAAUmiC,GAAUI,GAAWA,EAAQ1hC,MAAQ4gC,EAAK5gC,QAE7E,GAAIyhC,GAAoB,EAAG,CACzB,MAAME,EAAcL,EAASG,GAAkBr2B,QAC/Ck2B,EAAS/N,OAAOkO,EAAkB,EAAGb,GACrCW,EAAQK,aAAahB,EAAKx1B,QAASu2B,EACpC,MACCL,EAASlO,KAAKwN,GACdW,EAAQlkB,YAAYujB,EAAKx1B,SAG3Bw1B,EAAK7Z,KAAK1G,EAAQzoB,KACnB,CACH,CAEQipC,0BACN,MAAMjjC,EACDlG,OAAA0V,OAAA1V,OAAA0V,OAAA,GAAA8xB,GAAW/kC,eACXvC,KAAKgG,WAEJ4lB,EAAS5rB,KAAK+4B,QAGdwO,EAAexhC,GAAcC,EAAUo3B,aACvC6M,EAAclkC,GAAcC,EAAU23B,qBACtCuM,EAAenkC,GAAcC,EAAU43B,sBAE7ChS,EAAOnG,YAAYwkB,GACnBre,EAAOnG,YAAYykB,GAGnB,MAAM/d,EAAYpmB,GAAcC,EAAUq3B,eACpC8M,EAAapkC,GAAcC,EAAUs3B,cACrC8M,EAAgBrkC,GAAcC,EAAUu3B,iBACxC8M,EAAatkC,GAAcC,EAAUw3B,cACrC8M,EAAsBvkC,GAAcC,EAAUy3B,eAC9C8M,EAAuBxkC,GAAcC,EAAU03B,gBAErD2M,EAAW5kB,YAAY6kB,GACvBD,EAAW5kB,YAAY8kB,GACvBpe,EAAU1G,YAAY8hB,GACtBpb,EAAU1G,YAAY0kB,GACtBhe,EAAU1G,YAAY4kB,GACtBle,EAAU1G,YAAY2kB,GACtBxe,EAAOnG,YAAY0G,GAEnBnsB,KAAKwnC,MAAQD,EACbvnC,KAAK8rB,aAAeK,EACpBnsB,KAAK4pC,WAAa,CAChB,CAACtC,GAAW4B,SAAS7J,UAAW8K,EAChC,CAAC7C,GAAW4B,SAAS3J,WAAY+K,EACjC,CAAChD,GAAW4B,SAAS1J,YAAa+K,EAClC,CAACjD,GAAW4B,SAAS5J,aAAc8K,EACnC,CAAC9C,GAAW4B,SAAS/J,UAAW8K,EAChC,CAAC3C,GAAW4B,SAAS9J,WAAY8K,EAErC,CAEQT,qBACW3pC,OAAO2xB,KAAK6V,GAAW4B,UAAUloC,KAAI2H,GAAO2+B,GAAW4B,SAASvgC,KAGxEyc,SAAQukB,IACf,KAAOA,EAAQa,YACbb,EAAQ9M,YAAY8M,EAAQa,WAC7B,GAEL,CA4CQ1B,gBAAgBrgB,SACtB,MAAMof,EAAW7nC,KAAK6nC,SAChBa,EAAY1oC,KAAK2oC,WAEvB,GAAgB,MAAZd,EACEA,EACFa,EAAUn1B,OAAOkV,GAEjBigB,EAAUj1B,QAAQgV,OAEf,CAEL,MAAMwL,EAA2B,QAAjBruB,EAAA6iB,EAAO8P,kBAAU,IAAA3yB,OAAA,EAAAA,EAAE20B,aAE/BtG,GAAWA,EAAQvS,UAErBgnB,EAAUn1B,OAAOkV,GAEjBigB,EAAUj1B,QAAQgV,EAErB,CACH,CAEQogB,kBAAkBpgB,WACxB,MAAMgiB,EAAazqC,KAAKwnC,MAClBM,EAAiB9nC,KAAK8nC,eACtB4C,EAAmC,QAArB9kC,EAAA5F,KAAKgG,UAAUi5B,cAAM,IAAAr5B,EAAAA,EAAI0hC,GAAW/kC,cAAc08B,OAEtE,GAAsB,MAAlB6I,EACEA,EACF2C,EAAWpkC,UAAU2mB,OAAO0d,GAE5BD,EAAWpkC,UAAUC,IAAIokC,OAEtB,CAEL,MAAMzW,EAA2B,QAAjB0W,EAAAliB,EAAO8P,kBAAU,IAAAoS,OAAA,EAAAA,EAAEpQ,aAE/BtG,GAAWA,EAAQvS,UAErB+oB,EAAWpkC,UAAU2mB,OAAO0d,GAE5BD,EAAWpkC,UAAUC,IAAIokC,EAE5B,CACH,CAEQ3B,uBAAuBtgB,SAC7B,MAAM2gB,EAAW3gB,EAAOmD,OAClBgf,EAAe5qC,KAAKmpC,cACpBlV,EAA2B,QAAjBruB,EAAA6iB,EAAO8P,kBAAU,IAAA3yB,OAAA,EAAAA,EAAE20B,aAE/Bv6B,KAAKgoC,kBAAoB/T,GAAWA,EAAQvS,UAC9CkpB,EAAar3B,OAAO61B,EAAUnV,GAE9B2W,EAAan3B,QAAQ21B,EAEzB,CAEQG,sBACN,MAAM9B,EAA0B,GAkChC,OAhCIznC,KAAKioC,aACPR,EAAMjM,KAAK,IAAIuF,GAAYn5B,GAAgB5H,KAAKioC,eAG9CjoC,KAAKkoC,YACPT,EAAMjM,KAAK,IAAIuG,GAAWn6B,GAAgB5H,KAAKkoC,cAG7CloC,KAAKmoC,cACPV,EAAMjM,KAAK,IAAI6G,GAAcz6B,GAAgB5H,KAAKmoC,gBAGhDnoC,KAAKwoC,YACPf,EAAMjM,KAAK,IAAI8J,GAAW19B,GAAgB5H,KAAKwoC,cAG7CxoC,KAAKuoC,UACPd,EAAMjM,KAAK,IAAI6J,GAASz9B,GAAgB5H,KAAKuoC,YAG3CvoC,KAAKooC,kBACPX,EAAMjM,KAAK,IAAIoH,GAAiBh7B,GAAgB5H,KAAKooC,oBAGnDpoC,KAAKqoC,WACPZ,EAAMjM,KAAK,IAAI+H,GAAU37B,GAAgB5H,KAAKqoC,aAG5CroC,KAAKsoC,SACPb,EAAMjM,KAAK,IAAIyI,GAAQr8B,GAAgB5H,KAAKsoC,WAGvCb,CACT,EA1cuBH,GAAa/kC,cAAG26B,GAMhBoK,GAAQ4B,SAAGhK,GCjEpC,MAAe2L,GA8BbnrC,aAAmBsjB,IACjBA,EAAGjB,MACHA,GAAQ,IAER/hB,KAAKgjB,IAAMA,EACXhjB,KAAK+hB,MAAQA,EACb/hB,KAAK8qC,MAAQ,IACf,CAmBO/P,oBAAoBzR,SACf,QAAV1jB,EAAA5F,KAAK8qC,aAAK,IAAAllC,GAAAA,EAAEgJ,QAAQ0a,EACtB,CAQO2Q,aAAa/tB,GAElBA,EAAO+D,YACT,CAQOisB,cAAczjB,GACnBA,EAAQyH,iBAAkB,CAC5B,CAQO3U,OAAOW,GAAkB,CAQzBquB,aACL,OAAKv6B,KAAK8qC,MAEH9qC,KAAK8qC,MAAMxZ,QAAQC,SAASwZ,SAAS9W,QAFpB,IAG1B,CAOOwE,UACL,OAAOz4B,KAAK8qC,KACd,ECjJF,MAAeE,GAGbtrC,cACEM,KAAKyyB,aAAc,CACrB,CAKO7jB,QAAQwgB,GACb,ECNJ,MAAM6b,WAA2BD,GAK/BtrC,YAAmB4pB,EAAmB2K,EAAsBiX,GAC1DrrC,QAEAG,KAAKi0B,QAAUA,EACfj0B,KAAKmrC,cAAgB7hB,EAAIuL,uBAAuBZ,EAASA,EAAQllB,OACjE/O,KAAKorC,cAAgBF,CACvB,CAEOt8B,QAAQwgB,GACbpvB,KAAKi0B,QAAQrlB,UACbwgB,EAAGic,cAAcrrC,KAAKmrC,cACxB,CAEO5/B,OAAO6jB,EAAoDza,EAAgC4Z,GAChG,MAAM0F,EAAUj0B,KAAKi0B,QAErB7E,EAAGkc,YAAYlc,EAAGmc,oBAAqBtX,EAAQ5S,OAC/C+N,EAAGoc,UAAU72B,EAAU,GACvBya,EAAGqc,cAAcrc,EAAGsc,UACpBtc,EAAG+E,YAAY/E,EAAG0F,iBAAkB90B,KAAKmrC,eAEzBjjC,GAAY+rB,EAAQrR,QAAS5iB,KAAKorC,eAC1ChmB,SAAQ,CAACpC,EAAKtb,KAChB6mB,EACFa,EAAGuc,cAAcvc,EAAGwc,4BAA8BlkC,EAAK,EAAG,EAAG,EAAG0nB,EAAGyc,KAAMzc,EAAG0c,cAAe9oB,GAE3FoM,EAAG2c,WAAW3c,EAAGwc,4BAA8BlkC,EAAK,EAAG0nB,EAAGyc,KAAMzc,EAAGyc,KAAMzc,EAAG0c,cAAe9oB,EAC5F,IAGEiR,EAAQvS,YACX1hB,KAAKyyB,aAAc,EAEvB,ECvCF,MAAMuZ,GASO3kC,WAAS,OAAOrH,KAAKisC,KAAO,CAEvCvsC,YAAmBu0B,EAAoBiX,GhD8CnB1gC,MgD7ClBxK,KAAKi0B,QAAUA,EACfj0B,KAAKksC,gBAAkBhkC,KhD4CLsC,EgD5CuB,IhD6C/BA,GAAO,EACV,GAGF0Y,MAAMoJ,MAAM,EAAGpJ,MAAM1Y,IAAMxJ,KAAI,CAACmrC,EAAOzkC,IAAQA,IgDjDPwjC,GAE7C,MAAM/c,EAAS/nB,SAASL,cAAc,UAEtC/F,KAAKosC,qBAELje,EAAOpf,MAAQ/O,KAAKisC,MACpB9d,EAAOnf,OAAShP,KAAKisC,MAErBjsC,KAAKouB,QAAUD,EACfnuB,KAAK2pB,KAAOwE,EAAO2J,WAAW,KAChC,CAEOlpB,UACL,MAAMuf,EAASnuB,KAAKouB,QAGpBD,EAAOpf,MAAQ,EACfof,EAAOnf,OAAS,EAChBhP,KAAKouB,QAAU,IACjB,CAEO0C,KAAK1B,EAAoDb,GAC9D,MAAMlnB,EAAOrH,KAAKisC,MACZhY,EAAUj0B,KAAKi0B,QACrB,IAAIoY,EAAa,EAEjB,IAAK,IAAIC,EAAM,EAAGA,EAAMtsC,KAAKusC,KAAMD,IACjC,IAAK,IAAIE,EAAS,EAAGA,EAASxsC,KAAKysC,QAASD,IAAU,CACpD,MAAMxoC,EAAIqD,EAAOmlC,EACX/iC,EAAIpC,EAAOilC,EACXI,EAAgB1sC,KAAKksC,gBAAgBG,GAE3CrsC,KAAK2pB,KAAKgjB,UAAU1Y,EAAQpS,OAA6B7d,EAAGyF,EAAGpC,EAAMA,EAAM,EAAG,EAAGA,EAAMA,GAEnFknB,EACFa,EAAGuc,cAAcvc,EAAGwc,4BAA8Bc,EAAe,EAAG,EAAG,EAAGtd,EAAGyc,KAAMzc,EAAG0c,cAAe9rC,KAAKouB,SAE1GgB,EAAG2c,WAAW3c,EAAGwc,4BAA8Bc,EAAe,EAAGtd,EAAGyc,KAAMzc,EAAGyc,KAAMzc,EAAG0c,cAAe9rC,KAAKouB,SAG5Gie,GACD,CAEL,CAEQD,qBACN,MAAMr9B,MACJA,EAAKC,OACLA,GACEhP,KAAKi0B,QACHlsB,EAASgH,EAAQC,EAEnBjH,IAAW,EAAI,GACjB/H,KAAKisC,MAAQl9B,EACb/O,KAAKusC,KAAO,EACZvsC,KAAKysC,QAAU,GACK,IAAX1kC,GACT/H,KAAKisC,MAAQj9B,EACbhP,KAAKusC,KAAO,EACZvsC,KAAKysC,QAAU,GACN1kC,IAAW,EAAI,GACxB/H,KAAKisC,MAAgB,GAARl9B,EACb/O,KAAKusC,KAAO,EACZvsC,KAAKysC,QAAU,IAEfzsC,KAAKisC,MAAQl9B,EAAQ,EACrB/O,KAAKusC,KAAO,EACZvsC,KAAKysC,QAAU,EAEnB,EClFF,MAAMG,WAA0B5B,GAInB/W,cAAY,OAAOj0B,KAAK6sC,SAAS5Y,OAAS,CAErDv0B,YAAmB4pB,EAAmB2K,EAAoBiX,GACxDrrC,QAEAG,KAAK6sC,SAAW,IAAIb,GAAmB/X,EAAsBiX,GAC7DlrC,KAAKmrC,cAAgB7hB,EAAIuL,uBAAuBZ,EAASj0B,KAAK6sC,SAASxlC,KACzE,CAEOuH,QAAQwgB,GACbA,EAAGic,cAAcrrC,KAAKmrC,eACtBnrC,KAAK6sC,SAASj+B,SAChB,CAEOrD,OAAO6jB,EAAoDza,EAAgC4Z,GAChG,MAAM0F,EAAUj0B,KAAKi0B,QAErB7E,EAAGkc,YAAYlc,EAAGmc,qBAAqB,GACvCnc,EAAGoc,UAAU72B,EAAU,GACvBya,EAAGqc,cAAcrc,EAAGsc,UACpBtc,EAAG+E,YAAY/E,EAAG0F,iBAAkB90B,KAAKmrC,eAEzCnrC,KAAK6sC,SAAS/b,KAAK1B,EAAIb,GAElB0F,EAAQvS,YACX1hB,KAAKyyB,aAAc,EAEvB,EC3BF,MAAMqa,WAAgFvQ,GAYpF78B,YAAmBivB,EAAwB2C,GACzCzxB,QAEAG,KAAK2uB,IAAMA,EACX3uB,KAAKsxB,QAAUA,CACjB,CAEO1iB,QAAQ0a,GACbA,EAAI4H,WAAWlxB,KAAK2uB,KACpBrF,EAAIoJ,uBAAuB1yB,KAAKsxB,QAClC,EC3BF,MAAMyb,GAKJrtC,YAAmB4pB,EAAmBwJ,EAAsBC,EAAwBxB,GAClFvxB,KAAKsxB,QAAUhI,EAAIuJ,cAAcC,EAAcC,GAC/C/yB,KAAKuxB,SAAWA,EAChBvxB,KAAKwxB,iBAAmBlI,EAAI+H,oBAAoBrxB,KAAKsxB,QAASC,EAChE,ECRF,MAAMyb,GAMJttC,YAAmB+2B,EAASM,GAC1B/2B,KAAKy2B,KAAOA,EACZz2B,KAAK+2B,SAAWA,EAChB/2B,KAAK8tB,MAAQ2I,EAAK9uB,OAASovB,CAC7B,ECVF,MAAekW,GAMbvtC,YAAmB42B,EAAoBtI,EAAoBuI,GACzDv2B,KAAKs2B,SAAW,IAAI0W,GAAW,IAAIE,aAAa5W,GAAW,GAC3Dt2B,KAAKguB,SAAW,IAAIgf,GAAW,IAAIG,YAAYnf,GAAW,GAC1DhuB,KAAKu2B,IAAM,IAAIyW,GAAW,IAAIE,aAAa3W,GAAM,EACnD,ECRF,MAAM6W,WAAqBH,GACzBvtC,aAAmB0I,MACjBA,EAAKilC,SACLA,IAKA,MAqDMC,EAAW,EAAI,EACfC,EAAqB,GAE3B,IAAK,IAAIC,EAAI,EAAGA,GAAK,EAAGA,IACtB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAMC,EAAQ,CACZD,EAAIH,EAAc,GAAJE,GACbC,EAAI,GAAKH,EAAc,GAAJE,GACnBC,EAAI,GAAKH,EAAoB,IAATE,EAAI,GACzBC,EAAIH,EAAoB,IAATE,EAAI,IAGrBD,EAAO/R,KAAKkS,EACb,CAGCL,GACFA,EAASjoB,SAAQ,CAACuoB,EAAQjmC,KACxB,GAAIimC,IAAWroC,GAAOsoC,KAAM,OAE5B,MAAMF,EAAQH,EAAO7lC,GACrB,IAAImmC,EAGFA,EADEF,IAAWroC,GAAOwoC,MACT,CAAC,EAAG,EAAG,EAAG,GACZH,IAAWroC,GAAOyoC,OAChB,CAAC,EAAG,EAAG,EAAG,GAEV,CAAC,EAAG,EAAG,EAAG,GAGvB,MAAMC,EAAY9qB,MAAcwqB,EAAM/lC,QACtC,IAAK,IAAIsmC,EAAQ,EAAGA,EAAQP,EAAM/lC,OAAS,EAAGsmC,IAC5CD,EAAkB,EAARC,EAAY,GAAKP,EAAwB,EAAlBG,EAASI,GAAa,GACvDD,EAAkB,EAARC,EAAY,GAAKP,EAAwB,EAAlBG,EAASI,GAAa,GAGzDV,EAAO7lC,GAAOsmC,CAAS,IAO3BnuC,MAjGiB,CAEf,GAAI,EAAG,GACN,GAAI,EAAG,GACP,EAAG,EAAG,EACP,EAAG,EAAG,GAGL,GAAI,GAAI,EACT,GAAI,GAAI,EACR,EAAG,GAAI,GACN,EAAG,GAAI,GAGP,EAAG,GAAI,EACR,EAAG,GAAI,EACP,EAAG,EAAG,GACL,EAAG,EAAG,GAGN,GAAI,EAAG,EACR,GAAI,EAAG,EACP,GAAI,GAAI,GACP,GAAI,GAAI,EAGT,GAAI,GAAI,EACR,GAAI,EAAG,EACP,EAAG,EAAG,EACN,EAAG,GAAI,GAGN,GAAI,EAAG,GACP,GAAI,GAAI,GACR,EAAG,GAAI,GACP,EAAG,EAAG,GAGQ,CACf,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,GACN,EAAG,GAAI,GACP,GAAI,GAAI,GACR,GAAI,GAAI,GACR,GAAI,GAAI,GACR,GAAI,GAAI,GACR,GAAI,GAAI,GACR,GAAI,GAAI,IA4CEqI,GAAYqlC,EAAQnlC,EAAO,UACpCiN,QAAO,CAAC64B,EAAKptC,IAAQotC,EAAIC,OAAOrtC,IAAM,IAG3C,EC7GF,MAAMstC,WAAyBpD,GAI7BtrC,YAAmB4pB,EAAmB2K,GACpCp0B,QAEAG,KAAKi0B,QAAUA,EACfj0B,KAAKmrC,cAAgB7hB,EAAIyK,mBAAmBE,EAC9C,CAEOrlB,QAAQwgB,GACbpvB,KAAKi0B,QAAQrlB,UACbwgB,EAAGic,cAAcrrC,KAAKmrC,cACxB,CAEO5/B,OAAO6jB,EAAoDza,EAAgC4Z,GAChG,MAAM0F,EAAUj0B,KAAKi0B,QACfvS,EAAUuS,EAAQvS,UAExB0N,EAAGkc,YAAYlc,EAAGmc,oBAAqBtX,EAAQ5S,OAC/C+N,EAAGoc,UAAU72B,EAAU,GACvBya,EAAGqc,cAAcrc,EAAGsc,UACpBtc,EAAG+E,YAAY/E,EAAGgF,WAAYp0B,KAAKmrC,gBAE9BzpB,GAAW6M,EACda,EAAGuc,cAAcvc,EAAGgF,WAAY,EAAG,EAAG,EAAGhF,EAAGyc,KAAMzc,EAAG0c,cAAe7X,EAAQpS,QAE5EuN,EAAG2c,WAAW3c,EAAGgF,WAAY,EAAGhF,EAAGyc,KAAMzc,EAAGyc,KAAMzc,EAAG0c,cAAe7X,EAAQpS,QAGzEH,IACH1hB,KAAKyyB,aAAc,EAEvB,mVCjCF,MAAM4b,WAAyBpB,GAC7BvtC,YAAmB4uC,GACjB,MAAMhY,EAAqB,GACrBtI,EAAqB,GACrBuI,EAAgB,GAKhBgY,EAAiB,EADJv/B,OAEbw/B,EAAoB,EAHH,GAIjBC,EAAaH,EAAWE,EAE9B,IAAK,IAAIE,EAAO,EAAGA,EAAO,EAAGA,IAAQ,CACnC,MAAMjlC,EAAI8kC,EAAeG,GAEzB,IAAK,IAAIC,EAAS,EAAGA,GATA,GAS0BA,IAAU,CACvD,MAAM9yB,EAAQ8yB,EAASF,EAAavqC,KAAKE,GAAgB,GAAXkqC,EACxCtqC,EAAIE,KAAKwY,IAAIb,GACbnS,EAAIxF,KAAKC,IAAI0X,GACb+yB,EAAID,EAASH,EACbK,EAAIH,EAKV,GAHAnY,EAAIiF,KAAKoT,EAAGC,GACZvY,EAASkF,KAAKx3B,EAAGyF,EAAGC,GAEP,IAATglC,GAAcC,EAnBC,GAmBwB,CACzC,MAAM1nC,EAAI0nC,EACJznC,EAAID,EArBO,GAqBc,EAE/B+mB,EAASwN,KAAKv0B,EAAGC,EAAGD,EAAI,EAAGC,EAAGA,EAAI,EAAGD,EAAI,EAC1C,CACF,CACF,CAEDpH,MAAMy2B,EAAUtI,EAAUuI,EAC5B,ECpCF,MAAMuY,WAAuB7B,GAE3BvtC,cAEE,MACM6uC,EAAiB,GACjBQ,GAAqC,GAAM7qC,KAAKE,GAEhDmyB,EAAgB,GAChBD,EAAqB,GACrBtI,EAAqB,GAC3B,IAAIghB,EACAL,EAEJ,IAAKK,EAAS,EAAGA,GAVK,GAUoBA,IAAU,CAClD,MAAMp+B,GAASo+B,EAXK,GAWoB,IAAO9qC,KAAKE,GAC9C6qC,EAAW/qC,KAAKC,IAAIyM,GACpBs+B,EAAWhrC,KAAKwY,IAAI9L,GAE1B,IAAK+9B,EAAS,EAAGA,GAAUJ,EAAgBI,IAAU,CACnD,MAAMQ,EAAwC,GAAjCR,EAASJ,EAAiB,IAAWrqC,KAAKE,GAAK2qC,EACtDK,EAASlrC,KAAKC,IAAIgrC,GAElBnrC,EADSE,KAAKwY,IAAIyyB,GACLD,EACbzlC,EAAIwlC,EACJvlC,EAAI0lC,EAASF,EACbN,EAAID,EAASJ,EACbM,EAAIG,EAvBQ,GA4BlB,GAHAzY,EAAIiF,KAAKoT,EAAGC,GACZvY,EAASkF,KAAKx3B,EAAGyF,EAAGC,GAEhBilC,IAAWJ,GA5BG,KA4BeS,EAA0B,CACzD,MAAM/nC,EAAU,GAAN+nC,EAAgCL,EACpCznC,EAAID,EAAIsnC,EAAiB,EAE/BvgB,EAASwN,KAAKv0B,EAAGA,EAAI,EAAGC,EAAGA,EAAGD,EAAI,EAAGC,EAAI,EAC1C,CACF,CACF,CAEDrH,MAAMy2B,EAAUtI,EAAUuI,EAC5B,EC7CF,MAAM8Y,WAAqBrE,GAGzBtrC,YAAmBoB,GACjBjB,QAEAG,KAAKc,IAAMA,CACb,CAEOyK,OAAO6jB,EAAoDza,GAChEya,EAAGkD,UAAU3d,EAAU3U,KAAKc,KAE5Bd,KAAKyyB,aAAc,CACrB,ECVF,MAAM6c,WAAsBrC,GAE1BvtC,YAAmBqP,EAAgB,EAAGC,EAAiB,EAAGtF,GAAY,GACpE,MAAMgjB,EAAoB,GAAR3d,EACZ4d,EAAsB,GAAT3d,EAkBnBnP,MAjBiB,EACd6sB,GAAYC,EAAYjjB,EACzBgjB,GAAYC,EAAYjjB,GACvBgjB,EAAWC,EAAYjjB,EACxBgjB,EAAWC,EAAYjjB,GAER,CACf,EAAG,EAAG,EACN,EAAG,EAAG,GAEI,CACV,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,GAIP,EC1BF,MAAM6lC,WAA4BvE,GAGhCtrC,YAAmBoB,GACjBjB,QAEAG,KAAKc,IAAMA,CACb,CAEOyK,OAAO6jB,EAAoDza,GAChEya,EAAGogB,WAAW76B,EAAU3U,KAAKc,IAAIuU,QAAO,CAAClN,EAAKsnC,IAAW,IAAItnC,KAAQsnC,IAAS,KAE9EzvC,KAAKyyB,aAAc,CACrB,ECoBF,MAAMid,WAA6B7E,GA8BjCnrC,YAAmBgpB,GACjB7oB,MAAM6oB,GAEN1oB,KAAK2vC,MAAQjnB,EAAQknB,IACvB,CAEO3T,aAAa3S,EAAmB2K,GACrC,IAAI4b,EACAC,EAEJ,GAAQ9vC,KAAK2vC,QACND,GAAqBK,KAAKC,WAC7BH,EAAU,CAAC,GAAK,EAAG,EAAG,GACtBC,EAAW,CAAC,GAAK,EAAG,GAAK,QAIzBD,EAAU,CAAC,EAAG,GAAK,EAAG,GACtBC,EAAW,CAAC,EAAG,GAAK,EAAG,IAI3B,MAAMve,EAAW,CACfwZ,SAAU,IAAIqD,GAAiB9kB,EAAK2K,GACpC5B,KAAM,IAAIgd,GAAa,GACvBY,gBAAiB,IAAIV,GAAoB,CAACM,EAASC,KAG/C/hB,EAAW,IAAI+gB,GACfxd,EAAU,IAAIyb,GAAczjB,4UAAS6J,GAAI5B,GAEzC5C,EAAMrF,EAAI+G,UAAUtC,EAAUuD,GAC9BkH,EAAO,IAAIsU,GAAane,EAAK2C,GAEnCtxB,KAAK8qC,MAAQtS,CACf,EAvDckX,GAAAK,KAAO,CAKnBC,WAAY,aAKZE,WAAY,qZCdhB,cAAgCrF,GAW9BnrC,YAAmBgpB,GACjB7oB,MAAM6oB,GAEN,MAAMwiB,aACJA,EAAe,SAAQiF,aACvBA,GAAe,GACbznB,EAEJ1oB,KAAKorC,cAAgBF,EACrBlrC,KAAKowC,cAAgBD,CACvB,CAEOlU,aAAa3S,EAAmB2K,GACrC,MAAMiX,EAAelrC,KAAKorC,cACpB+E,EAAenwC,KAAKowC,cACpB7e,EAAW,CACfwZ,SAAU9W,EAAQtS,SACd,IAAIspB,GAAmB3hB,EAAK2K,EAAwBiX,GACpD,IAAI0B,GAAkBtjB,EAAK2K,EAAsBiX,IAGjDnd,EAAW,IAAIqf,GAAa,CAChChlC,MAAO8iC,IAEH5Z,EAAU,IAAIyb,GAAczjB,2WAAaiI,GACzC5C,EAAMrF,EAAI+G,UAAUtC,EAAUuD,GAC9BkH,EAAO,IAAIsU,GAAane,EAAK2C,GAE/B6e,IACF3X,EAAK7gB,MAAM,IAAM,GAEnB6gB,EAAKtpB,eAELlP,KAAK8qC,MAAQtS,CACf,uBCjDF,cAAkCqS,GAWhCnrC,YAAmBgpB,GACjB7oB,MAAM6oB,GAEN,MAAMwiB,aACJA,EAAe,SAAQiF,aACvBA,GAAe,GACbznB,EAEJ1oB,KAAKorC,cAAgBF,EACrBlrC,KAAKowC,cAAgBD,CACvB,CAEOlU,aAAa3S,EAAmB2K,GACrC,MAAMiX,EAAelrC,KAAKorC,cACpB+E,EAAenwC,KAAKowC,cACpB7e,EAAW,CACfwZ,SAAU,IAAIqD,GAAiB9kB,EAAK2K,IAEhClG,EAAW,IAAIqf,GAAa,CAChChlC,MAAO8iC,IAEH5Z,EAAU,IAAIyb,GAAczjB,EAAK0J,GAAIG,GAAI5B,GACzC5C,EAAMrF,EAAI+G,UAAUtC,EAAUuD,GAC9BkH,EAAO,IAAIsU,GAAane,EAAK2C,GAE/B6e,IACF3X,EAAK7gB,MAAM,IAAM,GAEnB6gB,EAAKtpB,eAELlP,KAAK8qC,MAAQtS,CACf,yBCzCF,cAAoCqS,GAUlCnrC,YAAmBgpB,GACjB7oB,MAAM6oB,GAEN,MAAM2nB,QACJA,GAAU,GACR3nB,EAEJ1oB,KAAKswC,SAAWD,CAClB,CAEOpU,aAAa3S,EAAmB2K,GACrC,MAAMoc,EAAUrwC,KAAKswC,UACfvhC,MAAEA,EAAKC,OAAEA,GAAWilB,EACpBlsB,EAASgH,EAAQC,EACjBiC,EAAW,IAAMlJ,EACjBwoC,EAAiBF,EACnB,EACA,EAAInsC,KAAK+D,IAAIgJ,EAAWrM,IACtB4rC,EAAgBH,EAClBtoC,EACA,EAAI7D,KAAKE,GAEP2pB,EAAW,IAAIsgB,GAAiBmC,GAChClf,EAAU,IAAIyb,GAAczjB,EAAK0J,GAAIG,GAAI,CAC7C4X,SAAU,IAAIqD,GAAiB9kB,EAAK2K,KAEhCtF,EAAMrF,EAAI+G,UAAUtC,EAAUuD,GAC9BkH,EAAO,IAAIsU,GAAane,EAAK2C,GAEnCkH,EAAK7gB,MAAM,GAAK44B,EAChBlnC,EAAcmvB,EAAK1rB,UACnBzD,EAAamvB,EAAK1rB,SAAU0rB,EAAK1rB,UAAW5I,KAAKE,GAAK,GACtDo0B,EAAKtpB,eAELlP,KAAK8qC,MAAQtS,CACf,CAEOyB,aAAa/tB,GAClBrM,MAAMo6B,aAAa/tB,GAEnB,MAAMssB,EAAOx4B,KAAK8qC,MAClB,IAAKtS,EAAM,OAEX,MACMvE,EADWuE,EAAKlH,QAAQC,SAASwZ,SACd9W,SACnBllB,MAAEA,EAAKC,OAAEA,GAAWilB,EACpBlsB,EAASgH,EAAQC,EACjB2d,EAA6B,GAAhB6L,EAAK7gB,MAAM,GAE9B,GAAI3X,KAAKswC,SAAU,CACjB,MAAMG,EAAgB,GAAM1oC,EAASlD,GACrCqH,EAAO2D,kBAAkB4gC,EAAeA,EACzC,CAED,MAAMC,EAAkBxsC,KAAK4F,MAAM6iB,EAAY,GAAK9nB,GAC9C8rC,EAAUzsC,KAAK+D,IAAIiE,EAAO6B,IAAMnJ,GAAa,KAAQ+nB,EAAazgB,EAAOnE,QAE/EmE,EAAO4D,oBAAoB4gC,EAAiBA,GAC5CxkC,EAAO6D,kBAAkB4gC,EAASzrC,KAClCgH,EAAO8D,qBAAkC,EAAb2c,EAC9B,yBCjFF,cAAoCke,GAG3B5O,aAAa3S,EAAmB2K,GACrC,MAAM1C,EAAW,CACfwZ,SAAU,IAAIqD,GAAiB9kB,EAAK2K,IAEhClG,EAAW,IAAIqf,GAAa,CAChChlC,MAAO,SACPilC,SAAU,CACR/nC,GAAOsoC,KAAMtoC,GAAOsoC,KAAMtoC,GAAOsoC,KACjCtoC,GAAOwoC,MAAOxoC,GAAOyoC,OAAQzoC,GAAOwoC,SAGlCxc,EAAU,IAAIyb,GAAczjB,EAAK0J,knCAAQzB,GACzC5C,EAAMrF,EAAI+G,UAAUtC,EAAUuD,GAC9BkH,EAAO,IAAIsU,GAAane,EAAK2C,GAEnCtxB,KAAK8qC,MAAQtS,CACf,sBCpBF,cAAiCqS,GAQ/BnrC,YAAmBgpB,GACjB7oB,MAAM6oB,EACR,CAEOuT,aAAa3S,EAAmB2K,GACrC,MAAM1C,EAAW,CACfwZ,SAAU,IAAIqD,GAAiB9kB,EAAK2K,IAGhClG,EAAW,IAAI+gB,GACfxd,EAAU,IAAIyb,GAAczjB,EAAK0J,GAAIG,GAAI5B,GAEzC5C,EAAMrF,EAAI+G,UAAUtC,EAAUuD,GAC9BkH,EAAO,IAAIsU,GAAane,EAAK2C,GAEnCtxB,KAAK8qC,MAAQtS,CACf,0BCrBF,cAAqCqS,GAWnCnrC,YAAmBgpB,GACjB7oB,MAAM6oB,EACR,CAEOuT,aAAa3S,EAAmB2K,GACrCA,EAAQ3S,MAAQC,sBAAsBqvB,OACtC3c,EAAQxS,MAAQF,sBAAsBqvB,OAEtC,MAAMrf,EAAW,CACfwZ,SAAU,IAAIqD,GAAiB9kB,EAAK2K,GACpC4c,KAAM,IAAIxB,GAAa,GACvByB,OAAQ,IAAIzB,GAAa,IACzB0B,MAAO,IAAI1B,GAAa,IAGpBthB,EAAW,IAAIuhB,GACfhe,EAAU,IAAIyb,GAAczjB,shCAAaiI,GAEzC5C,EAAMrF,EAAI+G,UAAUtC,EAAUuD,GAC9BkH,EAAO,IAAIsU,GAAane,EAAK2C,GAEnCtxB,KAAK8qC,MAAQtS,CACf,CAEO0D,cAAczjB,GACnBA,EAAQyH,iBAAkB,CAC5B,CAEO3U,OAAOW,GACZ,MAAMssB,EAAOx4B,KAAK8qC,MAClB,IAAKtS,EAAM,OAEX,MAAMjH,EAAWiH,EAAKlH,QAAQC,SAE9BA,EAASsf,KAAK/vC,IAAMoL,EAAOhD,IAAM,IAEjCqoB,EAASuf,OAAOhwC,IAAOoL,EAAO/C,MAAQ,IAAO,GAC7CooB,EAASwf,MAAMjwC,IAAMoL,EAAOa,KAE5BwkB,EAASsf,KAAKpe,aAAc,EAC5BlB,EAASuf,OAAOre,aAAc,EAC9BlB,EAASwf,MAAMte,aAAc,CAC/B,0HCnF4Bue,GACrBlxC,OAAO2xB,KAAKuf,GAAU37B,QAAO,CAAC47B,EAAOC,KAChB,MAAtBF,EAASE,KACXD,EAAMC,GAAYF,EAASE,IAGtBD,IACN,CAAE,mBCVwB,CAC7B,UACA,OACA,OACA,SACA,aACA,gBACA,cAEA,KACA,QACA,OACA,MACA,uBCPkBE,CAAClxC,EAAgBmxC,KACnC,CAAClkC,EAAUjN,UAAW64B,GAAQ74B,WAAWmlB,SAAQisB,IAC/CvxC,OAAOwxC,oBAAoBD,GACxBx7B,QAAO3V,GAA2B,MAAnBA,EAAKqxC,OAAO,IAAuB,gBAATrxC,IACzCklB,SAASllB,IACR,MAAMsxC,EAAa1xC,OAAO2xC,yBAAyBJ,EAAOnxC,GAE1D,GAAIsxC,EAAWE,MAEb5xC,OAAO6xC,eAAe1xC,EAAWC,EAAM,CACrCwxC,MAAO,YAAYE,GACjB,OAAOJ,EAAWE,MAAMpO,KAAKtjC,KAAKoxC,MAAUQ,EAC9C,QAEG,CACL,MAAMC,EAAkE,CAAA,EACpEL,EAAWM,MACbD,EAAiBC,IAAM,iBACrB,OAAO9xC,KAAKoxC,KAAyB,QAAhBxrC,EAAA4rC,EAAWM,WAAK,IAAAlsC,OAAA,EAAAA,EAAA09B,KAAKtjC,KAAKoxC,OAG/CI,EAAWO,MACbF,EAAiBE,IAAM,YAAYH,SACjC,eAAOhsC,EAAA4rC,EAAWO,0BAAKzO,KAAKtjC,KAAKoxC,MAAUQ,KAI/C9xC,OAAO6xC,eAAe1xC,EAAWC,EAAM2xC,EACxC,IACD,GACJ,StE2DiBG,EAACjW,KAAmBkW,KACvCA,EAAK7sB,SAAQvD,IACX/hB,OAAO2xB,KAAK5P,GAAQuD,SAAQzc,IAC1B,MAAM+oC,EAAQ7vB,EAAOlZ,GACjBua,MAAMC,QAAQ4Y,EAAOpzB,KAASua,MAAMC,QAAQuuB,GAC9C3V,EAAOpzB,GAAO,IAAIozB,EAAOpzB,MAAS+oC,GAElC3V,EAAOpzB,GAAO+oC,CACf,GACD,GAGS,EuEpGfM,CAAMlZ,GAASoZ"}