"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8856],{3905:(e,n,t)=>{t.d(n,{Zo:()=>v,kt:()=>m});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),d=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},v=function(e){var n=d(e.components);return a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,v=i(e,["components","mdxType","originalType","parentName"]),c=d(t),m=r,u=c["".concat(s,".").concat(m)]||c[m]||p[m]||o;return t?a.createElement(u,l(l({ref:n},v),{},{components:t})):a.createElement(u,l({ref:n},v))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=c;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var d=2;d<o;d++)l[d]=t[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},2932:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var a=t(7462),r=(t(7294),t(3905));const o={title:"How To - Events",sidebar_position:1,id:"events-basics",slug:"/events"},l=void 0,i={unversionedId:"events/events-basics",id:"events/events-basics",title:"How To - Events",description:"Event Constants",source:"@site/docs/events/Basics.mdx",sourceDirName:"events",slug:"/events",permalink:"/egjs-view360/docs/events",draft:!1,editUrl:"https://github.com/naver/egjs-view360/edit/master/demo/docs/events/Basics.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"How To - Events",sidebar_position:1,id:"events-basics",slug:"/events"},sidebar:"events",next:{title:"Common Properties",permalink:"/egjs-view360/docs/events/Commons"}},s={},d=[{value:"Event Constants",id:"event-constants",level:2},{value:"How to add event handlers",id:"how-to-add-event-handlers",level:2},{value:"With option &quot;on&quot;",id:"with-option-on",level:3},{value:"With method &quot;on&quot;",id:"with-method-on",level:3},{value:"Removing event handlers",id:"removing-event-handlers",level:2},{value:"Remove a single event handler",id:"remove-a-single-event-handler",level:3},{value:"Remove all event handlers for a particular event",id:"remove-all-event-handlers-for-a-particular-event",level:3},{value:"Remove all event handlers",id:"remove-all-event-handlers",level:3}],v={toc:d};function p(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},v,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"event-constants"},"Event Constants"),(0,r.kt)("p",null,"Event names are defined at ",(0,r.kt)("a",{parentName:"p",href:"/docs/api/Variables/EVENTS"},"EVENTS"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { EVENTS } from "@egjs/view360";\n\nEVENTS.READY // = "ready"\nEVENTS.VIEW_CHANGE // = "viewChange"\n')),(0,r.kt)("h2",{id:"how-to-add-event-handlers"},"How to add event handlers"),(0,r.kt)("p",null,"You can add event handlers in View360 in two main ways."),(0,r.kt)("h3",{id:"with-option-on"},'With option "',(0,r.kt)("a",{parentName:"h3",href:"/docs/options/miscellaneous/on"},"on"),'"'),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"on")," option automatically adds an event handler at the time of instance creation in View360."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import View360, { EVENTS } from "@egjs/view360";\n\n// The event handler is added at this point.\nconst view360 = new View360("#el_id", {\n  on: {\n    [EVENTS.READY]: evt => {\n      console.log("View360 is Ready!");\n    },\n    // You can add multiple event handlers.\n    // However, only one handler can be added as an option for an event.\n    [EVENTS.VIEW_CHANGE]: evt => {\n      console.log("View360\'s view direction is changed.");\n    }\n  }\n});\n')),(0,r.kt)("h3",{id:"with-method-on"},'With method "',(0,r.kt)("a",{parentName:"h3",href:"/docs/api/Class/View360#on"},"on"),'"'),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"on")," method to add event handlers to View 360 at any time."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import View360, { EVENTS } from "@egjs/view360";\n\nconst view360 = new View360("#el_id");\n\nview360.on(EVENTS.READY, evt => {\n  console.log("READY!")\n});\n')),(0,r.kt)("p",null,"There is method ",(0,r.kt)("a",{parentName:"p",href:"/docs/api/Class/View360#once"},"once")," as a variation.",(0,r.kt)("br",{parentName:"p"}),"\n","Event handlers that you add with ",(0,r.kt)("inlineCode",{parentName:"p"},"once")," are only triggered once before being removed from the event handlers list."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import View360, { EVENTS } from "@egjs/view360";\n\nconst view360 = new View360("#el_id");\n\nview360.once(EVENTS.RENDER, evt => {\n  console.log("This will be logged once after the first render");\n});\n')),(0,r.kt)("h2",{id:"removing-event-handlers"},"Removing event handlers"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/api/Class/View360#off"},"off")," lets you remove pre-registered event handlers.",(0,r.kt)("br",{parentName:"p"}),"\n","There are three ways to use it, as follows."),(0,r.kt)("h3",{id:"remove-a-single-event-handler"},"Remove a single event handler"),(0,r.kt)("p",null,"You can provide the event name and handler as parameters."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { EVENTS, ViewChangeEvent } from "@egjs/view360";\nconst onViewChange = (evt: ViewChangeEvent) => {};\n\nview360.on(EVENTS.VIEW_CHANGE, onViewChange);\n\n// Remove only "onViewChange" from the event handler list.\nview360.off(EVENTS.VIEW_CHANGE, onViewChange);\n')),(0,r.kt)("h3",{id:"remove-all-event-handlers-for-a-particular-event"},"Remove all event handlers for a particular event"),(0,r.kt)("p",null,"You only need to provide the event name as a parameter."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// All event handlers for viewChange events are removed.\nview360.off("viewChange");\n')),(0,r.kt)("h3",{id:"remove-all-event-handlers"},"Remove all event handlers"),(0,r.kt)("p",null,"You can call ",(0,r.kt)("inlineCode",{parentName:"p"},"off")," without any parameters."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// All event handlers are removed.\nview360.off();\n")))}p.isMDXComponent=!0}}]);