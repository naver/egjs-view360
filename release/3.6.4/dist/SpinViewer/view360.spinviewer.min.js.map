{"version":3,"file":"view360.spinviewer.min.js","sources":["../../src/version.ts","../../src/utils/utils.ts","../../src/utils/browser.ts","../../src/utils/browserFeature.ts","../../src/SpinViewer/consts.ts","../../src/SpinViewer/SpriteImage.ts","../../src/SpinViewer/index.umd.ts","../../src/SpinViewer/SpinViewer.ts"],"sourcesContent":["const VERSION = \"#__VERSION__#\";\n\nexport {\n  VERSION\n};\n","import { ImageCandidate, VideoCandidate } from \"../types/internal\";\nimport { Merged } from \"../types/internal\";\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const merge = <From extends object, To extends object>(target: From, ...srcs: To[]): Merged<From, To> => {\n  srcs.forEach(source => {\n\t  Object.keys(source).forEach(key => {\n      const value = source[key];\n      if (Array.isArray(target[key]) && Array.isArray(value)) {\n        target[key] = [...target[key], ...value];\n      } else {\n        target[key] = value;\n      }\n\t  });\n  });\n\n  return target as Merged<From, To>;\n};\n\nexport const toImageElement = (image: ImageCandidate): HTMLImageElement | HTMLImageElement[] => {\n  const images = image instanceof Array ? image : [image];\n  const parsedImages = images.map(img => {\n    let imgEl = img;\n\n    if (typeof img === \"string\") {\n      imgEl = new Image();\n      imgEl.crossOrigin = \"anonymous\";\n      imgEl.src = img;\n    }\n    return imgEl as HTMLImageElement;\n  });\n\n  return parsedImages.length === 1\n    ? parsedImages[0]\n    : parsedImages;\n};\n\nexport const toVideoElement = (videoCandidate: VideoCandidate): HTMLVideoElement => {\n  if (videoCandidate instanceof HTMLVideoElement) {\n    return videoCandidate;\n  } else {\n    // url\n    const video = document.createElement(\"video\");\n    video.setAttribute(\"crossorigin\", \"anonymous\");\n    video.setAttribute(\"webkit-playsinline\", \"\");\n    video.setAttribute(\"playsinline\", \"\");\n\n    if (videoCandidate instanceof Array) {\n      videoCandidate.forEach(v => appendSourceElement(video, v));\n    } else {\n      appendSourceElement(video, videoCandidate);\n    }\n\n    const sourceCount = video.querySelectorAll(\"source\").length;\n    if (sourceCount > 0) {\n      if (video.readyState < 1) {\n        video.load();\n      }\n    }\n\n    return video;\n  }\n};\n\n/**\n *\n * @param {Object | String} videoUrl Object or String containing Video Source URL<ko>비디오 URL 정보를 담고 있는 문자열이나 객체 {type, src}</ko>\n */\nexport const appendSourceElement = (video: HTMLVideoElement, videoUrl: string | { src: string; type: string }) => {\n  let videoSrc: string | undefined;\n  let videoType: string | undefined;\n\n  if (typeof videoUrl === \"object\") {\n    videoSrc = videoUrl.src;\n    videoType = videoUrl.type;\n  } else if (typeof videoUrl === \"string\") {\n    videoSrc = videoUrl;\n  }\n\n  if (!videoSrc) {\n    return false;\n  }\n\n  const sourceElement = document.createElement(\"source\");\n\n  sourceElement.src = videoSrc;\n  if (videoType) {\n    sourceElement.type = videoType;\n  }\n\n  video.appendChild(sourceElement);\n};\n","/* eslint-disable @typescript-eslint/no-implied-eval */\n/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport getAgent from \"@egjs/agent\";\n\n/* eslint-disable no-new-func, no-nested-ternary */\nconst win = typeof window !== \"undefined\" && window.Math === Math\n  ? window\n  : typeof self !== \"undefined\" && self.Math === Math\n    ? self\n    : Function(\"return this\")();\n/* eslint-enable no-new-func, no-nested-ternary */\n\nconst doc = win.document;\nconst nav = win.navigator;\nconst agent = getAgent();\nconst osName = agent.os.name;\nconst browserName = agent.browser.name;\nconst IS_IOS = osName === \"ios\";\nconst IS_SAFARI_ON_DESKTOP = osName === \"mac\" && browserName === \"safari\";\nconst IS_SAMSUNG_BROWSER = browserName === \"samsung internet\";\n\nexport {\n  win as window,\n  doc as document,\n  nav as navigator,\n  IS_IOS,\n  IS_SAFARI_ON_DESKTOP,\n  IS_SAMSUNG_BROWSER\n};\n","/* eslint-disable @typescript-eslint/naming-convention */\n/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { window as win, document as doc } from \"./browser\";\n\nwin.Float32Array = (typeof win.Float32Array !== \"undefined\") ? win.Float32Array : win.Array;\n\nconst Float32Array = win.Float32Array;\nconst getComputedStyle = win.getComputedStyle;\nconst userAgent = win.navigator && win.navigator.userAgent;\nconst SUPPORT_TOUCH = \"ontouchstart\" in win;\nconst SUPPORT_DEVICEMOTION = \"ondevicemotion\" in win;\nconst DeviceMotionEvent = win.DeviceMotionEvent;\nconst devicePixelRatio = win.devicePixelRatio;\n\nconst TRANSFORM = (() => {\n  const docStyle = doc?.documentElement.style ?? {};\n  const target = [\"transform\", \"webkitTransform\", \"msTransform\", \"mozTransform\"];\n\n  for (let i = 0, len = target.length; i < len; i++) {\n    if (target[i] in docStyle) {\n      return target[i];\n    }\n  }\n  return \"\";\n})();\n\n// check for will-change support\nconst SUPPORT_WILLCHANGE = win.CSS && win.CSS.supports &&\n\twin.CSS.supports(\"will-change\", \"transform\");\n\nlet WEBXR_SUPPORTED = false;\n\nconst checkXRSupport = () => {\n  const navigator = window.navigator as any;\n\n  if (!navigator.xr) {\n    return;\n  }\n\n  if (navigator.xr.isSessionSupported) {\n    navigator.xr.isSessionSupported(\"immersive-vr\").then(res => {\n      WEBXR_SUPPORTED = res;\n    }).catch(() => void 0);\n  } else if (navigator.xr.supportsSession) {\n    navigator.xr.supportsSession(\"immersive-vr\").then(res => {\n      WEBXR_SUPPORTED = res;\n    }).catch(() => void 0);\n  }\n};\n\nexport {\n  Float32Array,\n  getComputedStyle,\n  userAgent,\n  TRANSFORM,\n  SUPPORT_TOUCH,\n  SUPPORT_DEVICEMOTION,\n  SUPPORT_WILLCHANGE,\n  checkXRSupport,\n  WEBXR_SUPPORTED,\n  DeviceMotionEvent,\n  devicePixelRatio\n};\n\n","import { SpinViewerOptions, SpinViewerEvent } from \"./SpinViewer\";\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const SPINVIEWER_OPTIONS: { [key in keyof SpinViewerOptions]: true } = {\n  imageUrl: true,\n  rowCount: true,\n  colCount: true,\n  width: true,\n  height: true,\n  autoHeight: true,\n  colRow: true,\n  scale: true,\n  frameIndex: true,\n  wrapperClass: true,\n  imageClass: true\n};\n\nexport const SPINVIEWER_EVENTS: {\n  [key: string]: keyof SpinViewerEvent;\n} = {\n  LOAD: \"load\",\n  IMAGE_ERROR: \"imageError\",\n  CHANGE: \"change\",\n  ANIMATION_END: \"animationEnd\"\n};\n\nexport const DEFAULT_WRAPPER_CLASS = \"view360-wrapper\";\nexport const DEFAULT_IMAGE_CLASS = \"view360-image\";\n","import Component, { ComponentEvent } from \"@egjs/component\";\n\nimport { TRANSFORM, SUPPORT_WILLCHANGE } from \"../utils/browserFeature\";\nimport { VERSION } from \"../version\";\n\nimport { SpinViewerOptions } from \"./SpinViewer\";\nimport { DEFAULT_IMAGE_CLASS, DEFAULT_WRAPPER_CLASS } from \"./consts\";\n\nexport interface SpriteImageEvent {\n  /**\n   * Events that occur when component loading is complete\n   * @ko 컴포넌트 로딩이 완료되면 발생하는 이벤트\n   * @name eg.view360.SpriteImage#load\n   * @event\n   * @param {Object} param The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n   * @param {HTMLElement} param.target The target element for which to display the image <ko>이미지를 보여줄 대상 엘리먼트</ko>\n   * @param {HTMLElement} param.bgElement Generated background image element <ko>생성된 background 이미지 엘리먼트</ko>\n   *\n   * @example\n   *\n   * sprites.on({\n   *  \"load\" : function(evt) {\n   *    console.log(\"load event fired - e.target\", e.target, \"e.bgElement\", e.bgElement);\n   *  }\n   * });\n   */\n  load: {\n    target: HTMLElement;\n    bgElement: HTMLDivElement;\n  };\n  /**\n   * An event that occurs when the image index is changed by the user's left / right panning\n   * @ko 사용자의 좌우 Panning 에 의해 이미지 인덱스가 변경되었을때 발생하는 이벤트\n   * @name eg.view360.SpriteImage#imageError\n   * @event\n   * @param {Object} param The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n   * @param {String} param.imageUrl User-specified image URL <ko>사용자가 지정한 이미지 URL</ko>\n   *\n   * @example\n   *\n   * sprites.on({\n   *  \"imageError\" : function(evt) {\n   *    // Error handling\n   *    console.log(e.imageUrl);\n   *  }\n   * });\n   */\n  imageError: {\n    imageUrl?: string;\n  };\n}\n\n/**\n * @memberof eg.view360\n * @extends eg.Component\n * SpriteImage\n */\nclass SpriteImage extends Component<SpriteImageEvent> {\n  private static _createBgDiv(wrapperInContainer: HTMLDivElement | null, img: HTMLImageElement, rowCount: number, colCount: number, autoHeight: boolean) {\n    const el = wrapperInContainer || document.createElement(\"div\");\n\n    el.style.position = \"relative\";\n    el.style.overflow = \"hidden\";\n\n    img.style.position = \"absolute\";\n    img.style.width = `${colCount * 100}%`;\n    img.style.height = `${rowCount * 100}%`;\n\n    /** Prevent image from being dragged on IE10, IE11, Safari especially */\n    img.ondragstart = () => (false); // img.style.pointerEvents = \"none\";\n    // Use hardware accelerator if available\n    if (SUPPORT_WILLCHANGE) {\n      (img.style.willChange = \"transform\");\n    }\n\n    el.appendChild(img);\n\n    const unitWidth = img.naturalWidth / colCount;\n    const unitHeight = img.naturalHeight / rowCount;\n\n    if (autoHeight) {\n      const r = unitHeight / unitWidth;\n\n      el.style.paddingBottom = `${r * 100}%`;\n    } else {\n      el.style.height = \"100%\";\n    }\n\n    return el;\n  }\n\n  private static _getSizeString(size) {\n    if (typeof size === \"number\") {\n      return `${size}px`;\n    }\n\n    return size;\n  }\n\n  public static VERSION = VERSION;\n\n  private _el: HTMLElement;\n  private _rowCount: number;\n  private _colCount: number;\n  private _totalCount: number;\n  private _width: number | string;\n  private _height: number | string;\n  private _autoHeight: boolean;\n  private _colRow: number[];\n  private _image: HTMLImageElement;\n  private _bg: HTMLDivElement;\n  private _autoPlayReservedInfo: { interval: number; playCount: number } | null;\n  private _autoPlayTimer: number;\n\n  /**\n   * @class eg.view360.SpriteImage\n   * @classdesc A module that displays a single or continuous image of any one of the \"sprite images\". SpinViewer internally uses SpriteImage to show each frame of the sprite image.\n   * @ko 스프라이트 이미지 중 임의의 한 프레임을 단발성 혹은 연속적으로 보여주는 컴포넌트입니다. SpinViewer 는 내부적으로 SpriteImage 를 사용하여 스프라이트 이미지의 각 프레임을 보여줍니다.\n   * @extends eg.Component\n   *\n   * @param {HTMLElement} element The element to show the image <ko>이미지를 보여줄 대상 요소</ko>\n   * @param {Object} options The option object<ko>파라미터 객체</ko>\n   * @param {String} options.imageUrl The url of the sprite image <ko>스프라이트 이미지의 url</ko>\n   * @param {Number} [options.rowCount=1] Number of horizontal frames in the sprite image <ko>스프라이트 이미지의 가로 프레임 갯수</ko>\n   * @param {Number} [options.colCount=1] Number of vertical frames in the sprite image <ko>스프라이트 이미지의 세로 프레임 갯수</ko>\n   * @param {Number|String} [options.width=\"auto\"] The width of the target element to show the image <ko>이미지를 보여줄 대상 요소의 너비</ko>\n   * @param {Number|String} [options.height=\"auto\"] The height of the target element to show the image <ko>이미지를 보여줄 대상 요소의 높이</ko>\n   * @param {Boolean} [options.autoHeight=true] Whether to automatically set the height of the image area to match the original image's proportion <ko>원본 이미지 비율에 맞게 이미지 영역의 높이를 자동으로 설정할지 여부</ko>\n   * @param {Number[]} [options.colRow=[0, 0]] The column, row coordinates of the first frame of the sprite image (based on 0 index) <ko> 스프라이트 이미지 중 처음 보여줄 프레임의 (column, row) 좌표 (0 index 기반)</ko>\n   * @param {Number} [options.frameIndex=0] frameIndex specifies the index of the frame to be displayed in the \"Sprite image\". The frameIndex order is zero-based and indexed in Z form (left-to-right, top-to-bottom, and newline again from left to right).<br>- colRow is equivalent to frameIndex. However, if colRow is specified at the same time, colRow takes precedence.<ko>스프라이트 이미지 중에서 보여질 프레임의 인덱스를 지정합니다. frameIndex 순서는 0부터 시작하며 Z 형태(왼쪽에서 오른쪽, 위에서 아래, 개행 시 다시 왼쪽 부터)로 인덱싱합니다.<br>- colRow 는 frameIndex 와 동일한 기능을 합니다. 단, colRow 가 동시에 지정된 경우 colRow 가 우선합니다.</ko>\n   * @param {Number} [options.scale=1] Spin scale (The larger the spin, the more).<ko>Spin 배율 (클 수록 더 많이 움직임)</ko>\n   *\n   * @support {\"ie\": \"9+\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\", \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"2.3+ (except 3.x)\"}\n   * @example\n   *\n   * // Initialize SpriteImage\n   *\n   * var el = document.getElementById(\"image-div\");\n   * var sprites = new eg.view360.SpriteImage(el, {\n   * \timageUrl: \"/img/bag360.jpg\", // required\n   * \trowCount: 24\n   * });\n   */\n  public constructor(element: HTMLElement, options: Partial<SpinViewerOptions> = {}) {\n    super();\n    const opt = options || {};\n\n    this._el = element;\n    this._rowCount = opt.rowCount || 1;\n    this._colCount = opt.colCount || 1;\n    this._totalCount = this._rowCount * this._colCount; // total frames\n    this._width = opt.width || \"auto\";\n    this._height = opt.height || \"auto\";\n    this._autoHeight = opt.autoHeight != null ? opt.autoHeight : true; // If autoHeight is specified, _height will be overwritten.\n    this._colRow = [0, 0];\n\n    if (opt.colRow) {\n      this._colRow = opt.colRow;\n    } else if (opt.frameIndex) {\n      this.setFrameIndex(opt.frameIndex);\n    }\n\n    this._el.style.width = SpriteImage._getSizeString(this._width);\n    this._el.style.height = SpriteImage._getSizeString(this._height);\n\n    const wrapperClass = opt.wrapperClass || DEFAULT_WRAPPER_CLASS;\n    const imageClass = opt.imageClass || DEFAULT_IMAGE_CLASS;\n\n    if (!opt.imageUrl) {\n      setTimeout(() => {\n        this.trigger(new ComponentEvent(\"imageError\", {\n          imageUrl: opt.imageUrl\n        }));\n      }, 0);\n      return;\n    }\n\n    const imageInContainer = element.querySelector<HTMLImageElement>(`.${imageClass}`);\n    const wrapperInContainer = element.querySelector<HTMLDivElement>(`.${wrapperClass}`);\n\n    if (wrapperInContainer && imageInContainer) {\n      // Set it to invisible to prevent wrapper being resized\n      imageInContainer.style.display = \"none\";\n    }\n\n    this._image = imageInContainer || new Image();\n    /**\n     * Event\n     */\n\n    const image = this._image;\n\n    image.onload = () => {\n      if (wrapperInContainer && imageInContainer) {\n        imageInContainer.style.display = \"\";\n      }\n\n      this._bg = SpriteImage._createBgDiv(\n        wrapperInContainer,\n        image,\n        this._rowCount,\n        this._colCount,\n        this._autoHeight\n      );\n      this._el.appendChild(this._bg);\n      this.setColRow(this._colRow[0], this._colRow[1]);\n\n      this.trigger(new ComponentEvent(\"load\", {\n        target: this._el,\n        bgElement: this._bg\n      }));\n\n      if (this._autoPlayReservedInfo) {\n        this.play(this._autoPlayReservedInfo);\n        this._autoPlayReservedInfo = null;\n      }\n    };\n\n    image.onerror = () => {\n      this.trigger(new ComponentEvent(\"imageError\", {\n        imageUrl: opt.imageUrl\n      }));\n    };\n\n    image.src = opt.imageUrl;\n  }\n\n  /**\n   * Specifies the frameIndex of the frame to be shown in the sprite image.\n   * @ko 스프라이트 이미지 중 보여질 프레임의 frameIndex 값을 지정\n   * @method eg.view360.SpriteImage#setFrameIndex\n   * @param {Number} frameIndex frame index of a frame<ko>프레임의 인덱스</ko>\n   *\n   * @example\n   *\n   * sprites.setFrameIndex(0, 1);// col = 0, row = 1\n   */\n  public setFrameIndex(index: number) {\n    const colRow = this.toColRow(index);\n\n    this.setColRow(colRow[0], colRow[1]);\n  }\n\n  /**\n   * Returns the frameIndex of the frame to be shown in the sprite image.\n   * @ko 스프라이트 이미지 중 보여지는 프레임의 index 값을 반환\n   * @method eg.view360.SpriteImage#getFrameIndex\n   * @return {Number} frame index <ko>frame 인덱스</ko>\n   *\n   * @example\n   *\n   * var frameIndex = sprites.getFrameIndex(); // eg. frameIndex = 1\n   *\n   */\n  public getFrameIndex() {\n    return this._colRow[1] * this._colCount + this._colRow[0];\n  }\n\n  /**\n   * Specifies the col and row values of the frame to be shown in the sprite image.\n   * @ko 스프라이트 이미지 중 보여질 프레임의 col, row 값을 지정\n   * @method eg.view360.SpriteImage#setColRow\n   * @param {Number} col Column number of a frame<ko>프레임의 행값</ko>\n   * @param {Number} row Row number of a frame<ko>프레임의 열값</ko>\n   *\n   * @example\n   *\n   * sprites.setlColRow(1, 2); // col = 1, row = 2\n   */\n  public setColRow(col: number, row: number) {\n    if (row > this._rowCount - 1 || col > this._colCount - 1) {\n      return;\n    }\n\n    if (this._image && TRANSFORM) {\n      // NOTE: Currently, do not apply translate3D for using layer hack. Do we need layer hack for old browser?\n      this._image.style[TRANSFORM] = `translate(${-(col / this._colCount * 100)}%, ${-(row / this._rowCount * 100)}%)`;\n    }\n\n    this._colRow = [col, row];\n  }\n\n  /**\n   * Returns the col and row values of the frame to be shown in the sprite image.\n   * @ko 스프라이트 이미지 중 보여지는 프레임의 col, row 값을환반환\n   * @method eg.view360.SpriteImage#gelColRow\n   * @return {Number[]} Array containing col, row<ko>col, row 정보를 담는 배열</ko>\n   *\n   * @example\n   *\n   * var colRow = sprites.getlColRow();\n   * // colRow = [1, 2] - index of col is 1, index of row is 2\n   *\n   */\n  public getColRow() {\n    return this._colRow;\n  }\n\n  /**\n   * Stop playing\n   * @ko play 되고 있던 프레임 재생을 중지합니다.\n   * @method eg.view360.SpriteImage#stop\n   *\n   * @example\n   *\n   * viewer.stop();\n   *\n   */\n  public stop() {\n    if (this._autoPlayTimer) {\n      clearInterval(this._autoPlayTimer);\n      this._autoPlayTimer = -1;\n    }\n  }\n\n  /**\n   * Switches frames sequentially in the 'interval' starting from the currently displayed frame and plays all frames by 'playCount'.\n   * @ko 현재 보여지고 있는 프레임을 시작으로 'interval' 간격으로 순차적으로 프레임을 전환하며 모든 프레임을 'playCount' 만큼 재생한다.\n   * @method eg.view360.SpriteImage#play\n   * @param {Object} param The parameter object<ko>파라미터 객체</ko>\n   * @param {Number} [param.interval=1000 / totalFrameCount] Interframe Interval - in milliseconds<ko>프레임간 간격 - 밀리세컨드 단위</ko>\n   * @param {Number} [param.playCount=0] PlayCount = 1 in which all frames are reproduced once, and playCount = n in which all frames are repeated n times. playCount = 0 in which all frames are repeated infinitely<ko>모든 프레임을 1회씩 재생한 것이 playCount = 1, 모든 프레임을 n 회 재상한 것이 playCount = n 이 된다. 0 dms 무한반복</ko>\n   *\n   * @example\n   *\n   * viewer.play({angle: 16, playCount: 1});\n   *\n   */\n  public play({ interval, playCount } = { interval: 1000 / this._totalCount, playCount: 0 }) {\n    if (!this._bg) {\n      this._autoPlayReservedInfo = {interval, playCount};\n      return;\n    }\n\n    if (this._autoPlayTimer) {\n      clearInterval(this._autoPlayTimer);\n      this._autoPlayTimer = -1;\n    }\n\n    let frameIndex = this.getFrameIndex();\n    let count = 0;\n    let frameCount = 0; // for checking 1 cycle\n\n    this._autoPlayTimer = window.setInterval(() => {\n      frameIndex %= this._totalCount;\n      const colRow = this.toColRow(frameIndex);\n\n      this.setColRow(colRow[0], colRow[1]);\n      frameIndex++;\n\n      // Done 1 Cycle?\n      if (++frameCount === this._totalCount) {\n        frameCount = 0;\n        count++;\n      }\n\n      if (playCount > 0 && count === playCount) {\n        clearInterval(this._autoPlayTimer);\n      }\n    }, interval);\n  }\n\n  public toColRow(frameIndex: number) {\n    const colCount = this._colCount;\n    const rowCount = this._rowCount;\n\n    if (frameIndex < 0) {\n      return [0, 0];\n    } else if (frameIndex >= this._totalCount) {\n      return [colCount - 1, rowCount - 1];\n    }\n\n    const col = frameIndex % colCount;\n    const row = Math.floor(frameIndex / colCount);\n\n    // console.log(frameIndex, col, row);\n    return [col, row];\n  }\n}\n\nexport default SpriteImage;\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport { VERSION } from \"../version\";\nimport { merge } from \"../utils/utils\";\n\nimport SpinViewer from \"./SpinViewer\";\nimport SpriteImage from \"./SpriteImage\";\nimport * as Constants from \"./consts\";\n\nconst SpinViewerModule = {\n  SpinViewer,\n  SpriteImage,\n  VERSION\n};\n\nmerge(SpinViewerModule, Constants);\n\nexport default SpinViewerModule;\n","import Component, { ComponentEvent } from \"@egjs/component\";\nimport Axes, { PanInput } from \"@egjs/axes\";\n\nimport { VERSION } from \"../version\";\nimport { AnimationEndEvent, ChangeEvent, ImageErrorEvent, LoadEvent } from \"../types/event\";\n\nimport SpriteImage from \"./SpriteImage\";\n\nconst DEFAULT_PAN_SCALE = 0.21;\n\nexport interface SpinViewerEvent {\n  load: LoadEvent;\n  imageError: ImageErrorEvent;\n  change: ChangeEvent;\n  animationEnd: AnimationEndEvent<SpinViewer>;\n}\n\nexport interface SpinViewerOptions {\n  imageUrl: string;\n  rowCount: number;\n  colCount: number;\n  width: number | string;\n  height: number | string;\n  autoHeight: boolean;\n  colRow: number[];\n  scale: number;\n  frameIndex: number;\n  wrapperClass: string;\n  imageClass: string;\n}\n\n/**\n * @memberof eg.view360\n * @extends eg.Component\n * SpinViewer\n */\nclass SpinViewer extends Component<SpinViewerEvent> {\n  /**\n   * Version info string\n   * @ko 버전정보 문자열\n   * @static\n   * @example\n   * eg.view360.SpinViewer.VERSION;  // ex) 3.0.1\n   * @memberof eg.view360.SpinViewer\n   */\n  public static VERSION = VERSION;\n\n  private _el: HTMLElement;\n  private _sprites: SpriteImage;\n  private _axes: Axes;\n  private _panInput: PanInput;\n\n  private _scale: number;\n  private _panScale: number;\n  private _frameCount: number;\n\n  /**\n   * @classdesc A module used to displays each image sequentially according to the direction of the user's touch movement (left / right) of the sprite image that is collected by rotating the object.\n   * @ko 물체 주위를 회전하여 촬영한 이미지들을 모은 스프라이트 이미지를 사용자의 터치 이동 방향(좌 / 우) 에 따라 각 이미지들을 순차적으로 보여주는 컴포넌트입니다.\n   *\n   * @param {HTMLElement} element The element to show the image <ko>이미지를 보여줄 대상 요소</ko>\n   * @param {Object} options The option object<ko>파라미터 객체</ko>\n   * @param {String} options.imageUrl The url of the sprite image <ko>스프라이트 이미지의 url</ko>\n   * @param {Number} [options.rowCount=1] Number of horizontal frames in the sprite image <ko>스프라이트 이미지의 가로 프레임 갯수</ko>\n   * @param {Number} [options.colCount=1] Number of vertical frames in the sprite image <ko>스프라이트 이미지의 세로 프레임 갯수</ko>\n   * @param {Number|String} [options.width=\"auto\"] The width of the target element to show the image <ko>이미지를 보여줄 대상 요소의 너비</ko>\n   * @param {Number|String} [options.height=\"auto\"] The height of the target element to show the image <ko>이미지를 보여줄 대상 요소의 높이</ko>\n   * @param {Boolean} [options.autoHeight=true] Whether to automatically set the height of the image area to match the original image's proportion <ko>원본 이미지 비율에 맞게 이미지 영역의 높이를 자동으로 설정할지 여부</ko>\n   * @param {Number[]} [options.colRow=[0, 0]] The column, row coordinates of the first frame of the sprite image (based on 0 index) <ko> 스프라이트 이미지 중 처음 보여줄 프레임의 (column, row) 좌표 (0 index 기반)</ko>\n   * @param {Number} [options.scale=1] Spin scale (The larger the spin, the more).<ko>Spin 배율 (클 수록 더 많이 움직임)</ko>\n   * @param {Number} [options.frameIndex] The frameIndex of the frame to be shown in the sprite image<ko>스프라이트 이미지 중 보여질 프레임의 frameIndex 값</ko>\n   * @param {String} [options.wrapperClass=\"view360-wrapper\"] A class name for the parent element of the image element inside the container element. SpinViewer will use the element that has this class instead of creating one if it exists<ko>이미지 엘리먼트의 부모 엘리먼트의 클래스 이름. SpinViewer는 해당 클래스를 갖는 엘리먼트가 콘테이너 엘리먼트 내부에 존재할 경우, 새로 생성하는 대신 그 엘리먼트를 사용할 것입니다</ko>\n   * @param {String} [options.imageClass=\"view360-image\"] A class name for the image element inside the container element. SpinViewer will use the image element that has this class instead of creating one if it exists<ko>콘테이너 엘리먼트 내부의 이미지 엘리먼트의 클래스 이름. SpinViewer는 해당 클래스를 갖는 이미지 엘리먼트가 콘테이너 엘리먼트 내부에 존재할 경우, 새로 생성하는 대신 그 엘리먼트를 사용할 것입니다</ko>\n   * @support {\"ie\": \"9+\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\", \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"2.3+ (except 3.x)\"}\n   * @example\n   * ```\n   * // Initialize SpinViewer\n   * var el = document.getElementById(\"product-360\");\n   * var viewer = new eg.view360.SpinViewer(el, {\n   * \timageUrl: \"/img/bag360.jpg\", // required\n   * \trowCount: 24 //required\n   * });\n   * ```\n   */\n  public constructor(element: HTMLElement, options: Partial<SpinViewerOptions> = {}) {\n    super();\n\n    this._el = element;\n\n    const opt = {...options};\n    const colCount = opt.colCount || 1;\n    const rowCount = opt.rowCount || 1;\n\n    this._scale = (opt.scale || 1);\n    this._panScale = this._scale * DEFAULT_PAN_SCALE;\n\n    this._frameCount = colCount * rowCount;\n\n    // Init SpriteImage\n    this._sprites = new SpriteImage(element, opt).on({\n      \"load\": evt => {\n        this.trigger(new ComponentEvent(\"load\", evt));\n      },\n      \"imageError\": evt => {\n        this.trigger(new ComponentEvent(\"imageError\", {\n          imageUrl: evt.imageUrl\n        }));\n      }\n    });\n\n    // Init Axes\n    this._panInput = new PanInput(this._el, {\n      scale: [this._panScale, this._panScale]\n    });\n    this._axes = new Axes({\n      angle: {\n        range: [0, 359],\n        circular: true\n      }\n    }).on({\n      \"change\": evt => {\n        const curr = Math.floor(evt.pos.angle / (360 / this._frameCount));\n        const frameIndex = this._frameCount - curr - 1;\n\n        this._sprites.setFrameIndex(frameIndex);\n\n        this.trigger(new ComponentEvent(\"change\", {\n          frameIndex,\n          colRow: this._sprites.getColRow(),\n          angle: evt.pos.angle\n        }));\n      },\n      \"animationEnd\": evt => {\n        this.trigger(new ComponentEvent(\"animationEnd\", {\n          isTrusted: evt.isTrusted\n        }));\n      }\n    });\n\n    this._axes.connect(\"angle\", this._panInput);\n  }\n\n  /**\n   * Set spin scale\n   * @ko scale 을 조정할 수 있는 함수\n   * @param {Number} scale Rotation multiples at spin, the larger the rotation<ko>Spin 시 회전 배수값, 커질 수록 더 많이 회전</ko>\n   *\n   * @return {Object} Instance of SpinViewer <ko>SpinViewer 인스턴스</ko>\n   *\n   * @example\n   * viewer.setScale(2);// It moves twice as much.\n   */\n  public setScale(scale: number) {\n    if (isNaN(scale) || scale < 0) {\n      return this;\n    }\n\n    this._scale = scale;\n    this._panScale = scale * DEFAULT_PAN_SCALE;\n    this._panInput.options.scale = [this._panScale, this._panScale];\n\n    return this;\n  }\n\n  /**\n   * Get spin scale\n   * @ko scale 값을 반환한다.\n   *\n   * @return {Number} Rotation multiples at spin, the larger the rotation<ko>Spin 시 회전 배수값, 커질 수록 더 많이 회전</ko>\n   *\n   * @example\n   * viewer.getScale();// It returns number\n   */\n  public getScale() {\n    return this._scale;\n  }\n\n  /**\n   * It gives the effect of rotating for a certain duration by the specified angle based on the current rotation angle.\n   * @ko 현재 회전 각도를 기준으로 지정된 각도(angle)만큼 일정 시간동안(duration) 회전하는 효과를 준다.\n   * @param {Number} [angle = 0] angle<ko>상대적 회전 각도</ko>\n   * @param {Object} param The parameter object<ko>파라미터 객체</ko>\n   * @param {Number} [param.duration = 0] duration<ko>회전할 시간 - 밀리세컨드 단위</ko>\n   *\n   * @return {Object} Instance of SpinViewer <ko>SpinViewer 인스턴스</ko>\n   *\n   * @example\n   * viewer.spinBy(720, {duration: 500});\n   */\n  public spinBy(angle = 0, param = {duration: 0}) {\n    this._axes.setBy({angle}, param.duration);\n    return this;\n  }\n\n  /**\n   * It gives the effect of rotating for a certain duration (duration) by the specified angle (angle).\n   * @ko 지정된 각도(angle)만큼 일정 시간동안(duration) 회전하는 효과를 준다.\n   * @param {Number} [angle = 0] angle<ko>회전 각도</ko>\n   * @param {Object} param The parameter object<ko>파라미터 객체</ko>\n   * @param {Number} [param.duration = 0] duration<ko>회전할 시간 - 밀리세컨드 단위</ko>\n   *\n   * @return {Object} Instance of SpinViewer <ko>SpinViewer 인스턴스</ko>\n   *\n   * @example\n   * viewer.spinTo(30, {duration:100});\n   */\n  public spinTo(angle = 0, param = {duration: 0}) {\n    this._axes.setTo({angle}, param.duration);\n    return this;\n  }\n\n  /**\n   * Returns current angles\n   * @ko 현재 각도를 반환한다.\n   *\n   * @return {Number} Current angle <ko>현재 각도</ko>\n   */\n  public getAngle() {\n    return this._axes.get().angle || 0;\n  }\n}\n\nexport default SpinViewer;\n"],"names":["VERSION","win","window","Math","self","Function","doc","document","agent","navigator","getAgent","os","name","browser","Float32Array","Array","getComputedStyle","userAgent","DeviceMotionEvent","devicePixelRatio","TRANSFORM","docStyle","documentElement","style","target","i","len","length","SUPPORT_WILLCHANGE","CSS","supports","DEFAULT_WRAPPER_CLASS","DEFAULT_IMAGE_CLASS","imageUrl","rowCount","colCount","width","height","autoHeight","colRow","scale","frameIndex","wrapperClass","imageClass","LOAD","IMAGE_ERROR","CHANGE","ANIMATION_END","element","options","_super","opt","_this","_el","_rowCount","_colCount","_totalCount","_width","_height","_autoHeight","_colRow","setFrameIndex","SpriteImage","_getSizeString","setTimeout","trigger","ComponentEvent","imageInContainer","querySelector","wrapperInContainer","display","_image","Image","image","onload","_bg","_createBgDiv","appendChild","setColRow","bgElement","_autoPlayReservedInfo","play","onerror","src","__extends","img","el","createElement","position","overflow","ondragstart","willChange","unitWidth","naturalWidth","unitHeight","naturalHeight","r","paddingBottom","size","index","this","toColRow","col","row","_autoPlayTimer","clearInterval","_a","count","frameCount","_b","interval","playCount","getFrameIndex","setInterval","floor","Component","SpinViewerModule","SpinViewer","_scale","_panScale","_frameCount","_sprites","on","evt","_panInput","PanInput","_axes","Axes","angle","range","circular","curr","pos","getColRow","isTrusted","connect","isNaN","param","duration","setBy","setTo","get","_i","srcs","forEach","source","Object","keys","key","value","isArray","merge","Constants"],"mappings":"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"}